2A00                          ORG $2A00
2A00  7E2C03                  JMP CODESTART
rzb 512
2C03                  CODESTART
2C03  10CE2A03                LDS #IRQSTACK
2C07  B7FFDF                  STA $FFDF
                              IF (((128+vars_after-(*+2))|(127-vars_after+(*+2)))&0x8000)
                              JMP vars_after
                              ELSE
2C0A  200F                    BRA vars_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      INTERNAL VARIABLES FOR TRS-80 COLOR COMPUTER 3         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; peephole(9): inlined3
                      ;TEXTADDRESS         fdb     $e000
2C0C  E000            BITMAPADDRESS       fdb     $e000
2C0E  0000            COLORMAPADDRESS     fdb     $0000
                      ; peephole(9): direct-page4
                      ;CURRENTMODE         fcb     $0
00F0                  CURRENTMODE equ $f0
                      ; peephole(9): inlined3
                      ;CURRENTTILEMODE     fcb     1
2C10  00              EVERYSTATUS        fcb     0
2C11  04              TABCOUNT            fcb     4
                      ; peephole(5): unread2
                      ;XCURS               fcb     0
                      ; peephole(5): unread2
                      ;YCURS               fcb     0
2C12  20              EMPTYTILE           fcb     32
2C13  10              KBDRATE             fcb     16
2C14  0000            COCO3TIMER           fdb     $0
2C16  0000            COCO3TIMER2           fdb     $0
2C18  00              TICKSPERSECOND       fcb     $0
0010                  TMPPTR equ $10    ; $23
0012                  TMPPTR2 equ $12    ; $25
0014                  MATHPTR0 equ $14
0015                  MATHPTR1 equ $15
0016                  MATHPTR2 equ $16
0017                  MATHPTR3 equ $17
0018                  MATHPTR4 equ $18
0019                  MATHPTR5 equ $19
0020                  MATHPTR6 equ $20
0021                  MATHPTR7 equ $21
0022                  MATHPTR8 equ $22
0023                  MATHPTRB0 equ $23
0024                  MATHPTRB1 equ $24
0025                  MATHPTRB2 equ $25
0026                  MATHPTRB3 equ $26
0027                  MATHPTRB4 equ $27
0028                  MATHPTRB5 equ $28
0029                  MATHPTRB6 equ $29
002A                  MATHPTRB7 equ $2a
002B                  MATHPTRB8 equ $2b
003B                  DSSTATUS equ $3b
003C                  DSSIZE equ $3c
003D                  DSADDRLO equ $3d
003E                  DSADDRHI equ $3e
003F                  DSBANKLO equ $3f
0040                  DSBANKHI equ $40
0041                  COPYOFTEXTADDRESS equ $41
0043                  COPYOFBITMAPADDRESS equ $43
0045                  COPYOFCOLORMAPADDRESS equ $45
0047                  COPYOFTEXTADDRESS2 equ $47
0049                  COPYOFCOLORMAPADDRESS2 equ $49
004A                  PORT equ $4a
004A                  DIRECTION equ $4a
004A                  PATTERN equ $4a
004A                  CHARACTERS equ $4a
004B                  CLINEX equ $4b
004C                  CLINEY equ $4c
004A                  BITSTOCONVERT equ $4a
00D3                  XCURSYS equ $D3
00D6                  YCURSYS equ $D6
2C19  FF              BANKSHADOW fcb  $FF
2C1A  3E              BANKSHADOWSHADOW fcb $3E
2C1B                  vars_after
                              IF (((128+startup_after-(*+2))|(127-startup_after+(*+2)))&0x8000)
2C1B  7E2D34                  JMP startup_after
                              ELSE
                              BRA startup_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          STARTUP ROUTINE ON TRS-80 COLOR COMPUTER 3         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
2C1E                  IRQSVC
2C1E  3406                    PSHS D
2C20  3410                    PSHS X
2C22  3420                    PSHS Y
2C24  3440                    PSHS U
2C26  3408                    PSHS DP
2C28  3401                    PSHS CC
2C2A                  IRQSVC2
2C2A  12                      NOP
2C2B  12                      NOP
2C2C  12                      NOP
2C2D  3501                    PULS CC
2C2F  3508                    PULS DP
2C31  3540                    PULS U
2C33  3520                    PULS Y
2C35  3510                    PULS X
2C37  3506                    PULS D
2C39  39                      RTS
                              
2C3A                  OLDISVC
2C3A  0000                    fdb $0
2C3C                  OLDISVC2
2C3C  0000                    fdb $0
2C3E                  OLDNMIISVC
2C3E  0000                    fdb $0
2C40                  OLDNMIISVC2
2C40  0000                    fdb $0
2C42                  OLDCC
2C42  00                      fcb $0
2C43                  ISVCIRQ
2C43  3406                    PSHS D
2C45  1FA8                    TFR CC, A
2C47  84EF                    ANDA #$EF
2C49  B72C42                  STA OLDCC
2C4C  3506                    PULS D
2C4E  BD2C1E                  JSR IRQSVC
                          ; PSHS CC
2C51  3406                    PSHS D
2C53  B62D68                  LDA GIMEVIDMSHADOW
2C56  2706                    BEQ SKIPGIMEROM
2C58  BD2DA3                  JSR GIMEBANKSAVE
2C5B  BD2E0B                  JSR GIMEBANKROM
2C5E                  SKIPGIMEROM    
2C5E  B6FFA6                  LDA GIMEMMU6
2C61  B72C1A                  STA BANKSHADOWSHADOW
2C64  863E                    LDA #$3e
2C66  B7FFA6                  STA GIMEMMU6
2C69  FC2C14                  LDD COCO3TIMER
2C6C  C30001                  ADDD #$1
2C6F  FD2C14                  STD COCO3TIMER
2C72  3410                    PSHS X
2C74  CC0000                  LDD #0
2C77  FD00E3                  STD $00e3
2C7A  B7FFDE                  STA $FFDE
2C7D  1F41                    TFR S,X 
2C7F  300E                    LEAX +14,X
2C81  EC84                    LDD ,X
2C83  FD2C3C                  STD OLDISVC2
2C86  CC2C93                  LDD #ISVCIRQ2
2C89  ED84                    STD ,X
2C8B  3510                    PULS X
2C8D  3506                    PULS D
2C8F  6E9F2C3A                JMP [OLDISVC]
2C93                  ISVCIRQ2
2C93  B7FFDF                  STA $FFDF
                          ; PULS CC
                          ; PULS A
2C96  3406                    PSHS D
2C98  B62D68                  LDA GIMEVIDMSHADOW
2C9B  2703                    BEQ ISVCIRQMMUOK2
2C9D  BD2DAE                  JSR GIMEBANKRESTORE
2CA0                  ISVCIRQMMUOK2
2CA0  B62C1A                  LDA BANKSHADOWSHADOW
2CA3  B7FFA6                  STA GIMEMMU6
2CA6  B62C42                  LDA OLDCC
2CA9  1F8A                    TFR A, CC
2CAB  3506                    PULS D
2CAD  6E9F2C3C                JMP [OLDISVC2]
2CB1                  NMIISVCIRQ
2CB1  3406                    PSHS D
2CB3  3410                    PSHS X
2CB5  FC2C14                  LDD COCO3TIMER
2CB8  C30001                  ADDD #$1
2CBB  FD2C14                  STD COCO3TIMER
2CBE  CC0000                  LDD #0
2CC1  FD00E3                  STD $00e3
2CC4  B7FFDE                  STA $FFDE
2CC7  1F41                    TFR S,X 
2CC9  300E                    LEAX +14,X
2CCB  EC84                    LDD ,X
2CCD  FD2C40                  STD OLDNMIISVC2
2CD0  CC2CDD                  LDD #NMIISVCIRQ2
2CD3  ED84                    STD ,X
2CD5  3510                    PULS X
2CD7  3506                    PULS D
2CD9  6E9F2C3E                JMP [OLDNMIISVC]
2CDD                  NMIISVCIRQ2
2CDD  B7FFDF                  STA $FFDF
2CE0  6E9F2C40                JMP [OLDNMIISVC2]
2CE4                  COCO3STARTUP
2CE4  FC010D                  LDD $010D
2CE7  FD2C3A                  STD OLDISVC
2CEA  CC2C43                  LDD #ISVCIRQ
2CED  FD010D                  STD $010D
2CF0  FC010A                  LDD $010A
2CF3  FD2C3E                  STD OLDNMIISVC
2CF6  CC2CB1                  LDD #NMIISVCIRQ
2CF9  FD010A                  STD $010A
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
2CFC  4F                      CLRA
2CFD  B7011F                  STA $011f
2D00  CC0000                  LDD #$0
2D03                  COCO3STARTUPL1
2D03  C30001                  ADDD #$1
2D06  FD0014                  STD MATHPTR0
2D09  10833100                CMPD #$3100
2D0D  26F4                    BNE COCO3STARTUPL1
2D0F  FC2C14                  LDD COCO3TIMER
2D12  1083000D                CMPD #$000d
2D16  2E08                    BGT COCO3NTSC
2D18                  COCO3PAL
2D18  8632                    LDA #50
2D1A  B72C18                  STA TICKSPERSECOND
2D1D  7E2D28                  JMP COCO3STARTUPDONE
2D20                  COCO3NTSC
2D20  863C                    LDA #60
2D22  B72C18                  STA TICKSPERSECOND
2D25  7E2D28                  JMP COCO3STARTUPDONE
2D28                  COCO3STARTUPDONE
2D28                  SYSCALLDONE
2D28  B7FFDF                  STA $FFDF
2D2B  39                      RTS
2D2C                  SYSCALL
2D2C  B7FFDE                  STA $FFDE
2D2F                  SYSCALL0
2D2F  BD0000                  JSR $0000
2D32  20F4                    BRA SYSCALLDONE
                              
2D34                  startup_after
2D34  BD2CE4                  JSR COCO3STARTUP
2D37  4F                      CLRA
2D38  B700D3                  STA XCURSYS
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
2D3B  B700D6                  STA YCURSYS
                              IF (((128+gimevars_after-(*+2))|(127-gimevars_after+(*+2)))&0x8000)
                              JMP gimevars_after
                              ELSE
2D3E  202B                    BRA gimevars_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       INTERNAL VARIABLES FOR GIME HARDWARE                  *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
000B                  PLOTDEST equ $0b ; $29
000D                  PLOTCDEST equ $0d ; $27
000F                  PLOTC2DEST equ $0f ; $25
                      
                      ; peephole(9): direct-page4
                      ;XGR    fdb 0
00F1                  XGR equ $f1
                      ; peephole(5): unread2
                      ;YGR    fdb 0
2D40  FFFF            LINE   fcb $ff, $ff
                      
2D42  0000            ORIGINX    fdb 0
2D44  0000            ORIGINY    fdb 0
2D46  0000            RESOLUTIONX    fdb 0
2D48  0000            RESOLUTIONY    fdb 0
                      
                      ; peephole(9): inlined3
                      ;CLIPX1    fdb 0
                      ; peephole(9): inlined3
                      ;CLIPY1    fdb 0
                      ; peephole(9): inlined3
                      ;CLIPX2    fdb 319
                      ; peephole(9): inlined3
                      ;CLIPY2    fdb 199
                      
                      ; peephole(5): unread2
                      ;LASTCOLOR fcb 0
                      ; peephole(9): inlined3
                      ;CURRENTWIDTH      fdb 32
                      ; peephole(9): inlined3
                      ;CURRENTHEIGHT      fdb 16
                      ; peephole(9): inlined3
                      ;CURRENTTILESWIDTH      fcb 32
                      ; peephole(9): inlined3
                      ;CURRENTTILESHEIGHT      fcb 16
                      ; peephole(5): unread2
                      ;CURRENTTILES            fcb 128
                      ; peephole(9): inlined3
                      ;CURRENTFRAMESIZE   fdb 32*16
                      ; peephole(9): inlined3
                      ;CURRENTSL          fcb 32
                      ; peephole(9): inlined3
                      ;TEXTWW      fcb 3
                      ; peephole(5): unread2
                      ;FONTWIDTH       fcb 8
                      ; peephole(5): unread2
                      ;FONTHEIGHT      fcb 8
                      
0041                  IMAGEX EQU $41 ; $42
0043                  IMAGEY EQU $43 ; $44
0045                  IMAGEW EQU $45
0047                  IMAGEH EQU $47
0048                  IMAGEH2 EQU $48
0049                  IMAGET EQU $49
0050                  IMAGEF EQU $50
                      
2D4A  0000            BLITTMPPTR fdb $0
2D4C  0000            BLITTMPPTR2 fdb $0
2D4E  00              BLITS0 fcb $0
2D4F  00              BLITS1 fcb $0
2D50  00              BLITS2 fcb $0
2D51  00              BLITR0 fcb $0
2D52  00              BLITR1 fcb $0
2D53  00              BLITR2 fcb $0
2D54  00              BLITR3 fcb $0
                      
0041                  PLOTX   EQU $41 ; $42
0043                  PLOTY   EQU $43
0045                  PLOTC   EQU $45
                      
                      ; PALETTEPAPER               fcb $12, $24, $0b, $07, $3f, $1f, $09, $26
                      ; PALETTEPEN                 fcb $00, $12, $00, $3f, $00, $12, $00, $26
2D55  0000000000000000 PALETTEPAPER               fcb $00, $00, $00, $00, $00, $00, $00, $00
2D5D  0000000000000000 PALETTEPEN                 fcb $00, $00, $00, $00, $00, $00, $00, $00
                      
2D65  00              PALETTEPENUNUSED           fcb 0
2D66  00              PALETTEPAPERUNUSED         fcb 0
2D67  00              PALETTELIMIT               fcb 0
2D68  00              GIMEVIDMSHADOW             fcb 0
2D69  03              GIMEMMUSTART               fcb 3
2D6A  00              GIMEINIT1SHADOW            fcb 0
2D6B                  gimevars_after
                              IF (((128+gimestartup_after-(*+2))|(127-gimestartup_after+(*+2)))&0x8000)
2D6B  7E309F                  JMP gimestartup_after
                              ELSE
                              BRA gimestartup_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                            STARTUP ROUTINE FOR GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
FF90                  GIMEINIT0   equ   $FF90
FF91                  GIMEINIT1   equ   $FF91
FF92                  GIMEIRQENR  equ   $FF92
FF93                  GIMEFIRQENR equ   $FF93
FF94                  GIMETIMSB   equ   $FF94
FF95                  GIMETILSB   equ   $FF95
FF96                  GIMERSVD1   equ   $FF96
FF97                  GIMERSVD2   equ   $FF97
FF98                  GIMEVIDM    equ   $FF98
FF99                  GIMEVIDR    equ   $FF99
FF9A                  GIMEBRDR    equ   $FF9A
FF9B                  GIMERSVD3   equ   $FF9B
FF9C                  GIMEVSCRL   equ   $FF9C
FF9D                  GIMEVOFF1   equ   $FF9D
FF9E                  GIMEVOFF0   equ   $FF9E
FF9F                  GIMEHOFF    equ   $FF9F
                      
FFA0                  GIMEMMU0   equ   $FFA0
FFA1                  GIMEMMU1   equ   $FFA1
FFA2                  GIMEMMU2   equ   $FFA2
FFA3                  GIMEMMU3   equ   $FFA3
FFA4                  GIMEMMU4   equ   $FFA4
FFA5                  GIMEMMU5   equ   $FFA5
FFA6                  GIMEMMU6   equ   $FFA6
FFA7                  GIMEMMU7   equ   $FFA7
                      
FFA8                  GIMEMMU8   equ   $FFA8
FFA9                  GIMEMMU9   equ   $FFA9
FFAA                  GIMEMMUA   equ   $FFAA
FFAB                  GIMEMMUB   equ   $FFAB
FFAC                  GIMEMMUC   equ   $FFAC
FFAD                  GIMEMMUD   equ   $FFAD
FFAE                  GIMEMMUE   equ   $FFAE
FFAF                  GIMEMMUF   equ   $FFAF
                      
                      ; This routine is needed to implement the BANK command.
                      ; It changes the $c000 address mapping on TASK 0.
                      
2D6E                  GIMEBANKSHADOWCHANGE
2D6E  3406                    PSHS D
2D70  B62C19                  LDA BANKSHADOW
2D73  812F                    CMPA #$2F
2D75  2E06                    BGT GIMEBANKSHADOWCHANGERESET
2D77  B7FFA6                  STA GIMEMMU6
2D7A  3506                    PULS D
2D7C  39                      RTS
2D7D                  GIMEBANKSHADOWCHANGERESET
2D7D  863E                    LDA #$3E
2D7F  B7FFA6                  STA GIMEMMU6
2D82  3506                    PULS D
2D84  39                      RTS
                      
                      ; This routine is needed to setup the video RAM
                      ; segments at screen mode change. It is setup
                      ; on the TASK 1. The TASK 0 is left for 
                      ; standard ROM / RAM
                      
2D85                  GIMERAM
2D85  3416                    PSHS D,X 
2D87  1CFE                    ANDCC #$FE
2D89  B62D69                  LDA GIMEMMUSTART
2D8C  8EFFAB                  LDX #GIMEMMUB
2D8F  3086                    LEAX A,X 
2D91  8630                    LDA #$30
2D93  F62D69                  LDB GIMEMMUSTART
2D96                  GIMERAML2
2D96  A784                    STA ,X
2D98  3001                    LEAX 1,X 
2D9A  4C                      INCA
2D9B  5C                      INCB
2D9C  C104                    CMPB #4
2D9E  26F6                    BNE GIMERAML2
2DA0  3516                    PULS D,X 
2DA2  39                      RTS
                      
                      ; This routine is needed to save the current
                      ; state of TASK bank selection (TASK 0 / TASK1).
                      
2DA3                  GIMEBANKSAVE
2DA3  3406                    PSHS D
2DA5  B6FF91                  LDA GIMEINIT1
2DA8  B72D6A                  STA GIMEINIT1SHADOW
2DAB  3506                    PULS D
2DAD  39                      RTS
                      
                      ; This routine is needed to restore the
                      ; state of TASK bank selection (TASK 0 / TASK1).
                      
2DAE                  GIMEBANKRESTORE
2DAE  3406                    PSHS D
2DB0  B62D6A                  LDA GIMEINIT1SHADOW
2DB3  B7FF91                  STA GIMEINIT1
2DB6  3506                    PULS D
2DB8  39                      RTS
                      
                      ; This routine will give back the need of
                      ; switch between video and memory RAM ad each
                      ; read / write cycle.
                      ;    Input: Y = address to check
                      ;           U = size to check
                      ;    Output: A = 1 switch is needed
                      
2DB9                  GIMEBANKISNEEDED
2DB9  3426                    PSHS Y, D
2DBB  1F30                    TFR U, D
2DBD  31AB                    LEAY D,Y 
2DBF  B62D69                  LDA GIMEMMUSTART
2DC2  2710                    BEQ GIMEBANKISNEEDED0
2DC4  8101                    CMPA #1
2DC6  2715                    BEQ GIMEBANKISNEEDED1
2DC8  8102                    CMPA #2
2DCA  271A                    BEQ GIMEBANKISNEEDED2
2DCC  8103                    CMPA #3
2DCE  271F                    BEQ GIMEBANKISNEEDED3
2DD0                  GIMEBANKISNEEDEDN
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
2DD0  4F                      CLRA
2DD1  3526                    PULS Y, D
2DD3  39                      RTS
2DD4                  GIMEBANKISNEEDED0
2DD4  108C5FFF                CMPY #$5FFF
2DD8  2E1E                    BGT GIMEBANKISNEEDEDY
2DDA  7E2DD0                  JMP GIMEBANKISNEEDEDN
2DDD                  GIMEBANKISNEEDED1
2DDD  108C7FFF                CMPY #$7FFF
2DE1  2E15                    BGT GIMEBANKISNEEDEDY
2DE3  7E2DD0                  JMP GIMEBANKISNEEDEDN
2DE6                  GIMEBANKISNEEDED2
2DE6  108C9FFF                CMPY #$9FFF
2DEA  2E0C                    BGT GIMEBANKISNEEDEDY
2DEC  7E2DD0                  JMP GIMEBANKISNEEDEDN
2DEF                  GIMEBANKISNEEDED3
2DEF  108CBFFF                CMPY #$bFFF
2DF3  2E03                    BGT GIMEBANKISNEEDEDY
2DF5  7E2DD0                  JMP GIMEBANKISNEEDEDN
2DF8                  GIMEBANKISNEEDEDY
2DF8  8601                    LDA #1
2DFA  3526                    PULS Y, D
2DFC  39                      RTS
                      
                      ; This routine is needed to switch to video RAM.
                      
2DFD                  GIMEBANKVIDEO
2DFD  3406                    PSHS D
2DFF  B6FF91                  LDA GIMEINIT1
2E02  8A01                    ORA #$1
2E04  B7FF91                  STA GIMEINIT1
2E07  3506                    PULS D
2E09  39                      RTS
                      
                      ; This routine is needed to setup the standard
                      ; RAM / ROM segment. It actually does nothing
                      ; since we preserve the default configuration.
                      
2E0A                  GIMEROM
2E0A  39                      RTS
                      
                      ; This routine is needed to switch to ROM/RAM.
                      
2E0B                  GIMEBANKROM
2E0B  3406                    PSHS D
2E0D  B6FF91                  LDA GIMEINIT1
2E10  84FE                    ANDA #$FE
2E12  B7FF91                  STA GIMEINIT1
2E15  3506                    PULS D
2E17  39                      RTS
                      
                      ; This is the startup routine.
                      
2E18                  GIMESTARTUP
                      
                          ; Standard initialization
                      
2E18  864C                    LDA   #%01001100
2E1A  B7FF90                  STA   GIMEINIT0
                      ; peephole(1): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDA   #%00000011
2E1D  B6FF98                  LDA   GIMEVIDM
2E20  8408                    ANDA  #$8
2E22  8A03                    ORA   #%00000011
2E24  B7FF98                  STA   GIMEVIDM
2E27  B72D68                  STA   GIMEVIDMSHADOW
2E2A  8625                    LDA   #%00100101
2E2C  B7FF99                  STA   GIMEVIDR
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA   #0
2E2F  4F                      CLRA
2E30  B7FF9A                  STA   GIMEBRDR
2E33  7FFF9C                  CLR   GIMEVSCRL
2E36  86C0                    LDA   #$C0
2E38  B7FF9D                  STA   GIMEVOFF1
2E3B  7FFF9E                  CLR   GIMEVOFF0
2E3E  7FFF9F                  CLR   GIMEHOFF
                      
2E41  8EFFA8                  LDX #GIMEMMU8
2E44  8638                    LDA #$38
2E46  A780                    STA ,X+
2E48  4C                      INCA
2E49  A780                    STA ,X+
2E4B  4C                      INCA
2E4C  A780                    STA ,X+
2E4E  4C                      INCA
2E4F  A780                    STA ,X+
2E51  4C                      INCA
2E52  A780                    STA ,X+
2E54  4C                      INCA
2E55  A780                    STA ,X+
2E57  4C                      INCA
2E58  A780                    STA ,X+
2E5A  4C                      INCA
2E5B  A780                    STA ,X+
                      
                          ; Reset the palette.
                      
2E5D  BD2F7A                  JSR GIMERESETPALETTE
                      
                          ; Setup the video RAM segments.
2E60  BD2D85                  JSR GIMERAM
                      
                          ; Turn on ROM/RAM
2E63  BD2E0B                  JSR GIMEBANKROM
                      
2E66  39                      RTS
                      
                      ; Look for a specific (pen) color into the palette.
                      ;   input: B = color to look for
                      ;   output: A = index of ink, $FF if not found
2E67                  GIMELOOKFORPALETTEPEN
2E67  3410                    PSHS X
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2E69  4F                      CLRA
2E6A  8E2D5D                  LDX #PALETTEPEN
2E6D                  GIMELOOKFORPALETTEPENL1
2E6D  E186                    CMPB A,X 
2E6F  2707                    BEQ GIMELOOKFORPALETTEPEND
2E71  4C                      INCA
2E72  8108                    CMPA #8
2E74  26F7                    BNE GIMELOOKFORPALETTEPENL1
2E76  86FF                    LDA #$FF
2E78                  GIMELOOKFORPALETTEPEND
2E78  3510                    PULS X
2E7A  39                      RTS
                      
                      ; Look for a specific (paper) color into the palette.
                      ;   input: B = color to look for
                      ;   output: A = index of ink, $FF if not found
2E7B                  GIMELOOKFORPALETTEPAPER
2E7B  3410                    PSHS X
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2E7D  4F                      CLRA
2E7E  8E2D55                  LDX #PALETTEPAPER
2E81                  GIMELOOKFORPALETTEPAPERL1
2E81  E186                    CMPB A,X 
2E83  2707                    BEQ GIMELOOKFORPALETTEPAPERD
2E85  4C                      INCA
2E86  8108                    CMPA #8
2E88  26F7                    BNE GIMELOOKFORPALETTEPAPERL1
2E8A  86FF                    LDA #$FF
2E8C                  GIMELOOKFORPALETTEPAPERD
2E8C  3510                    PULS X
2E8E  39                      RTS
                      
                      ; Look for a specific color into the (paper+pen) palette.
                      ;   input: B = color to look for
                      ;   output: A = index of ink, $FF if not found
2E8F                  GIMELOOKFORPALETTE
2E8F  3410                    PSHS X
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2E91  4F                      CLRA
2E92  8E2D55                  LDX #PALETTEPAPER
2E95                  GIMELOOKFORPALETTEL1
2E95  E186                    CMPB A,X 
2E97  2708                    BEQ GIMELOOKFORPALETTED
2E99  4C                      INCA
2E9A  B12D67                  CMPA PALETTELIMIT
2E9D  26F6                    BNE GIMELOOKFORPALETTEL1
2E9F  86FF                    LDA #$FF
2EA1                  GIMELOOKFORPALETTED
2EA1  3510                    PULS X
2EA3  39                      RTS
                      
                      ; Insert a specific color into the (pen) palette.
                      ;   input: B = color to insert
                      ;   output: A = index of ink allocated
2EA4                  GIMEINSERTPALETTEPEN
2EA4  3410                    PSHS X
2EA6  C1FF                    CMPB #$FF
2EA8  2716                    BEQ GIMEINSERTPALETTEPENDONE
2EAA  B62D65                  LDA PALETTEPENUNUSED
2EAD  4C                      INCA
2EAE  8108                    CMPA #8
2EB0  2601                    BNE GIMEINSERTPALETTEPENUNDER
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2EB2  4F                      CLRA
2EB3                  GIMEINSERTPALETTEPENUNDER
2EB3  B72D65                  STA PALETTEPENUNUSED
2EB6  8E2D5D                  LDX #PALETTEPEN
2EB9  E786                    STB A,X
2EBB  8EFFB8                  LDX #$FFB8
2EBE  E786                    STB A,X
2EC0                  GIMEINSERTPALETTEPENDONE
2EC0  3510                    PULS X
2EC2  39                      RTS
                      
                      ; Insert a specific color into the (paper) palette.
                      ;   input: B = color to insert
                      ;   output: A = index of ink allocated
2EC3                  GIMEINSERTPALETTEPAPER
2EC3  3410                    PSHS X
2EC5  C1FF                    CMPB #$FF
2EC7  2716                    BEQ GIMEINSERTPALETTEPAPERDONE
2EC9  B62D66                  LDA PALETTEPAPERUNUSED
2ECC  4C                      INCA
2ECD  8108                    CMPA #8
2ECF  2601                    BNE GIMEINSERTPALETTEPAPERUNDER
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2ED1  4F                      CLRA
2ED2                  GIMEINSERTPALETTEPAPERUNDER
2ED2  B72D66                  STA PALETTEPAPERUNUSED
2ED5  8E2D55                  LDX #PALETTEPAPER
2ED8  E786                    STB A,X
2EDA  8EFFB0                  LDX #$FFB0
2EDD  E786                    STB A,X
2EDF                  GIMEINSERTPALETTEPAPERDONE
2EDF  3510                    PULS X
2EE1  39                      RTS
                      
                      ; Insert a specific color into the (paper+pen) palette.
                      ;   input: B = color to insert
                      ;   output: A = index of ink allocated
2EE2                  GIMEINSERTPALETTE
2EE2  3410                    PSHS X
2EE4  C1FF                    CMPB #$FF
2EE6  2717                    BEQ GIMEINSERTPALETTEDONE
2EE8  B62D66                  LDA PALETTEPAPERUNUSED
2EEB  4C                      INCA
2EEC  B12D67                  CMPA PALETTELIMIT
2EEF  2601                    BNE GIMEINSERTPALETTEUNDER
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2EF1  4F                      CLRA
2EF2                  GIMEINSERTPALETTEUNDER
2EF2  B72D66                  STA PALETTEPAPERUNUSED
2EF5  8E2D55                  LDX #PALETTEPAPER
2EF8  E786                    STB A,X
2EFA  8EFFB0                  LDX #$FFB0
2EFD  E786                    STB A,X
2EFF                  GIMEINSERTPALETTEDONE
2EFF  3510                    PULS X
2F01  39                      RTS
                      
                      ; Update a specific color into the (pen) palette.
                      ;   input: 
                      ;           A = index of ink to update
                      ;           B = color to update
2F02                  GIMEUPDATEPALETTEPEN
2F02  3410                    PSHS X
2F04  C1FF                    CMPB #$FF
2F06  270A                    BEQ GIMEUPDATEPALETTEPENDONE
2F08  8E2D5D                  LDX #PALETTEPEN
2F0B  E786                    STB A,X
2F0D  8EFFB8                  LDX #$FFB8
2F10  E786                    STB A,X
2F12                  GIMEUPDATEPALETTEPENDONE
2F12  3510                    PULS X
2F14  39                      RTS
                      
                      ; Update a specific color into the (paper) palette.
                      ;   input: 
                      ;           A = index of ink to update
                      ;           B = color to update
2F15                  GIMEUPDATEPALETTEPAPER
2F15  3410                    PSHS X
2F17  C1FF                    CMPB #$FF
2F19  270A                    BEQ GIMEUPDATEPALETTEPAPERDONE
2F1B  8E2D55                  LDX #PALETTEPAPER
2F1E  E786                    STB A,X
2F20  8EFFB0                  LDX #$FFB0
2F23  E786                    STB A,X
2F25                  GIMEUPDATEPALETTEPAPERDONE
2F25  3510                    PULS X
2F27  39                      RTS
                      
                      ; Update a specific color into the (paper+pen) palette.
                      ;   input: 
                      ;           A = index of ink to update
                      ;           B = color to update
2F28                  GIMEUPDATEPALETTE
2F28  3410                    PSHS X
2F2A  C1FF                    CMPB #$FF
2F2C  270A                    BEQ GIMEUPDATEPALETTEDONE
2F2E  8E2D55                  LDX #PALETTEPAPER
2F31  E786                    STB A,X
2F33  8EFFB0                  LDX #$FFB0
2F36  E786                    STB A,X
2F38                  GIMEUPDATEPALETTEDONE
2F38  3510                    PULS X
2F3A  39                      RTS
                      
                      ; Get a specific color from the (pen) palette.
                      ;   input: 
                      ;           A = index of ink
                      ;   output: 
                      ;           B = color
2F3B                  GIMEGETPALETTEPEN
2F3B  3410                    PSHS X
2F3D  8E2D5D                  LDX #PALETTEPEN
2F40  E686                    LDB A,X
2F42  3510                    PULS X
2F44  39                      RTS
                      
                      ; Get a specific color from the (paper) palette.
                      ;   input: 
                      ;           A = index of ink
                      ;   output: 
                      ;           B = color
2F45                  GIMEGETPALETTEPAPER
2F45  3410                    PSHS X
2F47  8E2D55                  LDX #PALETTEPAPER
2F4A  E686                    LDB A,X
2F4C  3510                    PULS X
2F4E  39                      RTS
                      
                      ; Get a specific color from the (paper+pen) palette.
                      ;   input: 
                      ;           A = index of ink
                      ;   output: 
                      ;           B = color
2F4F                  GIMEGETPALETTE
2F4F  3410                    PSHS X
2F51  8E2D55                  LDX #PALETTEPAPER
2F54  E686                    LDB A,X
2F56  3510                    PULS X
2F58  39                      RTS
                      
                      ; Look for a specific color into the (pen) palette and, if missing,
                      ; insert it into palette.
                      ;   input: 
                      ;           B = color to look for / insert
                      ;   output: 
                      ;           A = index of ink
2F59                  GIMESELECTPALETTEPEN
2F59  BD2E67                  JSR GIMELOOKFORPALETTEPEN
2F5C  81FF                    CMPA #$FF
2F5E  2603                    BNE GIMESELECTPALETTEPENDONE
2F60  BD2EA4                  JSR GIMEINSERTPALETTEPEN
2F63                  GIMESELECTPALETTEPENDONE
2F63  39                      RTS
                      
                      ; Look for a specific color into the (paper) palette and, if missing,
                      ; insert it into palette.
                      ;   input: 
                      ;           B = color to look for / insert
                      ;   output: 
                      ;           A = index of ink
2F64                  GIMESELECTPALETTEPAPER
2F64  BD2E7B                  JSR GIMELOOKFORPALETTEPAPER
2F67  81FF                    CMPA #$FF
2F69  2603                    BNE GIMESELECTPALETTEPAPERDONE
2F6B  BD2EC3                  JSR GIMEINSERTPALETTEPAPER
2F6E                  GIMESELECTPALETTEPAPERDONE
2F6E  39                      RTS
                      
                      ; Look for a specific color into the (paper+pen) palette and, if missing,
                      ; insert it into palette.
                      ;   input: 
                      ;           B = color to look for / insert
                      ;   output: 
                      ;           A = index of ink
2F6F                  GIMESELECTPALETTE
2F6F  BD2E8F                  JSR GIMELOOKFORPALETTE
2F72  81FF                    CMPA #$FF
2F74  2603                    BNE GIMESELECTPALETTEDONE
2F76  BD2EE2                  JSR GIMEINSERTPALETTE
2F79                  GIMESELECTPALETTEDONE
2F79  39                      RTS
                      
                      ; Reset palette.
2F7A                  GIMERESETPALETTE
2F7A  3436                    PSHS Y,X , D
                      ; peephole(1): r314 (LDA,LDB)->(LDD)
                      ;       LDA #0
                      ;       LDB #0
2F7C  CC0000                  LDD #((0)&255)*256+((0)&255)
2F7F  8E2D55                  LDX #PALETTEPAPER
2F82  108EFFB0                LDY #$FFB0
2F86                  GIMERESETPALETTEL1
2F86  A785                    STA B,X 
2F88  A7A5                    STA B,Y 
2F8A  5C                      INCB
2F8B  C110                    CMPB #16
2F8D  26F7                    BNE GIMERESETPALETTEL1
2F8F  3536                    PULS Y,X , D
2F91  39                      RTS
                      
                      ; Calculate the starting address (byte) of the first pixel
                      ; positioned at PLOTX, PLOTY for the current screen mode.
                      ;               Input: PLOTX, PLOTY
                      ;               Output: 
                      ;                               X -> address
2F92                  GIMECALCPOSBM
2F92  3406                    PSHS D
2F94  BE2C0C                  LDX BITMAPADDRESS
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
2F97  96F0                    LDA <CURRENTMODE
2F99  84E0                    ANDA #$E0
2F9B  81E0                    CMPA #$E0
2F9D  270D                    BEQ GIMECALCPOSBM16
2F9F  8160                    CMPA #$60
2FA1  2752                    BEQ GIMECALCPOSBM4
2FA3  8140                    CMPA #$40
2FA5  102700A9                LBEQ GIMECALCPOSBM2
2FA9  3506                    PULS D
2FAB  39                      RTS 
                      
2FAC                  GIMECALCPOSBM16
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
2FAC  96F0                    LDA <CURRENTMODE
2FAE  841F                    ANDA #$1F
2FB0  8102                    CMPA #2
2FB2  2F13                    BLE GIMECALCPOSBM16X64
2FB4  8105                    CMPA #5
2FB6  2F14                    BLE GIMECALCPOSBM16X80
2FB8  8108                    CMPA #8
2FBA  2F15                    BLE GIMECALCPOSBM16X128
2FBC  810B                    CMPA #11
2FBE  2F16                    BLE GIMECALCPOSBM16X160
2FC0  810E                    CMPA #14
2FC2  2F17                    BLE GIMECALCPOSBM16X256
2FC4  7E2FE0                  JMP GIMECALCPOSBM16X320
2FC7                  GIMECALCPOSBM16X64
2FC7  8620                    LDA #32
2FC9  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FCC                  GIMECALCPOSBM16X80
2FCC  8628                    LDA #40
2FCE  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FD1                  GIMECALCPOSBM16X128
2FD1  8640                    LDA #64
2FD3  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FD6                  GIMECALCPOSBM16X160
2FD6  8650                    LDA #80
2FD8  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FDB                  GIMECALCPOSBM16X256
2FDB  8680                    LDA #128
2FDD  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FE0                  GIMECALCPOSBM16X320
2FE0  86A0                    LDA #160
2FE2  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FE5                  GIMECALCPOSBM16OFFSET
2FE5  F60044                  LDB PLOTY+1
2FE8  3D                      MUL
2FE9  308B                    LEAX D,X 
                      
2FEB  FC0041                  LDD PLOTX
2FEE  44                      LSRA
2FEF  56                      RORB
2FF0  308B                    LEAX D,X 
                      
2FF2  3506                    PULS D
2FF4  39                      RTS
                      
2FF5                  GIMECALCPOSBM4
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
2FF5  96F0                    LDA <CURRENTMODE
2FF7  841F                    ANDA #$1F
2FF9  8102                    CMPA #2
2FFB  2F1B                    BLE GIMECALCPOSBM4X64
2FFD  8105                    CMPA #5
2FFF  2F1C                    BLE GIMECALCPOSBM4X80
3001  8108                    CMPA #8
3003  2F1D                    BLE GIMECALCPOSBM4X128
3005  810B                    CMPA #11
3007  2F1E                    BLE GIMECALCPOSBM4X160
3009  810E                    CMPA #14
300B  2F1F                    BLE GIMECALCPOSBM4X256
300D  8111                    CMPA #17
300F  2F20                    BLE GIMECALCPOSBM4X320
3011  8114                    CMPA #20
3013  2F21                    BLE GIMECALCPOSBM4X512
3015  7E303B                  JMP GIMECALCPOSBM4X640
3018                  GIMECALCPOSBM4X64
3018  8610                    LDA #16
301A  7E3040                  JMP GIMECALCPOSBM4OFFSET
301D                  GIMECALCPOSBM4X80
301D  8614                    LDA #20
301F  7E3040                  JMP GIMECALCPOSBM4OFFSET
3022                  GIMECALCPOSBM4X128
3022  8620                    LDA #32
3024  7E3040                  JMP GIMECALCPOSBM4OFFSET
3027                  GIMECALCPOSBM4X160
3027  8628                    LDA #40
3029  7E3040                  JMP GIMECALCPOSBM4OFFSET
302C                  GIMECALCPOSBM4X256
302C  8640                    LDA #64
302E  7E3040                  JMP GIMECALCPOSBM4OFFSET
3031                  GIMECALCPOSBM4X320
3031  8650                    LDA #80
3033  7E3040                  JMP GIMECALCPOSBM4OFFSET
3036                  GIMECALCPOSBM4X512
3036  8680                    LDA #128
3038  7E3040                  JMP GIMECALCPOSBM4OFFSET
303B                  GIMECALCPOSBM4X640
303B  86A0                    LDA #160
303D  7E3040                  JMP GIMECALCPOSBM4OFFSET
3040                  GIMECALCPOSBM4OFFSET
3040  F60044                  LDB PLOTY+1
3043  3D                      MUL
3044  308B                    LEAX D,X 
                      
3046  FC0041                  LDD PLOTX
3049  44                      LSRA
304A  56                      RORB
304B  44                      LSRA
304C  56                      RORB
304D  308B                    LEAX D,X 
                      
304F  3506                    PULS D
3051  39                      RTS
                      
3052                  GIMECALCPOSBM2
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
3052  96F0                    LDA <CURRENTMODE
3054  841F                    ANDA #$1F
3056  8102                    CMPA #2
3058  2F13                    BLE GIMECALCPOSBM2X128
305A  8105                    CMPA #5
305C  2F14                    BLE GIMECALCPOSBM2X160
305E  8108                    CMPA #8
3060  2F15                    BLE GIMECALCPOSBM2X256
3062  810B                    CMPA #11
3064  2F16                    BLE GIMECALCPOSBM2X320
3066  810E                    CMPA #14
3068  2F17                    BLE GIMECALCPOSBM2X512
306A  7E3086                  JMP GIMECALCPOSBM2X640
306D                  GIMECALCPOSBM2X128
306D  8610                    LDA #16
306F  7E308B                  JMP GIMECALCPOSBM2OFFSET
3072                  GIMECALCPOSBM2X160
3072  8614                    LDA #20
3074  7E308B                  JMP GIMECALCPOSBM2OFFSET
3077                  GIMECALCPOSBM2X256
3077  8620                    LDA #32
3079  7E308B                  JMP GIMECALCPOSBM2OFFSET
307C                  GIMECALCPOSBM2X320
307C  8628                    LDA #40
307E  7E308B                  JMP GIMECALCPOSBM2OFFSET
3081                  GIMECALCPOSBM2X512
3081  8640                    LDA #64
3083  7E308B                  JMP GIMECALCPOSBM2OFFSET
3086                  GIMECALCPOSBM2X640
3086  8650                    LDA #80
3088  7E308B                  JMP GIMECALCPOSBM2OFFSET
308B                  GIMECALCPOSBM2OFFSET
308B  F60044                  LDB PLOTY+1
308E  3D                      MUL
308F  308B                    LEAX D,X 
                      
3091  FC0041                  LDD PLOTX
3094  44                      LSRA
3095  56                      RORB
3096  44                      LSRA
3097  56                      RORB
3098  44                      LSRA
3099  56                      RORB
309A  308B                    LEAX D,X 
                      
309C  3506                    PULS D
309E  39                      RTS
309F                  gimestartup_after
309F  BD2E18                  JSR GIMESTARTUP
30A2  CCC000                  LDD #$c000
30A5  B7FF9D                  STA GIMEVOFF1
30A8  F7FF9E                  STB GIMEVOFF0
30AB  7FFF9F                  CLR GIMEHOFF
30AE  B6FF98                  LDA GIMEVIDM
30B1  8408                    ANDA #$8
30B3  8A03                    ORA #$03
30B5  B7FF98                  STA GIMEVIDM
30B8  B72D68                  STA GIMEVIDMSHADOW
30BB  8625                    LDA #$25
30BD  B7FF99                  STA GIMEVIDR
30C0  C603                    LDB #$03
30C2  F72D69                  STB GIMEMMUSTART
30C5  CCC000                  LDD #$c000
30C8  FD2C0C                  STD BITMAPADDRESS
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$c000
30CB  86C0                    LDA #$c0
30CD  FD3146                  STD TEXTADDRESS
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
30D0  4F                      CLRA
30D1  FD2D42                  STD ORIGINX
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
                      ; peephole(3): r738 [A=0](CLRA)->()
                      ;       CLRA
30D4  FD2D44                  STD ORIGINY
30D7  CC0140                  LDD #$0140
30DA  FD30E4                  STD CURRENTWIDTH
30DD  CC00C8                  LDD #$00c8
30E0  FD30EA                  STD CURRENTHEIGHT
                      ; peephole(9): inlined1
                      ;       LDD CURRENTWIDTH
30E3  CC0020                  LDD #32
30E4                  CURRENTWIDTH equ *-2
30E6  FD2D46                  STD RESOLUTIONX
                      ; peephole(9): inlined1
                      ;       LDD CURRENTHEIGHT
30E9  CC0010                  LDD #16
30EA                  CURRENTHEIGHT equ *-2
30EC  FD2D48                  STD RESOLUTIONY
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB #$80
                      ; peephole(5): unread1
                      ;       STB CURRENTTILES
30EF  C628                    LDB #$28
30F1  F7313D                  STB CURRENTTILESWIDTH
30F4  C619                    LDB #$19
30F6  F7313F                  STB CURRENTTILESHEIGHT
30F9  C610                    LDB #$10
30FB  F72D67                  STB PALETTELIMIT
30FE  CC07D0                  LDD #$07d0
3101  FD3531                  STD CURRENTFRAMESIZE
3104  C6A0                    LDB #$a0
3106  F736A9                  STB CURRENTSL
                              IF (((128+GIMERESETPALETTE-(*+2))|(127-GIMERESETPALETTE+(*+2)))&0x8000)
3109  BD2F7A                  JSR GIMERESETPALETTE
                              ELSE
                              BSR GIMERESETPALETTE
                              ENDIF
                              IF (((128+GIMERAM-(*+2))|(127-GIMERAM+(*+2)))&0x8000)
310C  BD2D85                  JSR GIMERAM
                              ELSE
                              BSR GIMERAM
                              ENDIF
310F  C604                    LDB #$04
                      ; peephole(9): direct-page1
                      ;       STB CURRENTMODE
3111  D7F0                    STB <CURRENTMODE
3113  C601                    LDB #$01
3115  F7311B                  STB CURRENTTILEMODE
                              IF (((128+clsText_after-(*+2))|(127-clsText_after+(*+2)))&0x8000)
                              JMP clsText_after
                              ELSE
3118  2046                    BRA clsText_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       CLEAR SCREEN ROUTINE FOR GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
311A                  CLST
                      ; peephole(9): inlined1
                      ;       LDA CURRENTTILEMODE
311A  8601                    LDA #1
311B                  CURRENTTILEMODE equ *-1
311C  2601                    BNE CLSTX
311E  39                      RTS
311F                  CLSTX
311F  3476                    PSHS A,B,X,Y,U
                          ; The CLS command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
3121  BD2DFD                  JSR GIMEBANKVIDEO
3124  F6E000                  LDB _PEN
3127  BD2F59                  JSR GIMESELECTPALETTEPEN
312A  48                      LSLA
312B  48                      LSLA
312C  48                      LSLA
312D  B70045                  STA PLOTC
3130  F6E001                  LDB _PAPER
3133  BD2F64                  JSR GIMESELECTPALETTEPAPER
3136  BA0045                  ORA PLOTC
3139  B70045                  STA PLOTC
                      ; peephole(9): inlined1
                      ;       LDA CURRENTTILESWIDTH
313C  8620                    LDA #32
313D                  CURRENTTILESWIDTH equ *-1
                      ; peephole(9): inlined1
                      ;       LDB CURRENTTILESHEIGHT
313E  C610                    LDB #16
313F                  CURRENTTILESHEIGHT equ *-1
3140  3D                      MUL
3141  58                      LSLB
3142  49                      ROLA
3143  1F03                    TFR D,U 
                      ; peephole(9): inlined1
                      ;       LDX TEXTADDRESS
3145  8EE000                  LDX #$e000
3146                  TEXTADDRESS equ *-2
3148  B62C12                  LDA EMPTYTILE
314B  F60045                  LDB PLOTC
314E                  CLSTX0
314E  ED80                    STD ,X+
3150  3001                    LEAX 1,X 
3152  335F                    LEAU -1,U 
3154  11830000                CMPU #0
3158  26F4                    BNE CLSTX0
                          ; The CLS command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
315A  BD2E0B                  JSR GIMEBANKROM
315D  3576                    PULS A,B,X,Y,U
315F  39                      RTS
3160                  clsText_after
3160  BD311A                  JSR CLST
                              IF (((128+VARINIT-(*+2))|(127-VARINIT+(*+2)))&0x8000)
3163  BD5082                  JSR VARINIT
                              ELSE
                              BSR VARINIT
                              ENDIF
                              ; L:0
                              ; P:882
                              ; L:1
                              ; P:0
                              ; L:2
                              ; P:0
                              ; L:3
                              ; P:0
                              ; L:4
                              ; P:0
                              ; L:5
                              ; P:0
                              ; L:6
                              ; P:0
                              ; L:7
                              ; P:0
                              ; L:8
3166  C615                    LDB #$15
3168  F7E008                  STB _Ttmp2
316B  F6E008                  LDB _Ttmp2
316E  F7E009                  STB _xloc
                              ; P:4
                              ; L:9
                              IF (((128+dstring_after-(*+2))|(127-dstring_after+(*+2)))&0x8000)
3171  7E3273                  JMP dstring_after
                              ELSE
                              BRA dstring_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                DINAMYC STRING MANAGEMENT WITH GARBAGE COLLECTION            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; DSDEFINE(Y) -> B
3174                  DSDEFINE
3174  8D4F                    BSR   DSFINDFREE
3176  8D62                    BSR   DSDESCRIPTOR
3178  A6A0                    LDA   ,Y+
317A  A784                    STA ,X 
317C  10AF01                  STY 1,X 
317F  86C0                    LDA #$C0
3181  A703                    STA 3,X 
3183  39                      RTS
3184                  OUT_OF_MEMORY
3184  20FE                    BRA   OUT_OF_MEMORY
                      ; DSFREE(B)
3186                  DSFREE
3186  8D52                    BSR   DSDESCRIPTOR
3188  4F                      CLRA
3189  A703                    STA 3,X 
318B  A784                    STA ,X 
318D  39                      RTS
                      ; DSWRITE(B)
318E                  DSWRITE
318E  8D4A                    BSR   DSDESCRIPTOR
3190  A603                    LDA 3,X 
3192  2A23                    BPL   DSWRITED
3194  847F                    ANDA #$7F
3196  A703                    STA 3,X 
3198  A684                    LDA ,X 
319A  8D46                    BSR   DSCHECKFREE
319C                  DSWRITEOK
319C  10AE01                  LDY 1,X 
319F  3420                    PSHS Y
31A1  BD324B                  JSR   DSUSINGALLOC
31A4  3520                    PULS Y
31A6  EE01                    LDU 1,X 
31A8                  DSCOPY
31A8  A684                    LDA ,X 
                              
31AA                  DSWRITECOPY
31AA  270B                    BEQ DSWRITED
31AC  3404                    PSHS B
31AE                  DSWRITECOPYL
31AE  E6A0                    LDB   ,Y+
31B0  E7C0                    STB   ,U+
31B2  4A                      DECA
31B3  26F9                    BNE DSWRITECOPYL 
31B5  3584                    PULS  B,PC
31B7                  DSWRITED
31B7  39                      RTS
                      ; DSRESIZE(B,A)
31B8                  DSRESIZE
31B8  8D20                    BSR   DSDESCRIPTOR
31BA  A784                    STA ,X 
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #$0
31BC  2606                    BNE DSRESIZEDONE
31BE  A603                    LDA 3,X
31C0  8A80                    ORA #$80
31C2  A703                    STA 3,X
31C4                  DSRESIZEDONE
31C4  39                      RTS
                      ; DSFINDFREE() -> B
31C5                  DSFINDFREE
31C5  3402                    PSHS  A
31C7  C601                    LDB   #1; // fix denote 0 as "unused slot"
31C9                  DSFINDFREEL
31C9  8D0F                    BSR   DSDESCRIPTOR
31CB  A603                    LDA   3,X
31CD  8440                    ANDA  #$40
31CF  2707                    BEQ   DSFINDFREEN
31D1  5C                      INCB
31D2  C120                    CMPB  #MAXSTRINGS
31D4  26F3                    BNE   DSFINDFREEL
31D6  20AC                    BRA   OUT_OF_MEMORY   
31D8                  DSFINDFREEN
31D8  3582                    PULS  A,PC
                      ; DSDESCRIPTOR(B) -> X
31DA                  DSDESCRIPTOR
31DA  8E58F0                  LDX   #DESCRIPTORS
31DD  3A                      ABX
31DE  3A                      ABX
31DF  3A                      ABX
31E0  3A                      ABX
31E1  39                      RTS
                      ; DSCHECKFREE()
31E2                  DSCHECKFREE
31E2  3406                    PSHS  A,B
31E4  B731ED                  STA   DSCHECKFREE2x
31E7                  DSCHECKFREE2
31E7  FC5D70                  LDD   FREE_STRING
31ED                  DSCHECKFREE2x SET *+3
31EA  10830000                CMPD  #$0000
31EE  2C04                    BGE   DSCHECKFREEOK
31F0                  DSCHECKFREEKO
31F0  8D04                    BSR   DSGC
31F2  20F3                    BRA   DSCHECKFREE2
31F4                  DSCHECKFREEOK
31F4  3586                    PULS  A,B,PC
                      ; DSGC()
31F6                  DSGC
31F6  3410                    PSHS X
31F8  CC01FF                  LDD #(max_free_string-1)
31FB  FD5D70                  STD FREE_STRING
31FE  B63272                  LDA USING
3201  2605                    BNE   DSGW
3203  CE5B70                  LDU #TEMPORARY
3206  2003                    BRA   BSGCLOOP0
3208                  DSGW
3208  CE5970                  LDU #WORKING
320B                  BSGCLOOP0
320B  C601                    LDB #1
320D                  DSGCLOOP
320D  3406                    PSHS A,B
320F  8DC9                    BSR   DSDESCRIPTOR
3211  A603                    LDA 3,X 
3213  2B1A                    BMI   DSGCLOOP2
3215  8440                    ANDA #$40
3217  2714                    BEQ DSGCLOOP1
3219  A684                    LDA ,X 
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #$0
321B  2712                    BEQ DSGCLOOP3
321D  10AE01                  LDY 1,X 
3220  A684                    LDA ,X 
3222  8D27                    BSR   DSUSINGALLOC
3224  EE01                    LDU 1,X 
3226  A684                    LDA ,X 
3228  17FF7F                  LBSR  DSWRITECOPY
322B  2002                    BRA   DSGCLOOP3
322D                  DSGCLOOP1
                      ;    CLRA       (A already = 0 here)
322D  A784                    STA ,X 
                      ;    BRA   DSGCLOOP3
322F                  DSGCLOOP2
                          ; LDA #0
                          ; STA , X
322F                  DSGCLOOP3
322F  3506                    PULS A,B
3231  5C                      INCB
3232  C120                    CMPB #MAXSTRINGS
3234  26D7                    BNE DSGCLOOP
3236                  DSGCEND
3236  733272                  COM   USING
3239  3590                    PULS  X,PC
                      ;OUT_OF_MEMORY2
                      ;    SYNC
                      ;    BRA OUT_OF_MEMORY
                      ; DSALLOC(A) -> B
323B                  DSALLOC
323B  3402                    PSHS A
323D  8D86                    BSR   DSFINDFREE
323F  8D99                    BSR   DSDESCRIPTOR
3241  A603                    LDA 3,X 
3243  8A40                    ORA   #$40
3245  A703                    STA   3,X
3247  3502                    PULS A
3249  8D97                    BSR   DSCHECKFREE
324B                  DSALLOCOK
324B                  DSUSINGALLOC
324B  8D18                    BSR   DSUSING
                      ;    BRA   DSMALLOC
                      ; DSMALLOC(U,A,B)
324D                  DSMALLOC
324D  3440                    PSHS  U
324F  8D89                    BSR   DSDESCRIPTOR
3251  A784                    STA ,X 
3253  3406                    PSHS  D
3255  FC5D70                  LDD FREE_STRING
3258  E0E4                    SUBB  ,S
325A  8200                    SBCA  #0
325C  FD5D70                  STD   FREE_STRING
325F  E362                    ADDD  2,S
3261  ED01                    STD   1,X
                              
3263  35C6                    PULS  U,D,PC
                      ; DSUSING() -> U
3265                  DSUSING
3265  7D3272                  TST   USING
3268  2704                    BEQ DSUSINGW
326A  CE5B70                  LDU #TEMPORARY
326D  39                      RTS
326E                  DSUSINGW
326E  CE5970                  LDU #WORKING
3271  39                      RTS
3272                  USING 
3272  00                      FCB   0
                              
3273                  dstring_after
3273  F6E00C                  LDB _batt
3276  BD3186                  JSR DSFREE
3279  108E50F1                LDY #_Tstr4
327D  BD3174                  JSR DSDEFINE
3280  F7E00C                  STB _batt
                              ; P:176
                              ; L:10
                              ; P:0
                              ; L:11
3283  CCC000                  LDD #$c000
3286  B7FF9D                  STA GIMEVOFF1
3289  F7FF9E                  STB GIMEVOFF0
328C  7FFF9F                  CLR GIMEHOFF
328F  B6FF98                  LDA GIMEVIDM
3292  8408                    ANDA #$8
3294  8A81                    ORA #$81
3296  B7FF98                  STA GIMEVIDM
3299  B72D68                  STA GIMEVIDMSHADOW
329C  863E                    LDA #$3e
329E  B7FF99                  STA GIMEVIDR
32A1  4F                      CLRA
32A2  B72D69                  STA GIMEMMUSTART
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$6000
32A5  8660                    LDA #$60
32A7  FD2C0C                  STD BITMAPADDRESS
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$6000
32AA  8660                    LDA #$60
32AC  FD3146                  STD TEXTADDRESS
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
32AF  4F                      CLRA
32B0  FD2D42                  STD ORIGINX
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
                      ; peephole(3): r738 [A=0](CLRA)->()
                      ;       CLRA
32B3  FD2D44                  STD ORIGINY
32B6  CC0140                  LDD #$0140
32B9  FD30E4                  STD CURRENTWIDTH
32BC  CC00C8                  LDD #$00c8
32BF  FD30EA                  STD CURRENTHEIGHT
32C2  FC30E4                  LDD CURRENTWIDTH
32C5  FD2D46                  STD RESOLUTIONX
32C8  FC30EA                  LDD CURRENTHEIGHT
32CB  FD2D48                  STD RESOLUTIONY
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB #$80
                      ; peephole(5): unread1
                      ;       STB CURRENTTILES
32CE  C628                    LDB #$28
32D0  F7313D                  STB CURRENTTILESWIDTH
32D3  C619                    LDB #$19
32D5  F7313F                  STB CURRENTTILESHEIGHT
32D8  C610                    LDB #$10
32DA  F72D67                  STB PALETTELIMIT
32DD  CC7D00                  LDD #$7d00
32E0  FD3531                  STD CURRENTFRAMESIZE
32E3  C6A0                    LDB #$a0
32E5  F736A9                  STB CURRENTSL
                              IF (((128+GIMERESETPALETTE-(*+2))|(127-GIMERESETPALETTE+(*+2)))&0x8000)
32E8  BD2F7A                  JSR GIMERESETPALETTE
                              ELSE
                              BSR GIMERESETPALETTE
                              ENDIF
                              IF (((128+GIMERAM-(*+2))|(127-GIMERAM+(*+2)))&0x8000)
32EB  BD2D85                  JSR GIMERAM
                              ELSE
                              BSR GIMERAM
                              ENDIF
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$f0
32EE  CC00F0                  LDD #$00f0
32F1  B7311B                  STA CURRENTTILEMODE
                              ; P:55
                              ; L:12
                      ; peephole(9): direct-page1
                      ;       STB CURRENTMODE
32F4  D7F0                    STB <CURRENTMODE
                      ;       CLRA
32F6  BE30E4                  LDX CURRENTWIDTH
32F9  BFE00F                  STX _Ttmp6
32FC  FCE00F                  LDD _Ttmp6
32FF  FDE011                  STD _w
                              ; L:12
3302  BE30EA                  LDX CURRENTHEIGHT
3305  BFE00F                  STX _Ttmp6
3308  FCE00F                  LDD _Ttmp6
330B  FDE013                  STD _h
                              ; L:12
330E  C610                    LDB #$10
3310  F7E016                  STB _Ttmp9
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp9
                      ; peephole(5): unread1
                      ;       STB _c
                              ; P:12
                              ; L:13
                              ; P:0
                              ; L:14
3313  C602                    LDB #$02
3315  F7E008                  STB _Ttmp2
3318  CC0000                  LDD #$0000
331B  FDE00F                  STD _Ttmp6
331E  F6E008                  LDB _Ttmp2
3321  F7E010                  STB _Ttmp6+1
                              IF (((128+cpu_math_div_16bit_to_16bit_after-(*+2))|(127-cpu_math_div_16bit_to_16bit_after+(*+2)))&0x8000)
3324  7E33C6                  JMP cpu_math_div_16bit_to_16bit_after
                              ELSE
                              BRA cpu_math_div_16bit_to_16bit_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ; unsigned division
                      ; D=D/X X=D.mod.X
                      ; http://www.logicielsmoto.com/phpBB/viewtopic.php?p=1090#p1090
3327                  CPUMATHDIV16BITTO16BIT_fast
3327  3410                    PSHS  X
3329  E7E4                    STB   ,S
332B  E661                    LDB   1,S
332D  5A                      DECB
332E  C501                    BITB  #1
3330  2606                    BNE   CPUMATHDIV16BITTO16BIT_remainder
                              
3332  E6E4                    LDB   ,S
3334                  CPUMATHDIV16BITTO16BIT_slow
3334  EDE4                    STD   ,S
3336  203F                    BRA   CPUMATHDIV16BITTO16BIT0  
3338                  CPUMATHDIV16BITTO16BIT_remainder
3338  E4E4                    ANDB  ,S
333A  E761                    STB   1,S   
333C  E6E4                    LDB   ,S
333E  6FE4                    CLR   ,S
3340  6E99334E                JMP   [CPUMATHDIV16BITTO16BIT_tab-2,X]
3344                  CPUMATHDIV16BITTO16BIT_fast32
3344  44                      LSRA
3345  56                      RORB
3346                  CPUMATHDIV16BITTO16BIT_fast16    
3346  44                      LSRA
3347  56                      RORB
3348                  CPUMATHDIV16BITTO16BIT_fast8    
3348  44                      LSRA
3349  56                      RORB
334A                  CPUMATHDIV16BITTO16BIT_fast4    
334A  44                      LSRA
334B  56                      RORB
334C                  CPUMATHDIV16BITTO16BIT_fast2    
334C  44                      LSRA
334D  56                      RORB
334E  3590                    PULS  X,PC
3350                  CPUMATHDIV16BITTO16BIT_tab
3350  334C                    FDB   CPUMATHDIV16BITTO16BIT_fast2
3352  334A                    FDB   CPUMATHDIV16BITTO16BIT_fast4
3354  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
3356  3348                    FDB   CPUMATHDIV16BITTO16BIT_fast8
3358  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
335A  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
335C  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
335E  3346                    FDB   CPUMATHDIV16BITTO16BIT_fast16
3360  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
3362  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
3364  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
3366  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
3368  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
336A  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
336C  3334                    FDB   CPUMATHDIV16BITTO16BIT_slow
336E  3344                    FDB   CPUMATHDIV16BITTO16BIT_fast32
                              
3370                  CPUMATHDIV16BITTO16BIT
3370  8C0020                  CMPX  #32
3373  23B2                    BLS   CPUMATHDIV16BITTO16BIT_fast
                              
3375  3406                    PSHS  D
3377                  CPUMATHDIV16BITTO16BIT0
3377  BF3391                  STX   CPUMATHDIV16BITTO16BITL2-2
337A  BF338C                  STX   CPUMATHDIV16BITTO16BITL2-7
337D  3161                    LEAY  1,S
337F  4F                      CLRA
3380  5F                      CLRB
3381  8E0010                  LDX   #16
3384                  CPUMATHDIV16BITTO16BITL1    
3384  69A4                    ROL   ,Y
3386  69E4                    ROL   ,S
3388  59                      ROLB
3389  49                      ROLA
338A  10835555                CMPD  #$5555
338E  2503                    BCS   CPUMATHDIV16BITTO16BITL2
3390  835555                  SUBD  #$5555
3393                  CPUMATHDIV16BITTO16BITL2
3393  301F                    LEAX  -1,X
3395  26ED                    BNE CPUMATHDIV16BITTO16BITL1
3397  1F01                    TFR   D,X
3399  3506                    PULS  D
339B  59                      ROLB
339C  49                      ROLA
339D  53                      COMB
339E  43                      COMA
339F  39                      RTS
33A0                  CPUMATHDIV16BITTO16BIT_SIGNED
33A0  DD14                    STD   <MATHPTR0
33A2  9F16                    STX   <MATHPTR2
33A4  9816                    EORA  <MATHPTR2 ; compute sign of result
33A6  9719                    STA   <MATHPTR5 ; store it on stack
33A8  CC0000                  LDD   #0        ; D=-X
33AB  9316                    SUBD  <MATHPTR2 ; X < 0 ?
33AD  2B02                    BMI   CPUMATHDIV16BITTO16BIT_SIGNED1
33AF  DD16                    STD   <MATHPTR2 ; yes ==> repmace with -X
33B1                  CPUMATHDIV16BITTO16BIT_SIGNED1
33B1  9E16                    LDX   <MATHPTR2
33B3  DC14                    LDD   <MATHPTR0 ; D < 0 ?
33B5  2A04                    BPL   CPUMATHDIV16BITTO16BIT_SIGNED2
33B7  40                      NEGA            ; yes => negate D
33B8  50                      NEGB
33B9  8200                    SBCA  #0
33BB                  CPUMATHDIV16BITTO16BIT_SIGNED2    
33BB  8DB3                    BSR   CPUMATHDIV16BITTO16BIT
33BD  0D19                    TST   <MATHPTR5 ; get sign of result
33BF  2A04                    BPL   CPUMATHDIV16BITTO16BIT_SIGNED3    
33C1  40                      NEGA            ; negative ? 
33C2  50                      NEGB            ; yes => negate D
33C3  8200                    SBCA  #0
33C5                  CPUMATHDIV16BITTO16BIT_SIGNED3
33C5  39                      RTS
33C6                  cpu_math_div_16bit_to_16bit_after
33C6  FCE011                  LDD _w
33C9  BEE00F                  LDX _Ttmp6
33CC  BD33A0                  JSR CPUMATHDIV16BITTO16BIT_SIGNED
33CF  BFE020                  STX _Ttmp13
33D2  FDE01C                  STD _Ttmp12
33D5  FCE01C                  LDD _Ttmp12
33D8  FDE022                  STD _mid1
                              ; P:126
                              ; L:15
33DB  C602                    LDB #$02
33DD  F7E008                  STB _Ttmp2
33E0  CC0000                  LDD #$0000
33E3  FDE00F                  STD _Ttmp6
33E6  F6E008                  LDB _Ttmp2
33E9  F7E010                  STB _Ttmp6+1
33EC  FCE013                  LDD _h
33EF  BEE00F                  LDX _Ttmp6
33F2  BD33A0                  JSR CPUMATHDIV16BITTO16BIT_SIGNED
33F5  BFE020                  STX _Ttmp13
33F8  FDE01C                  STD _Ttmp12
33FB  FCE01C                  LDD _Ttmp12
                      ; peephole(5): unread1
                      ;       STD _mid2
                              ; P:13
                              ; L:16
                              ; P:0
                              ; L:17
                              IF (((128+duff_after-(*+2))|(127-duff_after+(*+2)))&0x8000)
33FE  7E3490                  JMP duff_after
                              ELSE
                              BRA duff_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                               DUFF'S DEVICE                                 *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
                          ; This is a special device that should transform the memory movement into
                          ; an optimized one. This is done by using some tricks and automodification
                          ; assembly code.
                      
3401                  DUFFDEVICE
                      
                          ; First of all, we avoid to do anything if the memory to copy is equal
                          ; to zero. It means that nothing is needed to do, so move to the end
                          ; of the routine.
                      
3401  10830000                CMPD #0
3405  10270085                LBEQ DUFFDEVICEDONE
                      
                          ; Then, we disable, at startup, the 16 byte copy loop, by assigning
                          ; a couple of "NOP" (opcode $12) at the place of the branching.
                      
3409  CE1212                  LDU #$1212
340C  FF3473                  STU DUFFDEVICEL0C
                      
                          ; So, we must manage the fact that the size is odd: in this case,
                          ; the first byte will be copied directly. This is done by dividing
                          ; the size by 2 and taking apart the carry bit.
                      
340F  44                      LSRA
3410  56                      RORB
                      
                          ; CARRY CLEAR (BCC) -> Size was even
                          ; CARRY SET   (BCS) -> Size was odd
                      
3411  2410                    BCC DUFFDEVICELX
                      
                          ; The size was odd, so copy the first byte and move ahead
                          ; source (Y) and destination (X) address.
                      
3413  3406                    PSHS D
3415  A6A0                    LDA ,Y +
3417  A780                    STA ,X +
3419  3506                    PULS D
                      
                          ; Again, we avoid to do anything if the memory to copy is equal
                          ; to zero. It means that nothing is needed to do more, so move 
                          ; to the end of the routine.
                      
341B  10830000                CMPD #0
341F  1027006B                LBEQ DUFFDEVICEDONE
                      
                          ; We reach this point having the original size halved. So now we
                          ; have to "unroll" the copy. Unrolling is a process that try to
                          ; transform a "generic" size copy in a "modulus" size copy.
                          ; We use a modulus of 16 bytes (using a 2 byte register for 8 times).
                          ; If the size is multiple of 16 bytes, the process is complete as
                          ; described. Otherwise, we are going to calculate the "rest" 
                          ; (modulus) of the copy. In order to make the process efficient, 
                          ; we will first calculate the remaining part (the "modulus", in fact) 
                          ; and then we will proceed to copy the rest as quickly as possible,
                          ;  which will be a multiple of 16 bytes,
                      
3423                  DUFFDEVICELX
                      
                          ; Let's put up some numbers (we consider only even sizes):
                          ;
                          ; - (original) size:  2    (16 byte) blocks: 0     (rest) block size:  2 bytes
                          ; - "             ":  4    "              ": 0     "               ":  4 bytes
                          ; - "             ":  6    "              ": 0     "               ":  6 bytes
                          ; - "             ":  8    "              ": 0     "               ":  8 bytes
                          ; - "             ": 10    "              ": 0     "               ": 10 bytes
                          ; - "             ": 12    "              ": 0     "               ": 12 bytes
                          ; - "             ": 14    "              ": 0     "               ": 14 bytes
                          ; - "             ": 16    "              ": 1     "               ":  0 bytes
                          ; - "             ": 18    "              ": 1     "               ":  2 bytes
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ;
                          ; In D register we have the original size (divided by 2). So we have to 
                          ; calculate, first of all, the size of the rest block size.
                          ;
                          ; RBS = ( 2 * D ) MOD 16 = ( 2 * D ) MOD ( 2 * 8 ) = D MOD 8 = B AND #$7
                              
                          ; So we save the (halved) size to copy.
                      
3423  3406                    PSHS D
                      
                          ; and calculate the block size.
                      
3425  C407                    ANDB #7
3427  58                      LSLB
                      
                          ; If it is zero, it means that no (rest) block size has to be managed.
                      
3428  2718                    BEQ DUFFDEVICELXNR
                      
                          ; Othewise, we have to replace the standard block size (16 bytes) with
                          ; the rest block size. This is done by automodification technique.
                      
342A  F73468                  STB DUFFDEVICEL0A + 2
342D  F7346B                  STB DUFFDEVICEL0B + 2
                      
                          ; Moreover, we must replace the subtraction terms for the loop counter.
                          ; Again, this is done by automodification technique. Note that the
                          ; loop counter thinks in terms of "2 bytes" so we must store the
                          ; half of the block size.
                      
3430  54                      LSRB
3431  F7346E                  STB DUFFDEVICEL0D + 2
                      
                          ; Finally, we must calculate the address (offset) of the first command 
                          ; needed to copy the memory from source to destination. In order to 
                          ; understand which is the offset, we must take in count of this
                          ; numbers:
                          ;
                          ; - (original) size:  2    (rest) block size:  2 bytes  offset:     28
                          ; - "             ":  4    "               ":  4 bytes              24
                          ; - "             ":  6    "               ":  6 bytes              20
                          ; - "             ":  8    "               ":  8 bytes              16
                          ; - "             ": 10    "               ": 10 bytes              12
                          ; - "             ": 12    "               ": 12 bytes              08
                          ; - "             ": 14    "               ": 14 bytes              04
                          ;
                          ; 00: LDU 14, Y
                          ; 02: STU 14, X
                          ; 04: LDU 12, Y
                          ; 06: STU 12, X
                          ; .....
                          ; 24: LDU 2, Y
                          ; 26: STU 2, X
                          ; 28: LDU , Y
                          ; 30: STU , X
                          ;
                          ; The formula is 32 - 4 * ( rest block size / 2 ) = 32 - 4 * B
                      
3434  8604                    LDA #4
3436  3D                      MUL
3437  F7348F                  STB DUFFDELTA
343A  C620                    LDB #32
343C  F0348F                  SUBB DUFFDELTA
343F  F73445                  STB DUFFDEVICEL0+1
                      
                          ; If we reach this point, nothing has to be customized since the
                          ; memory to copy is multiple of 16 bytes.
                      
3442                  DUFFDEVICELXNR
                              
                          ; Restore the (halved) size to copy.
                      
3442  3506                    PULS D
                      
                          ; Move to the first command of the unrolled loop.
                          ; This address could be different if (rest) block size.
                      
3444                  DUFFDEVICEL0
3444  2000                    BRA DUFFDEVICEL1
                      
                          ; This is the unrolled loop to copy 16 bytes at each round.
                          ; If the memory to copy is not multiple of 16 bytes, the
                          ; first time we will jump "inside" the loop, in order to copy
                          ; only a part of the block (< 16 bytes).
                      
3446                  DUFFDEVICEL1
3446  EE2E                    LDU 14,Y 
3448  EF0E                    STU 14,X 
344A  EE2C                    LDU 12,Y 
344C  EF0C                    STU 12,X 
344E  EE2A                    LDU 10,Y 
3450  EF0A                    STU 10,X 
3452  EE28                    LDU 8,Y 
3454  EF08                    STU 8,X 
3456  EE26                    LDU 6,Y 
3458  EF06                    STU 6,X 
345A  EE24                    LDU 4,Y 
345C  EF04                    STU 4,X 
345E  EE22                    LDU 2,Y 
3460  EF02                    STU 2,X 
3462  EEA4                    LDU ,Y 
3464  EF84                    STU ,X 
                      
                          ; Move the destination address ahead of the *actual*
                          ; block size. Normally it is 16 but not in the first
                          ; block copied, that is equal to the (rest) block size.
                      
3466                  DUFFDEVICEL0A
3466  308810                  LEAX 16,X 
                      
                          ; Move the source address ahead of the *actual*
                          ; block size. Normally it is 16 but not in the first
                          ; block copied, that is equal to the (rest) block size.
                      
3469                  DUFFDEVICEL0B
3469  31A810                  LEAY 16,Y
                      
                          ; Decrement the counter of the size of the block. Normally
                          ; it is 8 (2x8 = 16 bytes) but it could be lesser in case
                          ; of the first loop for a movement that is not multiple
                          ; of 16 bytes.
                      
346C                  DUFFDEVICEL0D
346C  830008                  SUBD #$8
                      
                          ; Finally, if D <= 0 we can exit the copy process.
                          ; Actually, we could just check for D = 0 but I am not
                          ; sure that the algorithm is corrected.
                      
346F  2B1D                    BMI DUFFDEVICEDONE
3471  271B                    BEQ DUFFDEVICEDONE
                      
                          ; We can reach this point in two different moments: 
                          ; on the first run of the loop, or the n-th one.
                          ; If this is the first time we reach this label,
                          ; the BRA DUFFDEVICEL1 has been replaced by NOP NOP:
                          ; this means that the execution will continue to the
                          ; following istructions. Otherwise, this will move
                          ; to the next round.
                      
3473                  DUFFDEVICEL0C
3473  20D1                    BRA DUFFDEVICEL1
                      
                          ; If we reached this line, we have copied the very
                          ; first block, that could be smaller than 16 bytes.
                          ; At this point, we must replace the block size 
                          ; with the standard block size (16 bytes)
                          ; This is done by automodification technique.
                              
3475  3406                    PSHS D
                      
                          ; Replace the displacement for each loop.
                      
3477  C610                    LDB #16
3479  F73468                  STB DUFFDEVICEL0A+2
347C  F7346B                  STB DUFFDEVICEL0B+2
                      
                          ; Replace the decrement for each loop.
                      
347F  C608                    LDB #8
3481  F7346E                  STB DUFFDEVICEL0D+2
                      
                          ; Replace the NOPs with a jump to the first
                          ; instruction of the unrolled loop.
                      
3484  CC20D1                  LDD #$20D1
3487  FD3473                  STD DUFFDEVICEL0C
                      
348A  3506                    PULS D
                      
                          ; Finally, jump to the first instruction
                          ; of the unrolled loop.
                      
348C  20B8                    BRA DUFFDEVICEL1
                      
348E                  DUFFDEVICEDONE
348E  39                      RTS
                      
348F                  DUFFDELTA
348F  00                      FCB $0
3490                  duff_after
                              IF (((128+cpu_mem_move_after-(*+2))|(127-cpu_mem_move_after+(*+2)))&0x8000)
                              JMP cpu_mem_move_after
                              ELSE
3490  2000                    BRA cpu_mem_move_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ; CPUMEMMOVE
                      ;     CMPU #0
                      ;     BEQ CPUMEMMOVEDONE
                      ; CPUMEMMOVEL1
                      ;     LDA ,Y+
                      ;     STA ,X+
                      ;     LEAU -1,U
                      ;     CMPU #$0
                      ;     BNE CPUMEMMOVEL1
                      ; CPUMEMMOVEDONE
                      ;     RTS
3492                  cpu_mem_move_after
3492  CC0133                  LDD #$0133
3495  108E4F4D                LDY #_Timg17
3499  8E4E19                  LDX #_keyimage
349C  BD3401                  JSR DUFFDEVICE
                              ; P:93
                              ; L:18
                              ; P:0
                              ; L:19
                              ; P:0
                              ; L:20
349F                  _label18
349F  FCE028                  LDD _finished
34A2  43                      COMA
34A3  53                      COMB
34A4  FDE02C                  STD _Ttmp19
                      ; peephole(1): r489 (STD,LDB+1)->()
                      ;       LDB _Ttmp19+1
34A7  F7E008                  STB _Ttmp2
34AA  F6E008                  LDB _Ttmp2
                              IF (((128+_label18bis-(*+2))|(127-_label18bis+(*+2)))&0x8000)
34AD  10271966                LBEQ _label18bis
                              ELSE
                              BEQ _label18bis
                              ENDIF
                              ; P:13
                              ; L:21
34B1  4F                      CLRA
34B2  B7E008                  STA _Ttmp2
                      ; peephole(3): r756 [A=0](STA*,LDB*)->(CLRB)
                      ;       LDB _Ttmp2
34B5  5F                      CLRB
34B6  F7E001                  STB _PAPER
                              IF (((128+clsGraphic_after-(*+2))|(127-clsGraphic_after+(*+2)))&0x8000)
34B9  7E3549                  JMP clsGraphic_after
                              ELSE
                              BRA clsGraphic_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       CLEAR SCREEN ROUTINE FOR GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
34BC                  CLSG
34BC  B6311B                  LDA CURRENTTILEMODE
34BF  2701                    BEQ CLSGX
34C1  39                      RTS
34C2                  CLSGX
34C2  3476                    PSHS A,B,X,Y,U
                          ; The CLS command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
34C4  BD2DFD                  JSR GIMEBANKVIDEO
34C7  F6E001                  LDB _PAPER
34CA  BD2F6F                  JSR GIMESELECTPALETTE
34CD  B70045                  STA PLOTC
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
34D0  96F0                    LDA <CURRENTMODE
34D2  84E0                    ANDA #$E0
34D4  81E0                    CMPA #$E0
34D6  270B                    BEQ CLSGB16
34D8  8160                    CMPA #$60
34DA  2717                    BEQ CLSGB4
34DC  8140                    CMPA #$40
34DE  10270029                LBEQ CLSGB2
34E2  39                      RTS
34E3                  CLSGB16
34E3  B60045                  LDA PLOTC
34E6  48                      LSLA
34E7  48                      LSLA
34E8  48                      LSLA
34E9  48                      LSLA
34EA  BA0045                  ORA PLOTC
34ED  B70045                  STA PLOTC
34F0  7E3530                  JMP CLSGGO
34F3                  CLSGB4
34F3  B60045                  LDA PLOTC
34F6  48                      LSLA
34F7  48                      LSLA
34F8  BA0045                  ORA PLOTC
34FB  48                      LSLA
34FC  48                      LSLA
34FD  BA0045                  ORA PLOTC
3500  48                      LSLA
3501  48                      LSLA
3502  BA0045                  ORA PLOTC
3505  B70045                  STA PLOTC
3508  7E3530                  JMP CLSGGO
350B                  CLSGB2
350B  B60045                  LDA PLOTC
350E  48                      LSLA
350F  BA0045                  ORA PLOTC
3512  48                      LSLA
3513  BA0045                  ORA PLOTC
3516  48                      LSLA
3517  BA0045                  ORA PLOTC
351A  48                      LSLA
351B  BA0045                  ORA PLOTC
351E  48                      LSLA
351F  BA0045                  ORA PLOTC
3522  48                      LSLA
3523  BA0045                  ORA PLOTC
3526  48                      LSLA
3527  BA0045                  ORA PLOTC
352A  B70045                  STA PLOTC
352D  7E3530                  JMP CLSGGO
3530                  CLSGGO
                      ; peephole(9): inlined1
                      ;       LDU CURRENTFRAMESIZE
3530  CE0200                  LDU #32*16
3531                  CURRENTFRAMESIZE equ *-2
3533  BE2C0C                  LDX BITMAPADDRESS
3536  B60045                  LDA PLOTC
3539                  CLSGX0
3539  A780                    STA ,X+
353B  335F                    LEAU -1,U 
353D  11830000                CMPU #0
3541  26F6                    BNE CLSGX0
                          ; The CLS command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
3543  BD2E0B                  JSR GIMEBANKROM
3546  3576                    PULS A,B,X,Y,U
3548  39                      RTS
3549                  clsGraphic_after
3549  BD34BC                  JSR CLSG
                              ; P:82
                              ; L:22
354C  C60F                    LDB #$0f
354E  F7E008                  STB _Ttmp2
3551  F6E008                  LDB _Ttmp2
3554  F7E000                  STB _PEN
                              ; P:4
                              ; L:23
3557  C650                    LDB #$50
3559  F7E008                  STB _Ttmp2
355C  CC0000                  LDD #$0000
355F  FDE030                  STD _Ttmp20
3562  F6E008                  LDB _Ttmp2
3565  F7E031                  STB _Ttmp20+1
3568  FCE030                  LDD _Ttmp20
356B  FDE00F                  STD _Ttmp6
356E  C610                    LDB #$10
3570  F7E033                  STB _Ttmp22
3573  CC0000                  LDD #$0000
3576  FDE03A                  STD _Ttmp24
3579  F6E033                  LDB _Ttmp22
357C  F7E03B                  STB _Ttmp24+1
357F  FCE03A                  LDD _Ttmp24
3582  FDE036                  STD _Ttmp23
                              IF (((128+putimage_after-(*+2))|(127-putimage_after+(*+2)))&0x8000)
3585  7E3801                  JMP putimage_after
                              ELSE
                              BRA putimage_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          IMAGES ROUTINE FOR GIME                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; ----------------------------------------------------------------------------
                      ; - Put image on bitmap
                      ; ----------------------------------------------------------------------------
3588                  PUTIMAGE
                          ; We must do nothing if we are in text mode!
3588  B6311B                  LDA CURRENTTILEMODE
358B  2701                    BEQ PUTIMAGEGO
358D  39                      RTS
358E                  PUTIMAGEGO
                          ; Convert PLOTX, PLOTY into the first byte of video RAM.
358E  FC0041                  LDD IMAGEX
3591  FD0041                  STD PLOTX
3594  FC0043                  LDD IMAGEY
3597  FD0043                  STD PLOTY
359A  BD2F92                  JSR GIMECALCPOSBM
                          ; Based on bpp, we 
359D  F62D67                  LDB PALETTELIMIT
35A0  C102                    CMPB #2
35A2  2709                    BEQ PUTIMAGEGOS3
35A4  C104                    CMPB #4
35A6  2710                    BEQ PUTIMAGEGOS2
35A8  C110                    CMPB #16
35AA  2715                    BEQ PUTIMAGEGOS1
35AC  39                      RTS
                          ; Load the width from the header, and calculate
                          ; the size of the writing in bytes.
35AD                  PUTIMAGEGOS3
35AD  ECA4                    LDD ,Y 
35AF  44                      LSRA
35B0  56                      RORB
35B1  44                      LSRA
35B2  56                      RORB
35B3  44                      LSRA
35B4  56                      RORB
35B5  7E35C8                  JMP PUTIMAGEGOSX
35B8                  PUTIMAGEGOS2
35B8  ECA4                    LDD ,Y 
35BA  44                      LSRA
35BB  56                      RORB
35BC  44                      LSRA
35BD  56                      RORB
35BE  7E35C8                  JMP PUTIMAGEGOSX
35C1                  PUTIMAGEGOS1
35C1  ECA4                    LDD ,Y 
35C3  44                      LSRA
35C4  56                      RORB
35C5  7E35C8                  JMP PUTIMAGEGOSX
35C8                  PUTIMAGEGOSX
35C8  FD0045                  STD IMAGEW
35CB  A622                    LDA 2,Y 
35CD  B70047                  STA IMAGEH
                              
35D0  3123                    LEAY 3,Y
                          ; The PUT IMAGE primitive must have control if it is necessary to bank 
                          ; in the RAM and, if necessary, to differentiate the drawing logic.
35D2  3406                    PSHS D
35D4  B60045                  LDA IMAGEW
35D7  F60047                  LDB IMAGEH
35DA  3D                      MUL
35DB  1F03                    TFR D,U 
35DD  3506                    PULS D
35DF  BD2DB9                  JSR GIMEBANKISNEEDED
35E2  8100                    CMPA #0
35E4  10270115                LBEQ PUTIMAGEGOSXNOBANK
                          ; This is the banked logic.
35E8  FE0045                  LDU IMAGEW
35EB                  PUTIMAGEL1
35EB  B60050                  LDA IMAGEF
35EE  8420                    ANDA #32
35F0  8100                    CMPA #0 
35F2  277F                    BEQ PUTIMAGEDEF
35F4  B62D67                  LDA PALETTELIMIT
35F7  8102                    CMPA #2
35F9  2778                    BEQ PUTIMAGEL1T2
35FB  8104                    CMPA #4
35FD  2721                    BEQ PUTIMAGEL1T4
35FF                  PUTIMAGEL1T16
35FF  BD2E0B                  JSR GIMEBANKROM
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3602  4F                      CLRA
3603  9719                    STA <MATHPTR5
3605  A6A4                    LDA ,Y 
3607  84F0                    ANDA #$F0
3609  2706                    BEQ PUTIMAGEL1T16P16A
360B  9619                    LDA <MATHPTR5
360D  8AF0                    ORA #$F0
360F  9719                    STA <MATHPTR5
3611                  PUTIMAGEL1T16P16A
3611  A6A4                    LDA ,Y
3613  840F                    ANDA #$0F
3615  2706                    BEQ PUTIMAGEL1T16P16B
3617  9619                    LDA <MATHPTR5
3619  8A0F                    ORA #$0F
361B  9719                    STA <MATHPTR5
361D                  PUTIMAGEL1T16P16B
361D  7E3659                  JMP PUTIMAGEL1TFINAL
3620                  PUTIMAGEL1T4
3620  BD2E0B                  JSR GIMEBANKROM
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3623  4F                      CLRA
3624  9719                    STA <MATHPTR5
3626  A6A4                    LDA ,Y 
3628  84C0                    ANDA #$C0
362A  2706                    BEQ PUTIMAGEL1T4P4A
362C  9619                    LDA <MATHPTR5
362E  8AC0                    ORA #$C0
3630  9719                    STA <MATHPTR5
3632                  PUTIMAGEL1T4P4A
3632  A6A4                    LDA ,Y 
3634  8430                    ANDA #$30
3636  2706                    BEQ PUTIMAGEL1T4P4B
3638  9619                    LDA <MATHPTR5
363A  8A30                    ORA #$30
363C  9719                    STA <MATHPTR5
363E                  PUTIMAGEL1T4P4B
363E  A6A4                    LDA ,Y 
3640  840C                    ANDA #$0C
3642  2706                    BEQ PUTIMAGEL1T4P4C
3644  9619                    LDA <MATHPTR5
3646  8A0C                    ORA #$0C
3648  9719                    STA <MATHPTR5
364A                  PUTIMAGEL1T4P4C
364A  A6A4                    LDA ,Y 
364C  8403                    ANDA #$03
364E  2706                    BEQ PUTIMAGEL1T4P4D
3650  9619                    LDA <MATHPTR5
3652  8A03                    ORA #$03
3654  9719                    STA <MATHPTR5
3656                  PUTIMAGEL1T4P4D
3656  7E3659                  JMP PUTIMAGEL1TFINAL
3659                  PUTIMAGEL1TFINAL
3659  BD2DFD                  JSR GIMEBANKVIDEO
365C  9619                    LDA <MATHPTR5
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORA #$FF
365E  43                      COMA
365F  9720                    STA <MATHPTR6
3661  A684                    LDA ,X 
3663  9420                    ANDA <MATHPTR6
3665  9720                    STA <MATHPTR6
3667  BD2E0B                  JSR GIMEBANKROM
366A  A6A0                    LDA ,Y +
366C  9419                    ANDA <MATHPTR5
366E  9A20                    ORA <MATHPTR6
3670  7E3678                  JMP PUTIMAGEDEFFINAL
3673                  PUTIMAGEL1T2
3673                  PUTIMAGEDEF
3673  BD2E0B                  JSR GIMEBANKROM
3676  A6A0                    LDA ,Y +
3678                  PUTIMAGEDEFFINAL    
3678  BD2DFD                  JSR GIMEBANKVIDEO
367B  A780                    STA ,X +
367D  335F                    LEAU -1,U 
367F  11830000                CMPU #0
3683  1026FF64                LBNE PUTIMAGEL1
                              
3687  B60050                  LDA IMAGEF
368A  8440                    ANDA #64
368C  8100                    CMPA #0
368E  272D                    BEQ PUTIMAGEL1N
3690  B60050                  LDA IMAGEF
3693  8401                    ANDA #1
3695  8101                    CMPA #1
3697  271C                    BEQ PUTIMAGEL1N0
3699  8A41                    ORA #65
369B  B70050                  STA IMAGEF
369E  FC0045                  LDD IMAGEW
36A1  40                      NEGA
36A2  50                      NEGB
36A3  8200                    SBCA #0
36A5  31AB                    LEAY D,Y 
36A7  4F                      CLRA
                      ; peephole(9): inlined1
                      ;       LDB CURRENTSL
36A8  C620                    LDB #32
36A9                  CURRENTSL equ *-1
36AA  B30045                  SUBD IMAGEW
36AD  308B                    LEAX D,X 
                              
36AF  FE0045                  LDU IMAGEW
36B2  7E35EB                  JMP PUTIMAGEL1
36B5                  PUTIMAGEL1N0
36B5  B60050                  LDA IMAGEF
36B8  84FE                    ANDA #$FE
36BA  B70050                  STA IMAGEF
36BD                  PUTIMAGEL1N
36BD  4F                      CLRA
36BE  F636A9                  LDB CURRENTSL
36C1  B30045                  SUBD IMAGEW
36C4  308B                    LEAX D,X 
36C6  FC0043                  LDD IMAGEY
36C9  C30001                  ADDD #1
36CC  FD0043                  STD IMAGEY
36CF  10B330EA                CMPD CURRENTHEIGHT
36D3  2C0E                    BGE PUTIMAGECOMMONESKIP
36D5  7A0047                  DEC IMAGEH
36D8  F60047                  LDB IMAGEH
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPB #0
36DB  2710                    BEQ PUTIMAGECOMMONE
36DD  FE0045                  LDU IMAGEW
36E0  7E35EB                  JMP PUTIMAGEL1
36E3                  PUTIMAGECOMMONESKIP
36E3  FC0045                  LDD IMAGEW
36E6                  PUTIMAGECOMMONESKIPL1    
36E6  31AB                    LEAY D,Y 
36E8  7A0047                  DEC IMAGEH
36EB  26F9                    BNE PUTIMAGECOMMONESKIPL1
36ED                  PUTIMAGECOMMONE
36ED  BD2E0B                  JSR GIMEBANKROM
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
36F0  4F                      CLRA
36F1                  PUTIMAGECOMMONEL1
36F1  E6A0                    LDB ,Y +
36F3  BD2F28                  JSR GIMEUPDATEPALETTE
36F6  4C                      INCA
36F7  B12D67                  CMPA PALETTELIMIT
36FA  26F5                    BNE PUTIMAGECOMMONEL1
36FC  39                      RTS
                          ; This is the "not banked" logic.
36FD                  PUTIMAGEGOSXNOBANK
36FD  BD2DFD                  JSR GIMEBANKVIDEO
3700  FE0045                  LDU IMAGEW
3703                  PUTIMAGEL1NOBANK
3703  B60050                  LDA IMAGEF
3706  8420                    ANDA #32
3708  8100                    CMPA #0 
370A  2773                    BEQ PUTIMAGEDEFNOBANK
370C  B62D67                  LDA PALETTELIMIT
370F  8102                    CMPA #2
3711  276C                    BEQ PUTIMAGEL1T2NOBANK
3713  8104                    CMPA #4
3715  271E                    BEQ PUTIMAGEL1T4NOBANK
3717                  PUTIMAGEL1T16NOBANK
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3717  4F                      CLRA
3718  9719                    STA <MATHPTR5
371A  A6A4                    LDA ,Y 
371C  84F0                    ANDA #$F0
371E  2706                    BEQ PUTIMAGEL1T16P16ANOBANK
3720  9619                    LDA <MATHPTR5
3722  8AF0                    ORA #$F0
3724  9719                    STA <MATHPTR5
3726                  PUTIMAGEL1T16P16ANOBANK
3726  A6A4                    LDA ,Y
3728  840F                    ANDA #$0F
372A  2706                    BEQ PUTIMAGEL1T16P16BNOBANK
372C  9619                    LDA <MATHPTR5
372E  8A0F                    ORA #$0F
3730  9719                    STA <MATHPTR5
3732                  PUTIMAGEL1T16P16BNOBANK
3732  7E376B                  JMP PUTIMAGEL1TFINALNOBANK
3735                  PUTIMAGEL1T4NOBANK
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3735  4F                      CLRA
3736  9719                    STA <MATHPTR5
3738  A6A4                    LDA ,Y 
373A  84C0                    ANDA #$C0
373C  2706                    BEQ PUTIMAGEL1T4P4ANOBANK
373E  9619                    LDA <MATHPTR5
3740  8AC0                    ORA #$C0
3742  9719                    STA <MATHPTR5
3744                  PUTIMAGEL1T4P4ANOBANK
3744  A6A4                    LDA ,Y 
3746  8430                    ANDA #$30
3748  2706                    BEQ PUTIMAGEL1T4P4BNOBANK
374A  9619                    LDA <MATHPTR5
374C  8A30                    ORA #$30
374E  9719                    STA <MATHPTR5
3750                  PUTIMAGEL1T4P4BNOBANK
3750  A6A4                    LDA ,Y 
3752  840C                    ANDA #$0C
3754  2706                    BEQ PUTIMAGEL1T4P4CNOBANK
3756  9619                    LDA <MATHPTR5
3758  8A0C                    ORA #$0C
375A  9719                    STA <MATHPTR5
375C                  PUTIMAGEL1T4P4CNOBANK
375C  A6A4                    LDA ,Y 
375E  8403                    ANDA #$03
3760  2706                    BEQ PUTIMAGEL1T4P4DNOBANK
3762  9619                    LDA <MATHPTR5
3764  8A03                    ORA #$03
3766  9719                    STA <MATHPTR5
3768                  PUTIMAGEL1T4P4DNOBANK
3768  7E376B                  JMP PUTIMAGEL1TFINALNOBANK
376B                  PUTIMAGEL1TFINALNOBANK
376B  9619                    LDA <MATHPTR5
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORA #$FF
376D  43                      COMA
376E  9720                    STA <MATHPTR6
3770  A684                    LDA ,X 
3772  9420                    ANDA <MATHPTR6
3774  9720                    STA <MATHPTR6
3776  A6A0                    LDA ,Y +
3778  9419                    ANDA <MATHPTR5
377A  9A20                    ORA <MATHPTR6
377C  7E3781                  JMP PUTIMAGEDEFFINALNOBANK
377F                  PUTIMAGEL1T2NOBANK
377F                  PUTIMAGEDEFNOBANK
377F  A6A0                    LDA ,Y +
3781                  PUTIMAGEDEFFINALNOBANK    
3781  A780                    STA ,X +
3783  335F                    LEAU -1,U 
3785  11830000                CMPU #0
3789  1026FF76                LBNE PUTIMAGEL1NOBANK
                              
378D  B60050                  LDA IMAGEF
3790  8440                    ANDA #64
3792  8100                    CMPA #0
3794  272E                    BEQ PUTIMAGEL1NNOBANK
3796  B60050                  LDA IMAGEF
3799  8401                    ANDA #1
379B  8101                    CMPA #1
379D  271D                    BEQ PUTIMAGEL1N0NOBANK
379F  8A41                    ORA #65
37A1  B70050                  STA IMAGEF
37A4  FC0045                  LDD IMAGEW
37A7  40                      NEGA
37A8  50                      NEGB
37A9  8200                    SBCA #0
37AB  31AB                    LEAY D,Y 
37AD  4F                      CLRA
37AE  F636A9                  LDB CURRENTSL
37B1  B30045                  SUBD IMAGEW
37B4  308B                    LEAX D,X 
                              
37B6  FE0045                  LDU IMAGEW
37B9  7E3703                  JMP PUTIMAGEL1NOBANK
37BC                  PUTIMAGEL1N0NOBANK
37BC  B60050                  LDA IMAGEF
37BF  84FE                    ANDA #$FE
37C1  B70050                  STA IMAGEF
37C4                  PUTIMAGEL1NNOBANK
37C4  4F                      CLRA
37C5  F636A9                  LDB CURRENTSL
37C8  B30045                  SUBD IMAGEW
37CB  308B                    LEAX D,X 
37CD  FC0043                  LDD IMAGEY
37D0  C30001                  ADDD #1
37D3  10B330EA                CMPD CURRENTHEIGHT
37D7  270E                    BEQ PUTIMAGECOMMONESKIPNOBANK
37D9  7A0047                  DEC IMAGEH
37DC  F60047                  LDB IMAGEH
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPB #0
37DF  2710                    BEQ PUTIMAGECOMMONENOBANK
37E1  FE0045                  LDU IMAGEW
37E4  7E3703                  JMP PUTIMAGEL1NOBANK
37E7                  PUTIMAGECOMMONESKIPNOBANK
37E7  FC0045                  LDD IMAGEW
37EA                  PUTIMAGECOMMONESKIPL1NOBANK    
37EA  31AB                    LEAY D,Y 
37EC  7A0047                  DEC IMAGEH
37EF  26F9                    BNE PUTIMAGECOMMONESKIPL1NOBANK
37F1                  PUTIMAGECOMMONENOBANK
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
37F1  4F                      CLRA
37F2                  PUTIMAGECOMMONEL1NOBANK
37F2  E6A0                    LDB ,Y +
37F4  BD2F28                  JSR GIMEUPDATEPALETTE
37F7  4C                      INCA
37F8  B12D67                  CMPA PALETTELIMIT
37FB  26F5                    BNE PUTIMAGECOMMONEL1NOBANK
37FD  BD2E0B                  JSR GIMEBANKROM
3800  39                      RTS
3801                  putimage_after
3801  108E4E19                LDY #_keyimage
3805  FCE00F                  LDD _Ttmp6
3808  FD0041                  STD IMAGEX
380B  FCE036                  LDD _Ttmp23
380E  FD0043                  STD IMAGEY
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
3811  4F                      CLRA
3812  9750                    STA <IMAGEF
3814  8602                    LDA #$02
3816  9749                    STA <IMAGET
3818  BD3588                  JSR PUTIMAGE
381B  CC0000                  LDD #$0000
                      ; peephole(9): direct-page1
                      ;       STD XGR
381E  DDF1                    STD <XGR
3820  F6E008                  LDB _Ttmp2
                      ; peephole(9): direct-page1
                      ;       STB XGR+1
3823  D7F2                    STB <XGR+1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       CLRB
                      ; peephole(5): unread1
                      ;       STD YGR
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp22
                      ; peephole(5): unread1
                      ;       STB YGR+1
                              ; P:379
                              ; L:24
3825  C614                    LDB #$14
3827  F7E008                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
382A  5F                      CLRB
382B  FDE030                  STD _Ttmp20
382E  F6E008                  LDB _Ttmp2
3831  F7E031                  STB _Ttmp20+1
3834  FCE030                  LDD _Ttmp20
3837  FDE00F                  STD _Ttmp6
383A  C610                    LDB #$10
383C  F7E033                  STB _Ttmp22
383F  CC0000                  LDD #$0000
3842  FDE03A                  STD _Ttmp24
3845  F6E033                  LDB _Ttmp22
3848  F7E03B                  STB _Ttmp24+1
384B  FCE03A                  LDD _Ttmp24
384E  FDE036                  STD _Ttmp23
3851  108E4E19                LDY #_keyimage
3855  FCE00F                  LDD _Ttmp6
3858  FD0041                  STD IMAGEX
385B  FCE036                  LDD _Ttmp23
385E  FD0043                  STD IMAGEY
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
3861  4F                      CLRA
3862  9750                    STA <IMAGEF
3864  8602                    LDA #$02
3866  9749                    STA <IMAGET
3868  BD3588                  JSR PUTIMAGE
386B  CC0000                  LDD #$0000
                      ; peephole(9): direct-page1
                      ;       STD XGR
386E  DDF1                    STD <XGR
3870  F6E008                  LDB _Ttmp2
                      ; peephole(9): direct-page1
                      ;       STB XGR+1
3873  D7F2                    STB <XGR+1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       CLRB
                      ; peephole(5): unread1
                      ;       STD YGR
3875  F6E033                  LDB _Ttmp22
                      ; peephole(5): unread1
                      ;       STB YGR+1
                              ; P:34
                              ; L:25
                              ; P:0
                              ; L:26
3878  FCE022                  LDD _mid1
387B  FDE00F                  STD _Ttmp6
387E  4F                      CLRA
387F  B7E00B                  STA _Ttmp3
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3882  5F                      CLRB
3883  FDE036                  STD _Ttmp23
3886  F6E00B                  LDB _Ttmp3
3889  F7E037                  STB _Ttmp23+1
388C  FCE036                  LDD _Ttmp23
388F  FDE030                  STD _Ttmp20
3892  FCE022                  LDD _mid1
3895  FDE03A                  STD _Ttmp24
3898  C660                    LDB #$60
389A  F7E03F                  STB _Ttmp26
389D  CC0000                  LDD #$0000
38A0  FDE050                  STD _Ttmp43
38A3  F6E03F                  LDB _Ttmp26
38A6  F7E051                  STB _Ttmp43+1
38A9  FCE050                  LDD _Ttmp43
38AC  FDE04C                  STD _Ttmp42
                              IF (((128+draw_after-(*+2))|(127-draw_after+(*+2)))&0x8000)
38AF  7E3D34                  JMP draw_after
                              ELSE
                              BRA draw_after
                              ENDIF
38B2                  lib_draw
38B2  CC0000                  LDD #$0000
38B5  FDE05D                  STD _Ttmp45
38B8  B7E049                  STA _Ttmp34
38BB  C610                    LDB #$10
38BD  F7E047                  STB _Ttmp33
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
38C0  FCE052                  LDD _draw__x0
38C3  FDE065                  STD _Ttmp47
38C6  FCE054                  LDD _draw__y0
38C9  FDE069                  STD _Ttmp48
38CC  FCE056                  LDD _draw__x1
38CF  B3E052                  SUBD _draw__x0
38D2  FDE089                  STD _Ttmp57
38D5  FCE089                  LDD _Ttmp57
38D8  FDE06D                  STD _Ttmp49
38DB  FCE058                  LDD _draw__y1
38DE  B3E054                  SUBD _draw__y0
38E1  FDE08F                  STD _Ttmp59
38E4  FCE08F                  LDD _Ttmp59
38E7  FDE071                  STD _Ttmp50
38EA  5F                      CLRB
38EB  BEE071                  LDX _Ttmp50
38EE  BCE05D                  CMPX _Ttmp45
38F1  2C01                    BGE _label63
38F3  5A                      DECB
38F4                  _label63
38F4  F7E094                  STB _Ttmp62
38F7  F6E094                  LDB _Ttmp62
                              IF (((128+_label64e0-(*+2))|(127-_label64e0+(*+2)))&0x8000)
                              LBEQ _label64e0
                              ELSE
38FA  2717                    BEQ _label64e0
                              ENDIF
38FC                  _label64t
38FC  FCE05D                  LDD _Ttmp45
38FF  B3E071                  SUBD _Ttmp50
3902  FDE097                  STD _Ttmp65
3905  FCE097                  LDD _Ttmp65
3908  FDE071                  STD _Ttmp50
390B  CCFFFF                  LDD #$ffff
390E  FDE081                  STD _Ttmp54
                              IF (((128+_label64f-(*+2))|(127-_label64f+(*+2)))&0x8000)
                              JMP _label64f
                              ELSE
3911  200B                    BRA _label64f
                              ENDIF
3913                  _label64e0
3913  F6E094                  LDB _Ttmp62
                              IF (((128+_label64f-(*+2))|(127-_label64f+(*+2)))&0x8000)
                              LBNE _label64f
                              ELSE
3916  2606                    BNE _label64f
                              ENDIF
3918  CC0001                  LDD #$0001
391B  FDE081                  STD _Ttmp54
391E                  _label64f
391E                  _label64e1
391E  5F                      CLRB
391F  BEE06D                  LDX _Ttmp49
3922  BCE05D                  CMPX _Ttmp45
3925  2C01                    BGE _label69
3927  5A                      DECB
3928                  _label69
3928  F7E09C                  STB _Ttmp68
392B  F6E09C                  LDB _Ttmp68
                              IF (((128+_label70e0-(*+2))|(127-_label70e0+(*+2)))&0x8000)
                              LBEQ _label70e0
                              ELSE
392E  2717                    BEQ _label70e0
                              ENDIF
3930                  _label70t
3930  FCE05D                  LDD _Ttmp45
3933  B3E06D                  SUBD _Ttmp49
3936  FDE09F                  STD _Ttmp71
3939  FCE09F                  LDD _Ttmp71
393C  FDE06D                  STD _Ttmp49
393F  CCFFFF                  LDD #$ffff
3942  FDE07D                  STD _Ttmp53
                              IF (((128+_label70f-(*+2))|(127-_label70f+(*+2)))&0x8000)
                              JMP _label70f
                              ELSE
3945  200B                    BRA _label70f
                              ENDIF
3947                  _label70e0
3947  F6E09C                  LDB _Ttmp68
                              IF (((128+_label70f-(*+2))|(127-_label70f+(*+2)))&0x8000)
                              LBNE _label70f
                              ELSE
394A  2606                    BNE _label70f
                              ENDIF
394C  CC0001                  LDD #$0001
394F  FDE07D                  STD _Ttmp53
3952                  _label70f
3952                  _label70e1
3952  FCE071                  LDD _Ttmp50
3955  FDE079                  STD _Ttmp52
3958  FCE079                  LDD _Ttmp52
395B  FDE0A5                  STD _Ttmp73
395E  FCE0A5                  LDD _Ttmp73
3961  58                      LSLB
3962  49                      ROLA
3963  FDE0A5                  STD _Ttmp73
3966  FCE06D                  LDD _Ttmp49
3969  FDE075                  STD _Ttmp51
396C  FCE075                  LDD _Ttmp51
396F  FDE0A9                  STD _Ttmp74
3972  FCE0A9                  LDD _Ttmp74
3975  58                      LSLB
3976  49                      ROLA
3977  FDE0A9                  STD _Ttmp74
397A  CC0000                  LDD #$0000
397D  FDE0AF                  STD _Ttmp75
3980  FDE0B1                  STD _Ttmp75+2
3983  FC2D40                  LDD LINE
3986  FDE0B1                  STD _Ttmp75+2
3989  2008                    BRA _bit_check_extended_tab_after
398B                  bit_check_extended_tab
398B  0102040810204080         fcb 1,2,4,8,16,32,64,128
3993                  _bit_check_extended_tab_after
3993  B6E049                  LDA _Ttmp34
3996  F6E0B2                  LDB _Ttmp75+3
3999  8108                    CMPA #8
399B  2511                    BLO _label81eval
399D  F6E0B1                  LDB _Ttmp75+2
39A0  8110                    CMPA #16
39A2  250A                    BLO _label81eval
39A4  F6E0B0                  LDB _Ttmp75+1
39A7  8118                    CMPA #24
39A9  2503                    BLO _label81eval
39AB  F6E0AF                  LDB _Ttmp75
39AE                  _label81eval
39AE  8E398B                  LDX #bit_check_extended_tab
39B1  B6E049                  LDA _Ttmp34
39B4  8407                    ANDA #7
39B6  E486                    ANDB A,X
39B8  2702                    BEQ _label81end
39BA  C6FF                    LDB #$ff
39BC                  _label81end
39BC  F7E0B8                  STB _Ttmp79
39BF  F6E0B8                  LDB _Ttmp79
                              IF (((128+_label82e0-(*+2))|(127-_label82e0+(*+2)))&0x8000)
39C2  1027015A                LBEQ _label82e0
                              ELSE
                              BEQ _label82e0
                              ENDIF
39C6                  _label82t
39C6  F6E05A                  LDB _draw__c
39C9  F7E000                  STB _PEN
                              IF (((128+plot_after-(*+2))|(127-plot_after+(*+2)))&0x8000)
39CC  7E3B0C                  JMP plot_after
                              ELSE
                              BRA plot_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                            PLOT ROUTINE FOR GIME                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
0046                  PLOTM   EQU $46
                      ;--------------
39CF                  PLOT
39CF  B6311B                  LDA CURRENTTILEMODE
39D2  2701                    BEQ PLOTGO
39D4  39                      RTS
39D5                  PLOTGO
39D5  FC0043                  LDD PLOTY
                      ; peephole(9): inlined1
                      ;       CMPD CLIPY2
39D8  108300C7                CMPD #199
39DA                  CLIPY2 equ *-2
39DC  2F03                    BLE PLOTCLIP2
39DE  7E3AE0                  JMP PLOTP
39E1                  PLOTCLIP2
                      ; peephole(9): inlined1
                      ;       CMPD CLIPY1
39E1  10830000                CMPD #0
39E3                  CLIPY1 equ *-2
39E5  2C03                    BGE PLOTCLIP3
39E7  7E3AE0                  JMP PLOTP
39EA                  PLOTCLIP3
39EA  FC0041                  LDD PLOTX
                      ; peephole(9): inlined1
                      ;       CMPD CLIPX2
39ED  1083013F                CMPD #319
39EF                  CLIPX2 equ *-2
39F1  2F03                    BLE PLOTCLIP4
39F3  7E3AE0                  JMP PLOTP
39F6                  PLOTCLIP4
                      ; peephole(9): inlined1
                      ;       CMPD CLIPX1
39F6  10830000                CMPD #0
39F8                  CLIPX1 equ *-2
39FA  2C03                    BGE PLOTCLIP5
39FC  7E3AE0                  JMP PLOTP
39FF                  PLOTCLIP5
39FF                  PLOTMODE
                          ; The PLOT command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
39FF  BD2DFD                  JSR GIMEBANKVIDEO
3A02  F6E000                  LDB _PEN
3A05  BD2F6F                  JSR GIMESELECTPALETTE
3A08  B70045                  STA PLOTC
3A0B  BD2F92                  JSR GIMECALCPOSBM
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
3A0E  96F0                    LDA <CURRENTMODE
3A10  84E0                    ANDA #$E0
3A12  81E0                    CMPA #$E0
3A14  270E                    BEQ PLOTB16
3A16  8160                    CMPA #$60
3A18  272B                    BEQ PLOTB4
3A1A  8140                    CMPA #$40
3A1C  10270056                LBEQ PLOTB2
                          ; The PLOT command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
3A20  BD2E0B                  JSR GIMEBANKROM
3A23  39                      RTS
3A24                  PLOTB16
3A24  CE3B0A                  LDU #PLOTANDBIT8
3A27  FC0041                  LDD PLOTX
3A2A  C401                    ANDB #$1
3A2C  33C5                    LEAU B,U 
3A2E  C101                    CMPB #$1
3A30  270A                    BEQ PLOTB16SKIP
3A32  B60045                  LDA PLOTC
3A35  48                      LSLA
3A36  48                      LSLA
3A37  48                      LSLA
3A38  48                      LSLA
3A39  7E3A3F                  JMP PLOTB16SKIPE
3A3C                  PLOTB16SKIP
3A3C  B60045                  LDA PLOTC
3A3F                  PLOTB16SKIPE
3A3F  B70045                  STA PLOTC
3A42  7E3A98                  JMP PLOTCOMMON
3A45                  PLOTB4
3A45  FC0041                  LDD PLOTX
3A48  B60045                  LDA PLOTC
3A4B  48                      LSLA
3A4C  48                      LSLA
3A4D  48                      LSLA
3A4E  48                      LSLA
3A4F  48                      LSLA
3A50  48                      LSLA
3A51  C403                    ANDB #$03
3A53  2711                    BEQ PLOTB4SKIPE
3A55  44                      LSRA
3A56  44                      LSRA
3A57  5A                      DECB
3A58  270C                    BEQ PLOTB4SKIPE
3A5A  44                      LSRA
3A5B  44                      LSRA
3A5C  5A                      DECB
3A5D  2707                    BEQ PLOTB4SKIPE
3A5F  44                      LSRA
3A60  44                      LSRA
3A61  5A                      DECB
3A62  2702                    BEQ PLOTB4SKIPE
3A64  44                      LSRA
3A65  44                      LSRA
3A66                  PLOTB4SKIPE
3A66  B70045                  STA PLOTC
3A69  F60042                  LDB PLOTX+1
3A6C  C403                    ANDB #$03
3A6E  CE3B04                  LDU #PLOTANDBIT4
3A71  33C5                    LEAU B,U 
3A73  7E3A98                  JMP PLOTCOMMON
3A76                  PLOTB2
3A76  B60045                  LDA PLOTC
3A79  2711                    BEQ PLOTB2SKIPE
3A7B  108E3AE4                LDY #PLOTORBIT
3A7F  F60042                  LDB PLOTX+1
3A82  C407                    ANDB #$07
3A84  A6A5                    LDA B,Y 
3A86  B70045                  STA PLOTC
3A89  7E3A90                  JMP PLOTB2SFINAL
3A8C                  PLOTB2SKIPE
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3A8C  4F                      CLRA
3A8D  B70045                  STA PLOTC
                              
3A90                  PLOTB2SFINAL
3A90  CE3AEC                  LDU #PLOTANDBIT
3A93  33C5                    LEAU B,U 
3A95  7E3A98                  JMP PLOTCOMMON
3A98                  PLOTCOMMON
                          ;----------------------------------------------
                          ;depending on PLOTM, routine draws or erases
                          ;----------------------------------------------
3A98  B60046                  LDA PLOTM                  ;(0 = erase, 1 = set, 2 = get pixel, 3 = get color)
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
3A9B  271B                    BEQ PLOTE                  ;if = 0 then branch to clear the point
3A9D  8101                    CMPA #1
3A9F  270B                    BEQ PLOTD                  ;if = 1 then branch to draw the point
3AA1  8102                    CMPA #2
3AA3  271C                    BEQ PLOTG                  ;if = 2 then branch to get the point (0/1)
3AA5  8103                    CMPA #3
3AA7  272F                    BEQ PLOTCL                  ;if = 3 then branch to get the color index (0...15)
3AA9  7E3AE0                  JMP PLOTP
3AAC                  PLOTD
                          ;---------
                          ;set point
                          ;---------
3AAC  A684                    LDA ,X            ;get row with point in it
3AAE  A4C4                    ANDA ,U 
3AB0  BA0045                  ORA PLOTC
                          ; ORA , Y               ;isolate AND set the point
3AB3  A784                    STA ,X            ;write back to $A000
3AB5  7E3AE0                  JMP PLOTP                  ;skip the erase-point section
                          ;-----------
                          ;erase point
                          ;-----------
3AB8                  PLOTE                          ;handled same way as setting a point
3AB8  A684                    LDA ,X            ;get row with point in it
3ABA  A4C4                    ANDA ,U 
3ABC  A784                    STA ,X            ;write back to $A000
3ABE  7E3AE0                  JMP PLOTP                  ;skip the erase-point section
3AC1                  PLOTG      
3AC1  A684                    LDA ,X            ;get row with point in it
3AC3  A4C4                    ANDA ,U 
3AC5  8100                    CMPA #0
3AC7  2708                    BEQ PLOTG0
3AC9                  PLOTG1
3AC9  86FF                    LDA #$ff
3ACB  B70046                  STA PLOTM
3ACE  7E3AE0                  JMP PLOTP
3AD1                  PLOTG0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
3AD1  4F                      CLRA
3AD2  B70046                  STA PLOTM
3AD5  7E3AE0                  JMP PLOTP            
3AD8                  PLOTCL                          
3AD8  A684                    LDA ,X            ;get row with point in it
3ADA  B70046                  STA PLOTM
3ADD  7E3AE0                  JMP PLOTP
3AE0                  PLOTP
                          ; The PLOT command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
3AE0  BD2E0B                  JSR GIMEBANKROM
                              
3AE3  39                      RTS
3AE4                  PLOTORBIT
3AE4  80                      fcb %10000000
3AE5  40                      fcb %01000000
3AE6  20                      fcb %00100000
3AE7  10                      fcb %00010000
3AE8  08                      fcb %00001000
3AE9  04                      fcb %00000100
3AEA  02                      fcb %00000010
3AEB  01                      fcb %00000001
3AEC                  PLOTANDBIT
3AEC  7F                      fcb %01111111
3AED  BF                      fcb %10111111
3AEE  DF                      fcb %11011111
3AEF  EF                      fcb %11101111
3AF0  F7                      fcb %11110111
3AF1  FB                      fcb %11111011
3AF2  FD                      fcb %11111101
3AF3  FE                      fcb %11111110
3AF4                  PLOTORBIT40
3AF4  00                      fcb %00000000
3AF5  00                      fcb %00000000
3AF6  00                      fcb %00000000
3AF7  00                      fcb %00000000
3AF8                  PLOTORBIT41
3AF8  40                      fcb %01000000
3AF9  10                      fcb %00010000
3AFA  04                      fcb %00000100
3AFB  01                      fcb %00000001
3AFC                  PLOTORBIT42
3AFC  80                      fcb %10000000
3AFD  20                      fcb %00100000
3AFE  08                      fcb %00001000
3AFF  02                      fcb %00000010
3B00                  PLOTORBIT43
3B00  C0                      fcb %11000000
3B01  30                      fcb %00110000
3B02  0C                      fcb %00001100
3B03  03                      fcb %00000011
3B04                  PLOTANDBIT4
3B04  FC                      fcb %11111100
3B05  F3                      fcb %11110011
3B06  CF                      fcb %11001111
3B07  3F                      fcb %00111111
3B08                  PLOTORBIT8
3B08  F0                      fcb %11110000
3B09  0F                      fcb %00001111
3B0A                  PLOTANDBIT8
3B0A  0F                      fcb %00001111
3B0B  F0                      fcb %11110000
3B0C                  plot_after
3B0C  BEE065                  LDX _Ttmp47
3B0F  BF0041                  STX PLOTX
3B12  FCE069                  LDD _Ttmp48
3B15  FD0043                  STD PLOTY
3B18  8601                    LDA #1
3B1A  B70046                  STA PLOTM
3B1D  BD39CF                  JSR PLOT
3B20                  _label82f
3B20                  _label82e0
3B20  7CE049                  INC _Ttmp34
3B23  5F                      CLRB
3B24  B6E049                  LDA _Ttmp34
3B27  B1E047                  CMPA _Ttmp33
3B2A  2601                    BNE _label86
3B2C  5A                      DECB
3B2D                  _label86
3B2D  F7E0BC                  STB _Ttmp85
3B30  F6E0BC                  LDB _Ttmp85
                              IF (((128+_label87e0-(*+2))|(127-_label87e0+(*+2)))&0x8000)
                              LBEQ _label87e0
                              ELSE
3B33  2704                    BEQ _label87e0
                              ENDIF
3B35                  _label87t
3B35  4F                      CLRA
3B36  B7E049                  STA _Ttmp34
3B39                  _label87f
3B39                  _label87e0
3B39  5F                      CLRB
3B3A  BEE0A9                  LDX _Ttmp74
3B3D  BCE0A5                  CMPX _Ttmp73
3B40  2F01                    BLE _label90
3B42  5A                      DECB
3B43                  _label90
3B43  F7E0BE                  STB _Ttmp89
3B46  F6E0BE                  LDB _Ttmp89
                              IF (((128+_label91e0-(*+2))|(127-_label91e0+(*+2)))&0x8000)
3B49  102700F1                LBEQ _label91e0
                              ELSE
                              BEQ _label91e0
                              ENDIF
3B4D                  _label91t
3B4D  FCE0A5                  LDD _Ttmp73
3B50  B3E06D                  SUBD _Ttmp49
3B53  FDE0C1                  STD _Ttmp92
3B56  FCE0C1                  LDD _Ttmp92
3B59  FDE061                  STD _Ttmp46
3B5C                  _label94
3B5C  5F                      CLRB
3B5D  BEE065                  LDX _Ttmp47
3B60  BCE056                  CMPX _draw__x1
3B63  2601                    BNE _label97
3B65  5A                      DECB
3B66                  _label97
3B66  F7E0C6                  STB _Ttmp96
3B69  F6E0C6                  LDB _Ttmp96
3B6C  53                      COMB
3B6D  F7E0C8                  STB _Ttmp98
3B70  F6E0C8                  LDB _Ttmp98
                              IF (((128+_label94bis-(*+2))|(127-_label94bis+(*+2)))&0x8000)
3B73  102700C4                LBEQ _label94bis
                              ELSE
                              BEQ _label94bis
                              ENDIF
3B77  FCE07D                  LDD _Ttmp53
3B7A  F3E065                  ADDD _Ttmp47
3B7D  FDE01C                  STD _Ttmp12
3B80  FCE01C                  LDD _Ttmp12
3B83  FDE065                  STD _Ttmp47
3B86  5F                      CLRB
3B87  BEE061                  LDX _Ttmp46
3B8A  BCE05D                  CMPX _Ttmp45
3B8D  2D01                    BLT _label102
3B8F  5A                      DECB
3B90                  _label102
3B90  F7E0CC                  STB _Ttmp101
3B93  F6E0CC                  LDB _Ttmp101
                              IF (((128+_label103e0-(*+2))|(127-_label103e0+(*+2)))&0x8000)
                              LBEQ _label103e0
                              ELSE
3B96  271E                    BEQ _label103e0
                              ENDIF
3B98                  _label103t
3B98  FCE081                  LDD _Ttmp54
3B9B  F3E069                  ADDD _Ttmp48
3B9E  FDE020                  STD _Ttmp13
3BA1  FCE020                  LDD _Ttmp13
3BA4  FDE069                  STD _Ttmp48
3BA7  FCE061                  LDD _Ttmp46
3BAA  B3E0A9                  SUBD _Ttmp74
3BAD  FDE0D1                  STD _Ttmp105
3BB0  FCE0D1                  LDD _Ttmp105
3BB3  FDE061                  STD _Ttmp46
3BB6                  _label103f
3BB6                  _label103e0
3BB6  FCE0A5                  LDD _Ttmp73
3BB9  F3E061                  ADDD _Ttmp46
3BBC  FDE0D7                  STD _Ttmp107
3BBF  FCE0D7                  LDD _Ttmp107
3BC2  FDE061                  STD _Ttmp46
3BC5  CC0000                  LDD #$0000
3BC8  FDE0DF                  STD _Ttmp109
3BCB  FDE0E1                  STD _Ttmp109+2
3BCE  FC2D40                  LDD LINE
3BD1  FDE0E1                  STD _Ttmp109+2
3BD4  B6E049                  LDA _Ttmp34
3BD7  F6E0E2                  LDB _Ttmp109+3
3BDA  8108                    CMPA #8
3BDC  2511                    BLO _label115eval
3BDE  F6E0E1                  LDB _Ttmp109+2
3BE1  8110                    CMPA #16
3BE3  250A                    BLO _label115eval
3BE5  F6E0E0                  LDB _Ttmp109+1
3BE8  8118                    CMPA #24
3BEA  2503                    BLO _label115eval
3BEC  F6E0DF                  LDB _Ttmp109
3BEF                  _label115eval
3BEF  8E398B                  LDX #bit_check_extended_tab
3BF2  B6E049                  LDA _Ttmp34
3BF5  8407                    ANDA #7
3BF7  E486                    ANDB A,X
3BF9  2702                    BEQ _label115end
3BFB  C6FF                    LDB #$ff
3BFD                  _label115end
3BFD  F7E0E8                  STB _Ttmp113
3C00  F6E0E8                  LDB _Ttmp113
                              IF (((128+_label116e0-(*+2))|(127-_label116e0+(*+2)))&0x8000)
                              LBEQ _label116e0
                              ELSE
3C03  271A                    BEQ _label116e0
                              ENDIF
3C05                  _label116t
3C05  F6E05A                  LDB _draw__c
3C08  F7E000                  STB _PEN
3C0B  BEE065                  LDX _Ttmp47
3C0E  BF0041                  STX PLOTX
3C11  FCE069                  LDD _Ttmp48
3C14  FD0043                  STD PLOTY
3C17  8601                    LDA #1
3C19  B70046                  STA PLOTM
3C1C  BD39CF                  JSR PLOT
3C1F                  _label116f
3C1F                  _label116e0
3C1F  7CE049                  INC _Ttmp34
3C22  5F                      CLRB
3C23  B6E049                  LDA _Ttmp34
3C26  B1E047                  CMPA _Ttmp33
3C29  2601                    BNE _label120
3C2B  5A                      DECB
3C2C                  _label120
3C2C  F7E0EC                  STB _Ttmp119
3C2F  F6E0EC                  LDB _Ttmp119
                              IF (((128+_label121e0-(*+2))|(127-_label121e0+(*+2)))&0x8000)
                              LBEQ _label121e0
                              ELSE
3C32  2704                    BEQ _label121e0
                              ENDIF
3C34                  _label121t
3C34  4F                      CLRA
3C35  B7E049                  STA _Ttmp34
3C38                  _label121f
3C38                  _label121e0
                              IF (((128+_label94-(*+2))|(127-_label94+(*+2)))&0x8000)
3C38  7E3B5C                  JMP _label94
                              ELSE
                              BRA _label94
                              ENDIF
3C3B                  _label94bis
                              IF (((128+_label91f-(*+2))|(127-_label91f+(*+2)))&0x8000)
3C3B  7E3D33                  JMP _label91f
                              ELSE
                              BRA _label91f
                              ENDIF
3C3E                  _label91e0
3C3E  F6E0BE                  LDB _Ttmp89
                              IF (((128+_label91f-(*+2))|(127-_label91f+(*+2)))&0x8000)
3C41  102600EE                LBNE _label91f
                              ELSE
                              BNE _label91f
                              ENDIF
3C45  FCE0A9                  LDD _Ttmp74
3C48  B3E071                  SUBD _Ttmp50
3C4B  FDE0EF                  STD _Ttmp122
3C4E  FCE0EF                  LDD _Ttmp122
3C51  FDE061                  STD _Ttmp46
3C54                  _label124
3C54  5F                      CLRB
3C55  BEE069                  LDX _Ttmp48
3C58  BCE058                  CMPX _draw__y1
3C5B  2601                    BNE _label127
3C5D  5A                      DECB
3C5E                  _label127
3C5E  F7E0F4                  STB _Ttmp126
3C61  F6E0F4                  LDB _Ttmp126
3C64  53                      COMB
3C65  F7E0F6                  STB _Ttmp128
3C68  F6E0F6                  LDB _Ttmp128
                              IF (((128+_label124bis-(*+2))|(127-_label124bis+(*+2)))&0x8000)
3C6B  102700C4                LBEQ _label124bis
                              ELSE
                              BEQ _label124bis
                              ENDIF
3C6F  5F                      CLRB
3C70  BEE061                  LDX _Ttmp46
3C73  BCE05D                  CMPX _Ttmp45
3C76  2D01                    BLT _label131
3C78  5A                      DECB
3C79                  _label131
3C79  F7E0F8                  STB _Ttmp130
3C7C  F6E0F8                  LDB _Ttmp130
                              IF (((128+_label132e0-(*+2))|(127-_label132e0+(*+2)))&0x8000)
                              LBEQ _label132e0
                              ELSE
3C7F  271E                    BEQ _label132e0
                              ENDIF
3C81                  _label132t
3C81  FCE07D                  LDD _Ttmp53
3C84  F3E065                  ADDD _Ttmp47
3C87  FDE0FB                  STD _Ttmp133
3C8A  FCE0FB                  LDD _Ttmp133
3C8D  FDE065                  STD _Ttmp47
3C90  FCE061                  LDD _Ttmp46
3C93  B3E0A5                  SUBD _Ttmp73
3C96  FDE101                  STD _Ttmp135
3C99  FCE101                  LDD _Ttmp135
3C9C  FDE061                  STD _Ttmp46
3C9F                  _label132f
3C9F                  _label132e0
3C9F  FCE081                  LDD _Ttmp54
3CA2  F3E069                  ADDD _Ttmp48
3CA5  FDE107                  STD _Ttmp137
3CA8  FCE107                  LDD _Ttmp137
3CAB  FDE069                  STD _Ttmp48
3CAE  FCE0A9                  LDD _Ttmp74
3CB1  F3E061                  ADDD _Ttmp46
3CB4  FDE10D                  STD _Ttmp139
3CB7  FCE10D                  LDD _Ttmp139
3CBA  FDE061                  STD _Ttmp46
3CBD  CC0000                  LDD #$0000
3CC0  FDE115                  STD _Ttmp141
3CC3  FDE117                  STD _Ttmp141+2
3CC6  FC2D40                  LDD LINE
3CC9  FDE117                  STD _Ttmp141+2
3CCC  B6E049                  LDA _Ttmp34
3CCF  F6E118                  LDB _Ttmp141+3
3CD2  8108                    CMPA #8
3CD4  2511                    BLO _label147eval
3CD6  F6E117                  LDB _Ttmp141+2
3CD9  8110                    CMPA #16
3CDB  250A                    BLO _label147eval
3CDD  F6E116                  LDB _Ttmp141+1
3CE0  8118                    CMPA #24
3CE2  2503                    BLO _label147eval
3CE4  F6E115                  LDB _Ttmp141
3CE7                  _label147eval
3CE7  8E398B                  LDX #bit_check_extended_tab
3CEA  B6E049                  LDA _Ttmp34
3CED  8407                    ANDA #7
3CEF  E486                    ANDB A,X
3CF1  2702                    BEQ _label147end
3CF3  C6FF                    LDB #$ff
3CF5                  _label147end
3CF5  F7E11E                  STB _Ttmp145
3CF8  F6E11E                  LDB _Ttmp145
                              IF (((128+_label148e0-(*+2))|(127-_label148e0+(*+2)))&0x8000)
                              LBEQ _label148e0
                              ELSE
3CFB  271A                    BEQ _label148e0
                              ENDIF
3CFD                  _label148t
3CFD  F6E05A                  LDB _draw__c
3D00  F7E000                  STB _PEN
3D03  BEE065                  LDX _Ttmp47
3D06  BF0041                  STX PLOTX
3D09  FCE069                  LDD _Ttmp48
3D0C  FD0043                  STD PLOTY
3D0F  8601                    LDA #1
3D11  B70046                  STA PLOTM
3D14  BD39CF                  JSR PLOT
3D17                  _label148f
3D17                  _label148e0
3D17  7CE049                  INC _Ttmp34
3D1A  5F                      CLRB
3D1B  B6E049                  LDA _Ttmp34
3D1E  B1E047                  CMPA _Ttmp33
3D21  2601                    BNE _label152
3D23  5A                      DECB
3D24                  _label152
3D24  F7E122                  STB _Ttmp151
3D27  F6E122                  LDB _Ttmp151
                              IF (((128+_label153e0-(*+2))|(127-_label153e0+(*+2)))&0x8000)
                              LBEQ _label153e0
                              ELSE
3D2A  2704                    BEQ _label153e0
                              ENDIF
3D2C                  _label153t
3D2C  4F                      CLRA
3D2D  B7E049                  STA _Ttmp34
3D30                  _label153f
3D30                  _label153e0
                              IF (((128+_label124-(*+2))|(127-_label124+(*+2)))&0x8000)
3D30  7E3C54                  JMP _label124
                              ELSE
                              BRA _label124
                              ENDIF
3D33                  _label124bis
3D33                  _label91f
3D33                  _label91e1
3D33  39                      RTS
3D34                  draw_after
3D34  FCE00F                  LDD _Ttmp6
3D37  FDE052                  STD _draw__x0
3D3A  FCE030                  LDD _Ttmp20
3D3D  FDE054                  STD _draw__y0
3D40  FCE03A                  LDD _Ttmp24
3D43  FDE056                  STD _draw__x1
3D46  FCE04C                  LDD _Ttmp42
3D49  FDE058                  STD _draw__y1
3D4C  F6E000                  LDB _PEN
3D4F  F7E05A                  STB _draw__c
                              IF (((128+lib_draw-(*+2))|(127-lib_draw+(*+2)))&0x8000)
3D52  BD38B2                  JSR lib_draw
                              ELSE
                              BSR lib_draw
                              ENDIF
3D55  FCE022                  LDD _mid1
                      ; peephole(9): direct-page1
                      ;       STD XGR
3D58  DDF1                    STD <XGR
3D5A  CC0000                  LDD #$0000
                      ; peephole(5): unread1
                      ;       STD YGR
3D5D  B7E008                  STA _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
3D60  F6E03F                  LDB _Ttmp26
                      ; peephole(5): unread1
                      ;       STB YGR+1
                              ; P:710
                              ; L:27
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3D63  5F                      CLRB
3D64  FDE030                  STD _Ttmp20
3D67  F6E008                  LDB _Ttmp2
3D6A  F7E031                  STB _Ttmp20+1
3D6D  FCE030                  LDD _Ttmp20
3D70  FDE00F                  STD _Ttmp6
3D73  C660                    LDB #$60
3D75  F7E033                  STB _Ttmp22
3D78  CC0000                  LDD #$0000
3D7B  FDE03A                  STD _Ttmp24
3D7E  F6E033                  LDB _Ttmp22
3D81  F7E03B                  STB _Ttmp24+1
3D84  FCE03A                  LDD _Ttmp24
3D87  FDE036                  STD _Ttmp23
3D8A  CC0140                  LDD #$0140
3D8D  FDE02C                  STD _Ttmp19
3D90  FCE02C                  LDD _Ttmp19
3D93  FDE04C                  STD _Ttmp42
3D96  F6E04C                  LDB _Ttmp42
3D99  C47F                    ANDB #$7f
3D9B  F7E04C                  STB _Ttmp42
3D9E  C660                    LDB #$60
3DA0  F7E045                  STB _Ttmp31
3DA3  CC0000                  LDD #$0000
3DA6  FDE05D                  STD _Ttmp45
3DA9  F6E045                  LDB _Ttmp31
3DAC  F7E05E                  STB _Ttmp45+1
3DAF  FCE05D                  LDD _Ttmp45
3DB2  FDE050                  STD _Ttmp43
3DB5  FCE00F                  LDD _Ttmp6
3DB8  FDE052                  STD _draw__x0
3DBB  FCE036                  LDD _Ttmp23
3DBE  FDE054                  STD _draw__y0
3DC1  FCE04C                  LDD _Ttmp42
3DC4  FDE056                  STD _draw__x1
3DC7  FCE050                  LDD _Ttmp43
3DCA  FDE058                  STD _draw__y1
3DCD  F6E000                  LDB _PEN
3DD0  F7E05A                  STB _draw__c
                              IF (((128+lib_draw-(*+2))|(127-lib_draw+(*+2)))&0x8000)
3DD3  BD38B2                  JSR lib_draw
                              ELSE
                              BSR lib_draw
                              ENDIF
3DD6  FCE02C                  LDD _Ttmp19
                      ; peephole(9): direct-page1
                      ;       STD XGR
3DD9  DDF1                    STD <XGR
                      ; peephole(9): direct-page1
                      ;       LDB XGR
3DDB  D6F1                    LDB <XGR
3DDD  C47F                    ANDB #$7f
                      ; peephole(9): direct-page1
                      ;       STB XGR
3DDF  D7F1                    STB <XGR
3DE1  CC0000                  LDD #$0000
                      ; peephole(5): unread1
                      ;       STD YGR
3DE4  B7E008                  STA _Ttmp2
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp31
                      ; peephole(5): unread1
                      ;       STB YGR+1
                              ; P:55
                              ; L:28
                              ; P:0
                              ; L:29
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
3DE7  F6E009                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
3DEA  C47F                    ANDB #$7f
3DEC  F700D3                  STB XCURSYS
3DEF  F6E008                  LDB _Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
3DF2  C47F                    ANDB #$7f
3DF4  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:30
3DF7  F650EA                  LDB _Tstr167
3DFA  F7E008                  STB _Ttmp2
3DFD  CC50EA                  LDD #_Tstr167
3E00  FDE135                  STD _Ttmp170
3E03  7CE136                  INC _Ttmp170+1
3E06  2603                    BNE _label171
3E08  7CE135                  INC _Ttmp170
3E0B                  _label171
                              IF (((128+textEncodedAt_after-(*+2))|(127-textEncodedAt_after+(*+2)))&0x8000)
                              JMP textEncodedAt_after
                              ELSE
3E0B  2000                    BRA textEncodedAt_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      TEXT AT GIVEN POSITION ON GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
0001                  TEXTPTR equ $01
0003                  TEXTSIZE equ $03
0004                  TABSTODRAW equ $04
0008                  SCREENCODE equ $08
                      
3E0D                  textEncodedAt_after
3E0D  10BEE135                LDY _Ttmp170
3E11  10BF0001                STY TEXTPTR
3E15  B6E008                  LDA _Ttmp2
3E18  B70003                  STA TEXTSIZE
                              IF (((128+textEncodedAtGraphic_after-(*+2))|(127-textEncodedAtGraphic_after+(*+2)))&0x8000)
3E1B  7E40E5                  JMP textEncodedAtGraphic_after
                              ELSE
                              BRA textEncodedAtGraphic_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      TEXT AT GIVEN POSITION ON GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
3E1E                  TEXTATBMDRAWCHAR
3E1E  3477                    PSHS D,X , Y, U, CC
                      
                          ; The PRINT primitive should have control if it is necessary to bank 
                          ; in the RAM and, if necessary, to differentiate the drawing logic.
                          ; However, since the font is probably in the screen segment,
                          ; there is no reason to differentiate.
                      
3E20  C608                    LDB #$08
3E22  3D                      MUL
3E23  C350F8                  ADDD #UDCCHAR
3E26  1F02                    TFR D,Y 
                      
3E28  B600D6                  LDA YCURSYS
3E2B  C608                    LDB #8
3E2D  3D                      MUL
3E2E  FD0043                  STD PLOTY
                      
3E31  B600D3                  LDA XCURSYS
3E34  C608                    LDB #8
3E36  3D                      MUL
3E37  FD0041                  STD PLOTX
                      
3E3A  BD2F92                  JSR GIMECALCPOSBM
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
3E3D  96F0                    LDA <CURRENTMODE
3E3F  84E0                    ANDA #$E0
3E41  81E0                    CMPA #$E0
3E43  270F                    BEQ TEXTATBMDRAWCHARB16
3E45  8160                    CMPA #$60
3E47  102700B6                LBEQ TEXTATBMDRAWCHARB4
3E4B  8140                    CMPA #$40
3E4D  10270111                LBEQ TEXTATBMDRAWCHARB2
                      
3E51  3577                    PULS D,X , Y, U, CC
3E53  39                      RTS
                      
3E54                  TEXTATBMDRAWCHARB16
3E54  B6313D                  LDA CURRENTTILESWIDTH
3E57  C602                    LDB #2
3E59  3D                      MUL
                      
3E5A  CE0008                  LDU #8
3E5D                  TEXTATBMDRAWCHARB16L1
3E5D  BD2E0B                  JSR GIMEBANKROM
3E60  A6A0                    LDA ,Y +
3E62  BD2DFD                  JSR GIMEBANKVIDEO
                      
3E65  3003                    LEAX 3,X 
                      
3E67  3446                    PSHS U, D
3E69  CE0002                  LDU #2
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3E6C  5F                      CLRB
3E6D  E784                    STB ,X 
3E6F  F60045                  LDB PLOTC
3E72                  TEXTATBMDRAWCHARB16L1A
3E72  44                      LSRA
3E73  2404                    BCC TEXTATBMDRAWCHARB16L1A0
3E75  EA84                    ORB ,X 
3E77  E784                    STB ,X 
3E79                  TEXTATBMDRAWCHARB16L1A0
3E79  58                      LSLB
3E7A  58                      LSLB
3E7B  58                      LSLB
3E7C  58                      LSLB
3E7D  335F                    LEAU -1,U 
3E7F  11830000                CMPU #0
3E83  26ED                    BNE TEXTATBMDRAWCHARB16L1A
3E85  3540                    PULS U
                      
3E87  301F                    LEAX -1,X 
                      
3E89  3440                    PSHS U
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3E8B  5F                      CLRB
3E8C  E784                    STB ,X 
3E8E  F60045                  LDB PLOTC
3E91  CE0002                  LDU #2
3E94                  TEXTATBMDRAWCHARB16L1B
3E94  44                      LSRA
3E95  2404                    BCC TEXTATBMDRAWCHARB16L1B0
3E97  EA84                    ORB ,X 
3E99  E784                    STB ,X 
3E9B                  TEXTATBMDRAWCHARB16L1B0
3E9B  58                      LSLB
3E9C  58                      LSLB
3E9D  58                      LSLB
3E9E  58                      LSLB
3E9F  335F                    LEAU -1,U 
3EA1  11830000                CMPU #0
3EA5  26ED                    BNE TEXTATBMDRAWCHARB16L1B
3EA7  3540                    PULS U
                      
3EA9  301F                    LEAX -1,X 
                      
3EAB  3440                    PSHS U
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3EAD  5F                      CLRB
3EAE  E784                    STB ,X 
3EB0  F60045                  LDB PLOTC
3EB3  CE0002                  LDU #2
3EB6                  TEXTATBMDRAWCHARB16L1C
3EB6  44                      LSRA
3EB7  2404                    BCC TEXTATBMDRAWCHARB16L1C0
3EB9  EA84                    ORB ,X 
3EBB  E784                    STB ,X 
3EBD                  TEXTATBMDRAWCHARB16L1C0
3EBD  58                      LSLB
3EBE  58                      LSLB
3EBF  58                      LSLB
3EC0  58                      LSLB
3EC1  335F                    LEAU -1,U 
3EC3  11830000                CMPU #0
3EC7  26ED                    BNE TEXTATBMDRAWCHARB16L1C
3EC9  3540                    PULS U
                      
3ECB  301F                    LEAX -1,X 
                      
3ECD  3440                    PSHS U
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3ECF  5F                      CLRB
3ED0  E784                    STB ,X 
3ED2  F60045                  LDB PLOTC
3ED5  CE0002                  LDU #2
3ED8                  TEXTATBMDRAWCHARB16L1D
3ED8  44                      LSRA
3ED9  2404                    BCC TEXTATBMDRAWCHARB16L1D0
3EDB  EA84                    ORB ,X 
3EDD  E784                    STB ,X 
3EDF                  TEXTATBMDRAWCHARB16L1D0
3EDF  58                      LSLB
3EE0  58                      LSLB
3EE1  58                      LSLB
3EE2  58                      LSLB
3EE3  335F                    LEAU -1,U 
3EE5  11830000                CMPU #0
3EE9  26ED                    BNE TEXTATBMDRAWCHARB16L1D
3EEB  3546                    PULS D,U 
                      
3EED  3085                    LEAX B,X 
3EEF  3085                    LEAX B,X 
3EF1  335F                    LEAU -1,U 
3EF3  11830000                CMPU #0
3EF7  1026FF62                LBNE TEXTATBMDRAWCHARB16L1
                      
3EFB  BD2E0B                  JSR GIMEBANKROM
                      
3EFE  3577                    PULS D,X , Y, U, CC
3F00  39                      RTS
                      
3F01                  TEXTATBMDRAWCHARB4
3F01  B6313D                  LDA CURRENTTILESWIDTH
3F04  C602                    LDB #2
3F06  3D                      MUL
                      
3F07  CE0008                  LDU #8
3F0A                  TEXTATBMDRAWCHARB4L1
3F0A  BD2E0B                  JSR GIMEBANKROM
3F0D  A6A0                    LDA ,Y +
3F0F  BD2DFD                  JSR GIMEBANKVIDEO
                      
3F12  3001                    LEAX 1,X 
                      
3F14  3446                    PSHS U, D
3F16  CE0004                  LDU #4
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3F19  5F                      CLRB
3F1A  E784                    STB ,X 
3F1C  F60045                  LDB PLOTC
3F1F                  TEXTATBMDRAWCHARB4L2
3F1F  44                      LSRA
3F20  2404                    BCC TEXTATBMDRAWCHARB4L10
3F22  EA84                    ORB ,X 
3F24  E784                    STB ,X 
3F26                  TEXTATBMDRAWCHARB4L10    
3F26  58                      LSLB
3F27  58                      LSLB
3F28  335F                    LEAU -1,U 
3F2A  11830000                CMPU #0
3F2E  26EF                    BNE TEXTATBMDRAWCHARB4L2
3F30  3540                    PULS U
                      
3F32  301F                    LEAX -1,X 
                      
3F34  3440                    PSHS U
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3F36  5F                      CLRB
3F37  E784                    STB ,X 
3F39  F60045                  LDB PLOTC
3F3C  CE0004                  LDU #4
3F3F                  TEXTATBMDRAWCHARB4L2B
3F3F  44                      LSRA
3F40  2404                    BCC TEXTATBMDRAWCHARB4L10C
3F42  EA84                    ORB ,X 
3F44  E784                    STB ,X 
3F46                  TEXTATBMDRAWCHARB4L10C
3F46  58                      LSLB
3F47  58                      LSLB
3F48  335F                    LEAU -1,U 
3F4A  11830000                CMPU #0
3F4E  26EF                    BNE TEXTATBMDRAWCHARB4L2B
3F50  3546                    PULS D,U 
                      
3F52  3085                    LEAX B,X 
3F54  335F                    LEAU -1,U 
3F56  11830000                CMPU #0
3F5A  26AE                    BNE TEXTATBMDRAWCHARB4L1
                      
3F5C  BD2E0B                  JSR GIMEBANKROM
                      
3F5F  3577                    PULS D,X , Y, U, CC
3F61  39                      RTS
                      
3F62                  TEXTATBMDRAWCHARB2
3F62  B6313D                  LDA CURRENTTILESWIDTH
3F65  C601                    LDB #1
3F67  3D                      MUL
                      
3F68  CE0008                  LDU #8
3F6B                  TEXTATBMDRAWCHARB2L1
3F6B  BD2E0B                  JSR GIMEBANKROM
3F6E  A6A0                    LDA ,Y +
3F70  BD2DFD                  JSR GIMEBANKVIDEO
3F73  A784                    STA ,X 
3F75  335F                    LEAU -1,U 
3F77  3085                    LEAX B,X 
3F79  11830000                CMPU #0
3F7D  26EC                    BNE TEXTATBMDRAWCHARB2L1
                      
3F7F  BD2E0B                  JSR GIMEBANKROM
                      
3F82  3577                    PULS D,X , Y, U, CC
3F84  39                      RTS
                      
                          ; This small routine will print a string on the screen, when
                          ; in bitmap mode. This routine will try to avoid to do anything
                          ; if in text mode and / or the string is empty.
                      
3F85                  TEXTATBITMAPMODE
                      
3F85  F6E000                  LDB _PEN
3F88  BD2F6F                  JSR GIMESELECTPALETTE
3F8B  B70045                  STA PLOTC
                      
                          ; Avoid to do anything if we are in text mode.
3F8E  B6311B                  LDA CURRENTTILEMODE
3F91  2701                    BEQ TEXTATBMMODEGO
3F93  39                      RTS
                      
3F94                  TEXTATBMMODEGO
                      
                          ; Avoid to do anything if there is no text to print.
3F94  B60003                  LDA TEXTSIZE
3F97  2601                    BNE TEXTATBMGO
3F99  39                      RTS
                      
                          ; The routine starts here!
                      
3F9A                  TEXTATBMGO
                      
                          ; Prepare the color
                      
                          ; Load the starting address of the video ram
                          ; in a specific location, as a copy. This makes
                          ; possible to calculate the exact position where
                          ; to write, based on the actual cursor position.
                      
                          ; Initialize the counter for printing tabs.
                      
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3F9A  4F                      CLRA
3F9B  B70004                  STA TABSTODRAW
                      
                          ; Load in Y register the starting address of the
                          ; string to print on the video RAM.
                      
3F9E  10BE0001                LDY TEXTPTR
                      
                          ; Load in B the size of the string.
                      
3FA2  F60003                  LDB TEXTSIZE
                      
                          ; When program reach this point, we are going to
                          ; print the next character.
                      
3FA5                  TEXTATBMLOOP2
                      
                          ; If there are TABs to print, we have to skip the printing.
                      
3FA5  B60004                  LDA TABSTODRAW
3FA8  102600F2                LBNE TEXTATBMSKIPTAB
                      
                          ; Load the character from the string and move it into the
                          ; A register, offseted by Y. Move ahead of one character and
                          ; decrement the size of the string.
                      
3FAC  A6A0                    LDA ,Y+
3FAE  5A                      DECB
                      
                          ; All characters from 0 to 31 are special, so we mu9t
                          ; parse it, if needed. If the character is higher,
                          ; we can simply print it.
                      
3FAF  811F                    CMPA #31
3FB1  102200E3                LBHI TEXTATBMSP0
                      
                          ; Let's go to decode the special character.
                      
3FB5  7E3FD9                  JMP TEXTATBMCC
                      
                          ; This code will be executed if a TAB character is found
                          ; in the string. In that case, the character will be
                          ; translated in enough spaces until we reach the next
                          ; TAB marker on the screen.
                      
3FB8                  TEXTATBMTAB
                      
                          ; In order to calculate where to print the next character
                          ; after the TAB character, we start considering the
                          ; current X position. If the current position is greater
                          ; than the number of spaces equivalent to a TAB, we subtract
                          ; the number of spaces from the current X position, until
                          ; we reach that limit. The complement is the number of spaces
                          ; that will be printed out to reach the next TAB marker.
                      
                          ; Loop until X cursor position is greater than tab count.
                      
3FB8  B600D3                  LDA XCURSYS
3FBB                  TEXTATBMTAB2
3FBB  B12C11                  CMPA TABCOUNT
3FBE  2508                    BLO TEXTATBMTAB3
3FC0  1C01                    ANDCC #$01
3FC2  B02C11                  SUBA TABCOUNT
3FC5  7E3FBB                  JMP TEXTATBMTAB2
                      
                          ; Calculate the complement for tab count.
                      
3FC8                  TEXTATBMTAB3
3FC8  B70010                  STA TMPPTR
3FCB  B62C11                  LDA TABCOUNT
3FCE  1C01                    ANDCC #$01
3FD0  B00010                  SUBA TMPPTR
3FD3  B70004                  STA TABSTODRAW
                      
                          ; Move to the next character to print.
                      
3FD6  7E40C7                  JMP TEXTATBMNEXT
                      
                          ; This code will be executed if a special character
                          ; has to be decoded. 
                      
3FD9                  TEXTATBMCC
                      
                          ; CR -> move ahead and down like a line feed
3FD9  810D                    CMPA #13
3FDB  2729                    BEQ TEXTATBMLF
                      
                          ; LF -> move ahead and down like a line feed
3FDD  810A                    CMPA #10
3FDF  2725                    BEQ TEXTATBMLF
                      
                          ; TAB -> move to the next tab marker
3FE1  8109                    CMPA #09
3FE3  27D3                    BEQ TEXTATBMTAB
                      
                          ; PEN -> change the pen color
3FE5  8101                    CMPA #01    
3FE7  272A                    BEQ TEXTATBMPEN
                      
                          ; PAPER -> change the paper color
3FE9  8102                    CMPA #02
3FEB  2740                    BEQ TEXTATBMPAPER
                      
                          ; CMOVE -> move the cursor to a relative position
3FED  8103                    CMPA #03
3FEF  10270055                LBEQ TEXTATBMCMOVEPREPARE
                      
                          ; AT -> move the cursor to an absolute position
3FF3  8104                    CMPA #04
3FF5  10270086                LBEQ TEXTATBMAT
                      
                          ; CLS -> clear the screen
3FF9  8105                    CMPA #05
3FFB  2703                    BEQ TEXTATBMCLS
                      
                          ; Move to the next character to print.
                      
3FFD  7E40C7                  JMP TEXTATBMNEXT
                      
                          ; This routine will process a clear screen embedded command
                          ; into the string to print.
                      
4000                  TEXTATBMCLS
                      
4000  BD34BC                  JSR CLSG
                      
                          ; Move to the next character to print.
                      
4003  7E40C7                  JMP TEXTATBMNEXT
                      
                          ; This routine will process a LF command.
                      
4006                  TEXTATBMLF
                      
                          ; In order to move to the next line, I have to move ahead of
                          ; an entire line, and "come back" for a number of character
                          ; that is equal to the horizontal position. Move one character
                          ; back and update the address.
                      
4006  B6313D                  LDA CURRENTTILESWIDTH
4009  B000D3                  SUBA XCURSYS
400C  8001                    SUBA #1
400E  3086                    LEAX A,X
                      
                          ; Move to the routine that should scroll the video if we are
                          ; printing on the last line of the screen.
                      
4010  7E40B2                  JMP TEXTATBMNEXT2
                      
                          ; This routine will change the current pen color, used for
                          ; the following writing texts.
                      
4013                  TEXTATBMPEN
                      
                          ; We have to check if the current WRITING flags allows to
                          ; change the pen color.
                      
                      ; peephole(9): inlined1
                      ;       LDA TEXTWW
4013  8603                    LDA #3
4014                  TEXTWW equ *-1
4015  8402                    ANDA #$2
4017  270E                    BEQ TEXTATBMPENDISABLED
                      
                          ; Load the parameter from the next character.
4019  A6A0                    LDA ,Y +
401B  5A                      DECB
                      
                          ; A parameter of $FF means $00.
401C  81FF                    CMPA #$FF
401E  2601                    BNE TEXTATBMPEN2
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
4020  4F                      CLRA
4021                  TEXTATBMPEN2
4021  B7E000                  STA _PEN
                      
                          ; Move to the next character to print.
                      
4024  7E40C7                  JMP TEXTATBMNEXT
                      
                          ; Change pen color is disabled. So we can ignore the
                          ; parameter, and move ahead.
                      
4027                  TEXTATBMPENDISABLED
4027  3121                    LEAY 1,Y
4029  5A                      DECB
                      
                          ; Move to the next character to print.
                      
402A  7E40C7                  JMP TEXTATBMNEXT
                      
                          ; This routine will change the current paper color, used for
                          ; the following writing texts.
                      
402D                  TEXTATBMPAPER
                      
                          ; We have to check if the current WRITING flags allows to
                          ; change the paper color.
                      
402D  B64014                  LDA TEXTWW
4030  8401                    ANDA #$1
4032  270E                    BEQ TEXTATBMPAPERDISABLED
                      
                          ; Load the parameter from the next character.
4034  A6A0                    LDA ,Y +
4036  5A                      DECB
                      
                          ; Save the paper.
                          ; A parameter of $FF means $00.
4037  81FF                    CMPA #$FF
4039  2601                    BNE TEXTATBMPAPER2
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
403B  4F                      CLRA
403C                  TEXTATBMPAPER2
403C  B7E001                  STA _PAPER
                      
                          ; Move to the next character to print.
                      
403F  7E40C7                  JMP TEXTATBMNEXT
                      
                          ; Change paper color is disabled. So we can ignore the
                          ; parameter, and move ahead.
                      
4042                  TEXTATBMPAPERDISABLED
4042  3121                    LEAY 1,Y
4044  5A                      DECB
4045  7E40C7                  JMP TEXTATBMNEXT
                      
                          ; This routine will move the current cursor position on a relative
                          ; position.
                      
4048                  TEXTATBMCMOVEPREPARE
                      
                          ; Load and store the delta on abscissa.
                      
4048  A6A0                    LDA ,Y +
404A  5A                      DECB
404B  B7004B                  STA CLINEX
                      
                          ; Load and store the delta on ordinate.
                              
404E  A6A0                    LDA ,Y +
4050  5A                      DECB
4051  B7004C                  STA CLINEY
                      
                          ; This routine will move the current cursor position
                          ; on an absolute position.
                      
4054                  TEXTATBMCMOVE
                      
                          ; To calculate the absolute position we are going to
                          ; add the delta to the current horizontal position.
                      
4054  1CFE                    ANDCC #$FE
4056  B6004B                  LDA CLINEX
4059  BB00D3                  ADDA XCURSYS
                      
                          ; If the calculated horizontal position is negative,
                          ; we have nothing to do.
                      
405C  8100                    CMPA #$0
405E  2D08                    BLT TEXTATBMCMOVESKIPX
                      
                          ; If the calculated horizontal position is over
                          ; the lenght of the line, we have nothing to do.
                      
4060  B1313D                  CMPA CURRENTTILESWIDTH
4063  2C03                    BGE TEXTATBMCMOVESKIPX
                      
                          ; Store the new horizontal position.
                      
4065  B700D3                  STA XCURSYS
                      
                          ; Update the address by delta.
                      
4068                  TEXTATBMCMOVESKIPX
                      
                          ; To calculate the absolute position we are going to
                          ; add the delta to the current vertical position.
                      
4068  1CFE                    ANDCC #$FE
406A  B6004C                  LDA CLINEY
406D  BB00D6                  ADDA YCURSYS
                      
                          ; If the calculated vertical position is negative,
                          ; we have nothing to do.
                      
4070  8100                    CMPA #$0
4072  2D08                    BLT TEXTATBMCMOVESKIPY
                      
                          ; If the calculated vertical position is over
                          ; the lenght of the screen, we have nothing to do.
                      
4074  B1313F                  CMPA CURRENTTILESHEIGHT
4077  2C03                    BGE TEXTATBMCMOVESKIPY
                      
                          ; Store the new vertical position.
                      
4079  B700D6                  STA YCURSYS
                      
                          ; Update the address by delta.
                      
407C                  TEXTATBMCMOVESKIPY
                      
                          ; Move to the next character to print.
                      
407C  7E40C7                  JMP TEXTATBMNEXT
                      
                          ; This routine will prepare the delta to move the cursor
                          ; to an absolute position, to print.
                      
407F                  TEXTATBMAT
                      
                          ; The horizontal delta is calculated started from
                          ; the current position.
                      
407F  A6A0                    LDA ,Y +
4081  5A                      DECB
4082  1C01                    ANDCC #$01
4084  B000D3                  SUBA XCURSYS
4087  B7004B                  STA CLINEX
                      
                          ; The vertical delta is calculated started from
                          ; the current position.
                      
408A  A6A0                    LDA ,Y +
408C  5A                      DECB
408D  1C01                    ANDCC #$01
408F  B000D6                  SUBA YCURSYS
4092  B7004C                  STA CLINEY
                      
                          ; Change the position like a CMOVE.
                      
4095  7E4054                  JMP TEXTATBMCMOVE
                      
                          ; Print the character on the screen.
                      
4098                  TEXTATBMSP0
                      
4098  BD3E1E                  JSR TEXTATBMDRAWCHAR
                      
409B  7E40A4                  JMP TEXTATBMINCX
                      
                          ; If the program reach this point, it means that must skip
                          ; the character in order to move the cursor ahead by one
                          ; character, to move to the next tab marker.
                      
409E                  TEXTATBMSKIPTAB
409E  7A0004                  DEC TABSTODRAW
40A1  7E40A4                  JMP TEXTATBMINCX
                      
                          ; Go ahead by one character.
                      
40A4                  TEXTATBMINCX
                      
                          ; Increment the current horizontal position.
                      
40A4  7C00D3                  INC XCURSYS
                      
                          ; If the current horizontal position is at the end
                          ; of the line, we must increment the vertical position.
                      
40A7  B600D3                  LDA XCURSYS
40AA  B1313D                  CMPA CURRENTTILESWIDTH
40AD  2703                    BEQ TEXTATBMNEXT2
                      
                          ; Move to the next character to print.
                      
40AF  7E40C7                  JMP TEXTATBMNEXT
                      
40B2                  TEXTATBMNEXT2
                      
                          ; Put 0 as horizontal position.
                      
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
40B2  4F                      CLRA
40B3  B700D3                  STA XCURSYS
                      
                          ; Increment the vertical position.
                      
40B6  7C00D6                  INC YCURSYS
                      
                          ; If the current vertical position is at the end
                          ; of the screen, we must scroll the screen.
                      
40B9  B600D6                  LDA YCURSYS
40BC  B1313F                  CMPA CURRENTTILESHEIGHT
40BF  2703                    BEQ TEXTATBMNEXT3
                      
                          ; Move to the next character to print.
                      
40C1  7E40C7                  JMP TEXTATBMNEXT
                      
40C4                  TEXTATBMNEXT3
                      
                          ; Let's scroll vertically
                      
                          ; LDA #$FE
                          ; STA DIRECTION
                          ; JSR VSCROLLG
                      
                          ; Decrement the current vertical position, since
                          ; now the last line is not last anymore.
                      
40C4  7A00D6                  DEC YCURSYS
                      
                          ; Manage for the next character to print.
                      
40C7                  TEXTATBMNEXT
                      
                          ; If there are characters to skip to reach
                          ; tabs marker, move ahead and loop.
                      
40C7  B60004                  LDA TABSTODRAW
40CA  1026FED7                LBNE TEXTATBMLOOP2
                      
                          ; If there are still characters to print,
                          ; loop again.
                              
40CE  C100                    CMPB #0
40D0  1026FED1                LBNE TEXTATBMLOOP2
                              
40D4  39                      RTS
                      
40D5                  TEXTATFLIP
40D5  0008040C020A060E         fcb $0, $8, $4, $c, $2, $a, $6, $e
40DD  0109050D030B070F         fcb $1, $9, $5, $d, $3, $b, $7, $f
40E5                  textEncodedAtGraphic_after
40E5  BD3F85                  JSR TEXTATBITMAPMODE
                              ; P:391
                              ; L:31
40E8  C601                    LDB #$01
40EA  F7E008                  STB _Ttmp2
40ED  F6E009                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
40F0  C47F                    ANDB #$7f
40F2  F700D3                  STB XCURSYS
40F5  F6E008                  LDB _Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
40F8  C47F                    ANDB #$7f
40FA  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:32
40FD  F6E138                  LDB _Ttmp175
4100  BD3186                  JSR DSFREE
4103  108E50DE                LDY #_Tstr173
4107  BD3174                  JSR DSDEFINE
410A  F7E138                  STB _Ttmp175
410D  F6E13A                  LDB _Ttmp176
4110  BD3186                  JSR DSFREE
4113  108E50DE                LDY #_Tstr173
4117  BD3174                  JSR DSDEFINE
411A  F7E13A                  STB _Ttmp176
411D  F6E13A                  LDB _Ttmp176
4120  BD31DA                  JSR DSDESCRIPTOR
4123  EC01                    LDD 1,X 
4125  FDE135                  STD _Ttmp170
4128  A684                    LDA ,X 
412A  B7E019                  STA _Ttmp10
412D  F6E00C                  LDB _batt
4130  BD31DA                  JSR DSDESCRIPTOR
4133  EC01                    LDD 1,X 
4135  FDE13F                  STD _Ttmp178
4138  A684                    LDA ,X 
413A  B7E025                  STA _Ttmp14
413D  F6E019                  LDB _Ttmp10
4140  FBE025                  ADDB _Ttmp14
4143  F7E033                  STB _Ttmp22
4146  F6E13C                  LDB _Ttmp177
4149  BD3186                  JSR DSFREE
414C  B6E033                  LDA _Ttmp22
414F  BD323B                  JSR DSALLOC
4152  F7E13C                  STB _Ttmp177
4155  F6E13C                  LDB _Ttmp177
4158  BD31DA                  JSR DSDESCRIPTOR
415B  EC01                    LDD 1,X 
415D  FDE143                  STD _Ttmp179
4160  A684                    LDA ,X 
4162  B7E033                  STA _Ttmp22
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4165  4F                      CLRA
4166  F6E019                  LDB _Ttmp10
4169  10BEE135                LDY _Ttmp170
416D  BEE143                  LDX _Ttmp179
4170  BD3401                  JSR DUFFDEVICE
4173  BEE143                  LDX _Ttmp179
4176  F6E019                  LDB _Ttmp10
4179  3A                      ABX
417A  BFE143                  STX _Ttmp179
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
417D  4F                      CLRA
417E  F6E025                  LDB _Ttmp14
4181  10BEE13F                LDY _Ttmp178
4185  BEE143                  LDX _Ttmp179
4188  BD3401                  JSR DUFFDEVICE
418B  F6E13C                  LDB _Ttmp177
418E  BD31DA                  JSR DSDESCRIPTOR
4191  EC01                    LDD 1,X 
4193  FDE147                  STD _Ttmp181
4196  A684                    LDA ,X 
4198  B7E03D                  STA _Ttmp25
419B  10BEE147                LDY _Ttmp181
419F  10BF0001                STY TEXTPTR
41A3  B6E03D                  LDA _Ttmp25
41A6  B70003                  STA TEXTSIZE
41A9  BD3F85                  JSR TEXTATBITMAPMODE
41AC  4F                      CLRA
41AD  B700D3                  STA XCURSYS
41B0  7C00D6                  INC YCURSYS
41B3  F6313F                  LDB CURRENTTILESHEIGHT
41B6  F7E094                  STB _Ttmp62
41B9  F6E094                  LDB _Ttmp62
41BC  C47F                    ANDB #$7f
41BE  F7E094                  STB _Ttmp62
41C1  5F                      CLRB
41C2  B600D6                  LDA YCURSYS
41C5  B1E094                  CMPA _Ttmp62
41C8  2D01                    BLT _label185
41CA  5A                      DECB
41CB                  _label185
41CB  F7E09C                  STB _Ttmp68
41CE  F6E09C                  LDB _Ttmp68
                              IF (((128+_label183scroll-(*+2))|(127-_label183scroll+(*+2)))&0x8000)
                              LBNE _label183scroll
                              ELSE
41D1  2603                    BNE _label183scroll
                              ENDIF
                              IF (((128+_label183end-(*+2))|(127-_label183end+(*+2)))&0x8000)
41D3  7E42B6                  JMP _label183end
                              ELSE
                              BRA _label183end
                              ENDIF
41D6                  _label183scroll
                              IF (((128+vScrollText_after-(*+2))|(127-vScrollText_after+(*+2)))&0x8000)
41D6  7E42A5                  JMP vScrollText_after
                              ELSE
                              BRA vScrollText_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          VERTICAL SCROLL ON GIME                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
41D9                  VSCROLLT
41D9  B6311B                  LDA CURRENTTILEMODE
41DC  2601                    BNE VSCROLLTX
41DE  39                      RTS
41DF                  VSCROLLTX
41DF  3476                    PSHS A,B,X,Y,U
                          ; The VSCROLL command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
41E1  BD2DFD                  JSR GIMEBANKVIDEO
41E4  F6E000                  LDB _PEN
41E7  BD2F59                  JSR GIMESELECTPALETTEPEN
41EA  48                      LSLA
41EB  48                      LSLA
41EC  48                      LSLA
41ED  B70045                  STA PLOTC
41F0  F6E001                  LDB _PAPER
41F3  BD2F64                  JSR GIMESELECTPALETTEPAPER
41F6  BA0045                  ORA PLOTC
41F9  B70045                  STA PLOTC
41FC  B6004A                  LDA DIRECTION
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
41FF  2E4C                    BGT VSCROLLTDOWN
4201                  VSCROLLTUP
4201  B6313D                  LDA CURRENTTILESWIDTH
4204  BE3146                  LDX TEXTADDRESS
4207  10BE3146                LDY TEXTADDRESS
420B  31A6                    LEAY A,Y 
420D  31A6                    LEAY A,Y 
420F  B6313D                  LDA CURRENTTILESWIDTH
4212  F6313F                  LDB CURRENTTILESHEIGHT
4215  3D                      MUL
4216  58                      LSLB
4217  49                      ROLA
4218  1F03                    TFR D,U 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
421A  4F                      CLRA
421B  F6313D                  LDB CURRENTTILESWIDTH
421E  40                      NEGA
421F  50                      NEGB
4220  8200                    SBCA #0
4222  33CB                    LEAU D,U 
4224  33CB                    LEAU D,U 
4226                  VSCROLLTUPYSCR1
4226  A6A0                    LDA ,Y+
4228  A780                    STA ,X+
422A  335F                    LEAU -1,U 
422C  11830000                CMPU #0
4230  26F4                    BNE VSCROLLTUPYSCR1
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4232  4F                      CLRA
4233  F6313D                  LDB CURRENTTILESWIDTH
4236  1F03                    TFR D,U 
4238  B62C12                  LDA EMPTYTILE
423B  F60045                  LDB PLOTC
423E                  VSCROLLTUPYSCR2
423E  ED84                    STD ,X
4240  3002                    LEAX 2,X
4242  335F                    LEAU -1,U 
4244  11830000                CMPU #0
4248  26F4                    BNE VSCROLLTUPYSCR2
424A  7E429F                  JMP VSCROLLTE
424D                  VSCROLLTDOWN
424D  B6313D                  LDA CURRENTTILESWIDTH
4250  F6313F                  LDB CURRENTTILESHEIGHT
4253  3D                      MUL
4254  58                      LSLB
4255  49                      ROLA
4256  1F03                    TFR D,U 
4258  BE3146                  LDX TEXTADDRESS
425B  10BE3146                LDY TEXTADDRESS
425F  31AB                    LEAY D,Y 
4261  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4263  4F                      CLRA
4264  F6313D                  LDB CURRENTTILESWIDTH
4267  58                      LSLB
4268  49                      ROLA
4269  40                      NEGA
426A  50                      NEGB
426B  8200                    SBCA #0
426D  31AB                    LEAY D,Y 
426F  C30002                  ADDD #2
4272  33CB                    LEAU D,U 
4274                  VSCROLLTDOWNSCR1
4274  ECA4                    LDD ,Y
4276  ED84                    STD ,X
4278  301E                    LEAX -2,X 
427A  313E                    LEAY -2,Y 
427C  335E                    LEAU -2,U 
427E  11830000                CMPU #0
4282  26F0                    BNE VSCROLLTDOWNSCR1
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4284  4F                      CLRA
4285  F6313D                  LDB CURRENTTILESWIDTH
4288  1F03                    TFR D,U 
428A  B62C12                  LDA EMPTYTILE
428D  F60045                  LDB PLOTC
4290                  VSCROLLTDOWNSCR2
4290  EDA4                    STD ,Y 
4292  3122                    LEAY 2,Y 
4294  335F                    LEAU -1,U 
4296  11830000                CMPU #0
429A  26F4                    BNE VSCROLLTDOWNSCR2
429C  7E429F                  JMP VSCROLLTE
429F                  VSCROLLTE
                          ; The VSCROLL command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
429F  BD2E0B                  JSR GIMEBANKROM
42A2  3576                    PULS A,B,X,Y,U
42A4  39                      RTS
42A5                  vScrollText_after
42A5  86FF                    LDA #$ff
42A7  B7004A                  STA DIRECTION
42AA  BD41D9                  JSR VSCROLLT
42AD  F6313F                  LDB CURRENTTILESHEIGHT
42B0  F700D6                  STB YCURSYS
42B3  7A00D6                  DEC YCURSYS
42B6                  _label183end
                              ; P:203
                              ; L:33
42B6  C602                    LDB #$02
42B8  F7E008                  STB _Ttmp2
42BB  F6E009                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
42BE  C47F                    ANDB #$7f
42C0  F700D3                  STB XCURSYS
42C3  F6E008                  LDB _Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
42C6  C47F                    ANDB #$7f
42C8  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:34
                              ; P:0
                              ; L:35
42CB  C620                    LDB #$20
42CD  F7E016                  STB _Ttmp9
42D0  F6E016                  LDB _Ttmp9
42D3  F7E000                  STB _PEN
                              ; P:4
                              ; L:36
                              ; P:0
                              ; L:37
42D6  F6E14A                  LDB _Ttmp190
42D9  BD3186                  JSR DSFREE
42DC  108E50D2                LDY #_Tstr186
42E0  BD3174                  JSR DSDEFINE
42E3  F7E14A                  STB _Ttmp190
42E6  F6E14C                  LDB _Ttmp191
42E9  BD3186                  JSR DSFREE
42EC  108E50CE                LDY #_Tstr188
42F0  BD3174                  JSR DSDEFINE
42F3  F7E14C                  STB _Ttmp191
42F6  F6E14E                  LDB _Ttmp192
42F9  BD3186                  JSR DSFREE
42FC  108E50D2                LDY #_Tstr186
4300  BD3174                  JSR DSDEFINE
4303  F7E14E                  STB _Ttmp192
4306  F6E150                  LDB _Ttmp193
4309  BD3186                  JSR DSFREE
430C  108E50CE                LDY #_Tstr188
4310  BD3174                  JSR DSDEFINE
4313  F7E150                  STB _Ttmp193
4316  F6E14E                  LDB _Ttmp192
4319  BD31DA                  JSR DSDESCRIPTOR
431C  EC01                    LDD 1,X 
431E  FDE135                  STD _Ttmp170
4321  A684                    LDA ,X 
4323  B7E033                  STA _Ttmp22
4326  F6E150                  LDB _Ttmp193
4329  BD31DA                  JSR DSDESCRIPTOR
432C  EC01                    LDD 1,X 
432E  FDE13F                  STD _Ttmp178
4331  A684                    LDA ,X 
4333  B7E03D                  STA _Ttmp25
4336  F6E033                  LDB _Ttmp22
4339  FBE03D                  ADDB _Ttmp25
433C  F7E03F                  STB _Ttmp26
433F  F6E152                  LDB _Ttmp194
4342  BD3186                  JSR DSFREE
4345  B6E03F                  LDA _Ttmp26
4348  BD323B                  JSR DSALLOC
434B  F7E152                  STB _Ttmp194
434E  F6E152                  LDB _Ttmp194
4351  BD31DA                  JSR DSDESCRIPTOR
4354  EC01                    LDD 1,X 
4356  FDE143                  STD _Ttmp179
4359  A684                    LDA ,X 
435B  B7E03F                  STA _Ttmp26
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
435E  4F                      CLRA
435F  F6E033                  LDB _Ttmp22
4362  10BEE135                LDY _Ttmp170
4366  BEE143                  LDX _Ttmp179
4369  BD3401                  JSR DUFFDEVICE
436C  BEE143                  LDX _Ttmp179
436F  F6E033                  LDB _Ttmp22
4372  3A                      ABX
4373  BFE143                  STX _Ttmp179
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4376  4F                      CLRA
4377  F6E03D                  LDB _Ttmp25
437A  10BEE13F                LDY _Ttmp178
437E  BEE143                  LDX _Ttmp179
4381  BD3401                  JSR DUFFDEVICE
4384  F6E152                  LDB _Ttmp194
4387  BD31DA                  JSR DSDESCRIPTOR
438A  EC01                    LDD 1,X 
438C  FDE147                  STD _Ttmp181
438F  A684                    LDA ,X 
4391  B7E041                  STA _Ttmp28
4394  10BEE147                LDY _Ttmp181
4398  10BF0001                STY TEXTPTR
439C  B6E041                  LDA _Ttmp28
439F  B70003                  STA TEXTSIZE
43A2  BD3F85                  JSR TEXTATBITMAPMODE
43A5  4F                      CLRA
43A6  B700D3                  STA XCURSYS
43A9  7C00D6                  INC YCURSYS
43AC  F6313F                  LDB CURRENTTILESHEIGHT
43AF  F7E094                  STB _Ttmp62
43B2  F6E094                  LDB _Ttmp62
43B5  C47F                    ANDB #$7f
43B7  F7E094                  STB _Ttmp62
43BA  5F                      CLRB
43BB  B600D6                  LDA YCURSYS
43BE  B1E094                  CMPA _Ttmp62
43C1  2D01                    BLT _label199
43C3  5A                      DECB
43C4                  _label199
43C4  F7E09C                  STB _Ttmp68
43C7  F6E09C                  LDB _Ttmp68
                              IF (((128+_label197scroll-(*+2))|(127-_label197scroll+(*+2)))&0x8000)
                              LBNE _label197scroll
                              ELSE
43CA  2602                    BNE _label197scroll
                              ENDIF
                              IF (((128+_label197end-(*+2))|(127-_label197end+(*+2)))&0x8000)
                              JMP _label197end
                              ELSE
43CC  2011                    BRA _label197end
                              ENDIF
43CE                  _label197scroll
43CE  86FF                    LDA #$ff
43D0  B7004A                  STA DIRECTION
43D3  BD41D9                  JSR VSCROLLT
43D6  F6313F                  LDB CURRENTTILESHEIGHT
43D9  F700D6                  STB YCURSYS
43DC  7A00D6                  DEC YCURSYS
43DF                  _label197end
                              ; P:105
                              ; L:38
43DF  C610                    LDB #$10
43E1  F7E008                  STB _Ttmp2
43E4  F6E008                  LDB _Ttmp2
43E7  F7E000                  STB _PEN
                              ; P:4
                              ; L:39
43EA  4F                      CLRA
43EB  B7E008                  STA _Ttmp2
43EE  C60D                    LDB #$0d
43F0  F7E00B                  STB _Ttmp3
43F3  F6E008                  LDB _Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
43F6  C47F                    ANDB #$7f
43F8  F700D3                  STB XCURSYS
43FB  F6E00B                  LDB _Ttmp3
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
43FE  C47F                    ANDB #$7f
4400  F700D6                  STB YCURSYS
                              ; P:14
                              ; L:40
4403  F650BE                  LDB _Tstr200
4406  F7E008                  STB _Ttmp2
4409  CC50BE                  LDD #_Tstr200
440C  FDE135                  STD _Ttmp170
440F  7CE136                  INC _Ttmp170+1
4412  2603                    BNE _label203
4414  7CE135                  INC _Ttmp170
4417                  _label203
4417  10BEE135                LDY _Ttmp170
441B  10BF0001                STY TEXTPTR
441F  B6E008                  LDA _Ttmp2
4422  B70003                  STA TEXTSIZE
4425  BD3F85                  JSR TEXTATBITMAPMODE
                              ; P:13
                              ; L:41
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$0d
4428  CC000D                  LDD #$000d
442B  B7E008                  STA _Ttmp2
442E  B7E033                  STA _Ttmp22
4431  F7E157                  STB _Ttmp207
                      ;       CLRA
4434  C608                    LDB #$08
4436  F7E15F                  STB _Ttmp211
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$20
                      ; peephole(2): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0020
4439  C620                    LDB #$20
443B  F7E15B                  STB _Ttmp209
                      ;       CLRA
443E  C62C                    LDB #$2c
4440  F7E159                  STB _Ttmp208
4443  C620                    LDB #$20
4445  F7E019                  STB _Ttmp10
4448  C68F                    LDB #$8f
444A  F7E15D                  STB _Ttmp210
444D  C68F                    LDB #$8f
444F  F7E00B                  STB _Ttmp3
4452  C601                    LDB #$01
4454  F72C13                  STB KBDRATE
4457  F6E155                  LDB _Ttmp206
445A  BD3186                  JSR DSFREE
445D  B6E019                  LDA _Ttmp10
4460  BD323B                  JSR DSALLOC
4463  F7E155                  STB _Ttmp206
4466  F6E155                  LDB _Ttmp206
4469  BD31DA                  JSR DSDESCRIPTOR
446C  EC01                    LDD 1,X 
446E  FDE135                  STD _Ttmp170
4471  A684                    LDA ,X 
4473  B7E025                  STA _Ttmp14
4476                  _label205repeat
4476  7AE00B                  DEC _Ttmp3
4479  F6E00B                  LDB _Ttmp3
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;       CMPB #$00
                              IF (((128+_label205skipcc-(*+2))|(127-_label205skipcc+(*+2)))&0x8000)
                              LBNE _label205skipcc
                              ELSE
447C  263B                    BNE _label205skipcc
                              ENDIF
447E  F6E15D                  LDB _Ttmp210
4481  CB10                    ADDB #$10
4483  F7E15D                  STB _Ttmp210
4486  5F                      CLRB
4487  B6E15D                  LDA _Ttmp210
448A  818F                    CMPA #$008f
448C  2401                    BHS _label215
448E  5A                      DECB
448F                  _label215
448F  F7E094                  STB _Ttmp62
4492  F6E094                  LDB _Ttmp62
                              IF (((128+_label213g-(*+2))|(127-_label213g+(*+2)))&0x8000)
                              LBEQ _label213g
                              ELSE
4495  2707                    BEQ _label213g
                              ENDIF
4497  C6E0                    LDB #$e0
4499  F7E15D                  STB _Ttmp210
                              IF (((128+_label213e-(*+2))|(127-_label213e+(*+2)))&0x8000)
                              JMP _label213e
                              ELSE
449C  2016                    BRA _label213e
                              ENDIF
449E                  _label213g
449E  5F                      CLRB
449F  B6E15D                  LDA _Ttmp210
44A2  81E0                    CMPA #$00e0
44A4  2201                    BHI _label217
44A6  5A                      DECB
44A7                  _label217
44A7  F7E09C                  STB _Ttmp68
44AA  F6E09C                  LDB _Ttmp68
                              IF (((128+_label213e-(*+2))|(127-_label213e+(*+2)))&0x8000)
                              LBNE _label213e
                              ELSE
44AD  2605                    BNE _label213e
                              ENDIF
44AF  C68F                    LDB #$8f
44B1  F7E15D                  STB _Ttmp210
44B4                  _label213e
44B4  C680                    LDB #$80
44B6  F7E00B                  STB _Ttmp3
44B9                  _label205skipcc
44B9  CCE15D                  LDD #_Ttmp210
44BC  FDE13F                  STD _Ttmp178
44BF  C601                    LDB #$01
44C1  F7E03D                  STB _Ttmp25
44C4  10BEE13F                LDY _Ttmp178
44C8  10BF0001                STY TEXTPTR
44CC  B6E03D                  LDA _Ttmp25
44CF  B70003                  STA TEXTSIZE
44D2  BD3F85                  JSR TEXTATBITMAPMODE
44D5  4F                      CLRA
44D6  B7E03F                  STA _Ttmp26
44D9  C6FF                    LDB #$ffffffff
44DB  F7E0BC                  STB _Ttmp85
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp85
44DE  FB00D3                  ADDB XCURSYS
44E1  F700D3                  STB XCURSYS
44E4  F6E03F                  LDB _Ttmp26
44E7  F7E0BE                  STB _Ttmp89
44EA  F6E0BE                  LDB _Ttmp89
44ED  C47F                    ANDB #$7f
44EF  F7E0BE                  STB _Ttmp89
44F2  5F                      CLRB
44F3  B600D3                  LDA XCURSYS
44F6  B1E0BE                  CMPA _Ttmp89
44F9  2C01                    BGE _label222
44FB  5A                      DECB
44FC                  _label222
44FC  F7E0C6                  STB _Ttmp96
44FF  F6E0C6                  LDB _Ttmp96
                              IF (((128+_label220g-(*+2))|(127-_label220g+(*+2)))&0x8000)
                              LBEQ _label220g
                              ELSE
4502  270A                    BEQ _label220g
                              ENDIF
4504  F6313D                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4507  C47F                    ANDB #$7f
4509  F700D3                  STB XCURSYS
                              IF (((128+_label220e-(*+2))|(127-_label220e+(*+2)))&0x8000)
                              JMP _label220e
                              ELSE
450C  2028                    BRA _label220e
                              ENDIF
450E                  _label220g
450E  F6313D                  LDB CURRENTTILESWIDTH
4511  F7E0C8                  STB _Ttmp98
4514  F6E0C8                  LDB _Ttmp98
4517  C47F                    ANDB #$7f
4519  F7E0C8                  STB _Ttmp98
451C  5F                      CLRB
451D  B600D3                  LDA XCURSYS
4520  B1E0C8                  CMPA _Ttmp98
4523  2F01                    BLE _label224
4525  5A                      DECB
4526                  _label224
4526  F7E0CC                  STB _Ttmp101
4529  F6E0CC                  LDB _Ttmp101
                              IF (((128+_label220e-(*+2))|(127-_label220e+(*+2)))&0x8000)
                              LBEQ _label220e
                              ELSE
452C  2708                    BEQ _label220e
                              ENDIF
452E  F6E03F                  LDB _Ttmp26
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4531  C47F                    ANDB #$7f
4533  F700D3                  STB XCURSYS
4536                  _label220e
                              IF (((128+scancode_after-(*+2))|(127-scancode_after+(*+2)))&0x8000)
4536  7E45B8                  JMP scancode_after
                              ELSE
                              BRA scancode_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      KEYBOARD MATRIX DETECTION ON TRS-80 COLOR COMPUTER 3   *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
4539                  SCANCODE
                          ; CLR $FF01
                          ; CLR $FF00
                          ; CLR $FF03
4539  86FF                    LDA #$FF
453B  B7FF02                  STA $FF02
453E  8E4578                  LDX #SCANCODEMATRIX
4541  86FE                    LDA #$FE
4543                  SCANCODE0
4543  B7FF02                  STA $FF02
4546  F6FF00                  LDB $FF00
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORB #$FF
4549  53                      COMB
454A  C47F                    ANDB #$7F
454C  C100                    CMPB #$0
454E  271C                    BEQ SCANCODENEXT
4550  1F98                    TFR B, A
4552                  SCANCODENEXT2A
4552  1F89                    TFR A, B
4554  8401                    ANDA #1
4556  8101                    CMPA #1
4558  2605                    BNE SCANCODENEXT2
455A  A684                    LDA ,X 
455C  7E4577                  JMP SCANCODEE
455F                  SCANCODENEXT2
455F  1F98                    TFR B, A
4561  44                      LSRA
4562  3001                    LEAX 1,X 
4564  8100                    CMPA #0
4566  26EA                    BNE SCANCODENEXT2A
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4568  4F                      CLRA
4569  7E4577                  JMP SCANCODEE
456C                  SCANCODENEXT
456C  1A01                    ORCC #$01
456E  49                      ROLA
456F  3008                    LEAX 8,X 
4571  8C45B0                  CMPX #SCANCODEMATRIXE
4574  23CD                    BLS SCANCODE0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4576  4F                      CLRA
4577                  SCANCODEE
4577  39                      RTS
4578                  SCANCODEMATRIX
4578  4048505830380DE3         fcb '@','H','P','X','0','8',$0d,$E3     ; // UNUSED
4580  414951593139F9E4         fcb 'A','I','Q','Y','1','9',$F9,$E4     ; // CLR, UNUSED
4588  424A525A323AD5E5         fcb 'B','J','R','Z','2',':',$D5,$E5     ; // BRK, UNUSED
4590  434B53FA333BD6E6         fcb 'C','K','S',$FA,'3',';',$D6,$E6     ; // UP $FA, UNUSED, UNUSED
4598  444C54FB342CD7E7         fcb 'D','L','T',$FB,'4',',',$D7,$E7     ; // DOWN $FB, UNUSED, UNUSED
45A0  454D5508352DD8E8         fcb 'E','M','U',8,'5','-',$D8,$E8     ; // ?? $FC, .., LEFT, UNUSED, UNUSED
45A8  464E56FD362ED9E9         fcb 'F','N','V',$FD,'6','.',$D9,$E9     ; // RIGHT $FD, UNUSED, UNUSED
45B0                  SCANCODEMATRIXE
45B0  474F5720372FF0FE         fcb 'G','O','W',' ','7','/',$F0,$FE     ; // UNUSED, SHIFT
45B8                  scancode_after
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
45B8  4F                      CLRA
45B9  B7E025                  STA _Ttmp14
45BC  B7E161                  STA _Ttmp212
45BF  BD4539                  JSR SCANCODE
45C2  8100                    CMPA #0
45C4  2708                    BEQ _label226nokey
45C6  B7E161                  STA _Ttmp212
45C9  86FF                    LDA #$FF
45CB  B7E025                  STA _Ttmp14
45CE                  _label226nokey
45CE  B6E025                  LDA _Ttmp14
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;       CMPA #0
45D1  2734                    BEQ _label225skip
45D3  B6E161                  LDA _Ttmp212
45D6  8480                    ANDA #$80
45D8  8100                    CMPA #0
45DA  261A                    BNE _label225noascii
45DC  B6E161                  LDA _Ttmp212
45DF  B1011D                  CMPA $011d
45E2  2619                    BNE _label225different
45E4  7A011F                  DEC $011f
45E7  F6011F                  LDB $011f
45EA  F12C13                  CMPB KBDRATE
45ED  2711                    BEQ _label225ascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
45EF  4F                      CLRA
45F0  B7E025                  STA _Ttmp14
45F3  7E460B                  JMP _label225done
45F6                  _label225noascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
45F6  4F                      CLRA
45F7  B7E161                  STA _Ttmp212
45FA  7E460B                  JMP _label225done
45FD                  _label225different
45FD  B7011D                  STA $011d
4600                  _label225ascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #0
4600  5F                      CLRB
4601  F7011F                  STB $011f
4604  7E460B                  JMP _label225done
4607                  _label225skip
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4607  4F                      CLRA
4608  B7011D                  STA $011d
460B                  _label225done
460B  F6E025                  LDB _Ttmp14
                              IF (((128+_label205repeat-(*+2))|(127-_label205repeat+(*+2)))&0x8000)
460E  1027FE64                LBEQ _label205repeat
                              ELSE
                              BEQ _label205repeat
                              ENDIF
4612  F6E161                  LDB _Ttmp212
                              IF (((128+_label205repeat-(*+2))|(127-_label205repeat+(*+2)))&0x8000)
4615  1027FE5D                LBEQ _label205repeat
                              ELSE
                              BEQ _label205repeat
                              ENDIF
4619  5F                      CLRB
461A  B6E161                  LDA _Ttmp212
461D  B1E15F                  CMPA _Ttmp211
4620  2601                    BNE _label227
4622  5A                      DECB
4623                  _label227
4623  F7E025                  STB _Ttmp14
4626  F6E025                  LDB _Ttmp14
                              IF (((128+_label205backspace-(*+2))|(127-_label205backspace+(*+2)))&0x8000)
                              LBNE _label205backspace
                              ELSE
4629  266A                    BNE _label205backspace
                              ENDIF
462B  5F                      CLRB
462C  B6E161                  LDA _Ttmp212
462F  B1E159                  CMPA _Ttmp208
4632  2601                    BNE _label228
4634  5A                      DECB
4635                  _label228
4635  F7E025                  STB _Ttmp14
4638  F6E025                  LDB _Ttmp14
                              IF (((128+_label205finished-(*+2))|(127-_label205finished+(*+2)))&0x8000)
463B  10260167                LBNE _label205finished
                              ELSE
                              BNE _label205finished
                              ENDIF
463F  5F                      CLRB
4640  B6E161                  LDA _Ttmp212
4643  B1E157                  CMPA _Ttmp207
4646  2601                    BNE _label229
4648  5A                      DECB
4649                  _label229
4649  F7E025                  STB _Ttmp14
464C  F6E025                  LDB _Ttmp14
                              IF (((128+_label205finished-(*+2))|(127-_label205finished+(*+2)))&0x8000)
464F  10260153                LBNE _label205finished
                              ELSE
                              BNE _label205finished
                              ENDIF
4653  CCE161                  LDD #_Ttmp212
4656  FDE143                  STD _Ttmp179
4659  C601                    LDB #$01
465B  F7E049                  STB _Ttmp34
465E  10BEE143                LDY _Ttmp179
4662  10BF0001                STY TEXTPTR
4666  B6E049                  LDA _Ttmp34
4669  B70003                  STA TEXTSIZE
466C  BD3F85                  JSR TEXTATBITMAPMODE
466F  B6E161                  LDA _Ttmp212
4672  BEE135                  LDX _Ttmp170
4675  F6E008                  LDB _Ttmp2
4678  3A                      ABX
4679  A784                    STA ,X
467B  7CE008                  INC _Ttmp2
467E  5F                      CLRB
467F  B6E008                  LDA _Ttmp2
4682  B1E019                  CMPA _Ttmp10
4685  2601                    BNE _label233
4687  5A                      DECB
4688                  _label233
4688  F7E025                  STB _Ttmp14
468B  F6E025                  LDB _Ttmp14
                              IF (((128+_label205repeat-(*+2))|(127-_label205repeat+(*+2)))&0x8000)
468E  1027FDE4                LBEQ _label205repeat
                              ELSE
                              BEQ _label205repeat
                              ENDIF
                              IF (((128+_label205finished-(*+2))|(127-_label205finished+(*+2)))&0x8000)
4692  7E47A6                  JMP _label205finished
                              ELSE
                              BRA _label205finished
                              ENDIF
4695                  _label205backspace
4695  5F                      CLRB
4696  B6E008                  LDA _Ttmp2
4699  B1E033                  CMPA _Ttmp22
469C  2601                    BNE _label234
469E  5A                      DECB
469F                  _label234
469F  F7E025                  STB _Ttmp14
46A2  F6E025                  LDB _Ttmp14
                              IF (((128+_label205repeat-(*+2))|(127-_label205repeat+(*+2)))&0x8000)
46A5  1026FDCD                LBNE _label205repeat
                              ELSE
                              BNE _label205repeat
                              ENDIF
46A9  7AE008                  DEC _Ttmp2
46AC  CCE15B                  LDD #_Ttmp209
46AF  FDE147                  STD _Ttmp181
46B2  C601                    LDB #$01
46B4  F7E084                  STB _Ttmp55
46B7  10BEE147                LDY _Ttmp181
46BB  10BF0001                STY TEXTPTR
46BF  B6E084                  LDA _Ttmp55
46C2  B70003                  STA TEXTSIZE
46C5  BD3F85                  JSR TEXTATBITMAPMODE
46C8  4F                      CLRA
46C9  B7E086                  STA _Ttmp56
46CC  C6FE                    LDB #$fffffffe
46CE  F7E0EC                  STB _Ttmp119
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp119
46D1  FB00D3                  ADDB XCURSYS
46D4  F700D3                  STB XCURSYS
46D7  F6E086                  LDB _Ttmp56
46DA  F7E0F4                  STB _Ttmp126
46DD  F6E0F4                  LDB _Ttmp126
46E0  C47F                    ANDB #$7f
46E2  F7E0F4                  STB _Ttmp126
46E5  5F                      CLRB
46E6  B600D3                  LDA XCURSYS
46E9  B1E0F4                  CMPA _Ttmp126
46EC  2C01                    BGE _label239
46EE  5A                      DECB
46EF                  _label239
46EF  F7E0F6                  STB _Ttmp128
46F2  F6E0F6                  LDB _Ttmp128
                              IF (((128+_label237g-(*+2))|(127-_label237g+(*+2)))&0x8000)
                              LBEQ _label237g
                              ELSE
46F5  270A                    BEQ _label237g
                              ENDIF
46F7  F6313D                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
46FA  C47F                    ANDB #$7f
46FC  F700D3                  STB XCURSYS
                              IF (((128+_label237e-(*+2))|(127-_label237e+(*+2)))&0x8000)
                              JMP _label237e
                              ELSE
46FF  2028                    BRA _label237e
                              ENDIF
4701                  _label237g
4701  F6313D                  LDB CURRENTTILESWIDTH
4704  F7E0F8                  STB _Ttmp130
4707  F6E0F8                  LDB _Ttmp130
470A  C47F                    ANDB #$7f
470C  F7E0F8                  STB _Ttmp130
470F  5F                      CLRB
4710  B600D3                  LDA XCURSYS
4713  B1E0F8                  CMPA _Ttmp130
4716  2F01                    BLE _label241
4718  5A                      DECB
4719                  _label241
4719  F7E122                  STB _Ttmp151
471C  F6E122                  LDB _Ttmp151
                              IF (((128+_label237e-(*+2))|(127-_label237e+(*+2)))&0x8000)
                              LBEQ _label237e
                              ELSE
471F  2708                    BEQ _label237e
                              ENDIF
4721  F6E086                  LDB _Ttmp56
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4724  C47F                    ANDB #$7f
4726  F700D3                  STB XCURSYS
4729                  _label237e
4729  CCE15B                  LDD #_Ttmp209
472C  FDE164                  STD _Ttmp243
472F  C601                    LDB #$01
4731  F7E0B4                  STB _Ttmp76
4734  10BEE164                LDY _Ttmp243
4738  10BF0001                STY TEXTPTR
473C  B6E0B4                  LDA _Ttmp76
473F  B70003                  STA TEXTSIZE
4742  BD3F85                  JSR TEXTATBITMAPMODE
4745  4F                      CLRA
4746  B7E0B6                  STA _Ttmp77
4749  C6FF                    LDB #$ffffffff
                      ; peephole(5): unread1
                      ;       STB _Ttmp245
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp245
474B  FB00D3                  ADDB XCURSYS
474E  F700D3                  STB XCURSYS
4751  F6E0B6                  LDB _Ttmp77
4754  F7E169                  STB _Ttmp248
4757  F6E169                  LDB _Ttmp248
475A  C47F                    ANDB #$7f
475C  F7E169                  STB _Ttmp248
475F  5F                      CLRB
4760  B600D3                  LDA XCURSYS
4763  B1E169                  CMPA _Ttmp248
4766  2C01                    BGE _label250
4768  5A                      DECB
4769                  _label250
4769  F7E16B                  STB _Ttmp249
476C  F6E16B                  LDB _Ttmp249
                              IF (((128+_label246g-(*+2))|(127-_label246g+(*+2)))&0x8000)
                              LBEQ _label246g
                              ELSE
476F  270A                    BEQ _label246g
                              ENDIF
4771  F6313D                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4774  C47F                    ANDB #$7f
4776  F700D3                  STB XCURSYS
                              IF (((128+_label246e-(*+2))|(127-_label246e+(*+2)))&0x8000)
                              JMP _label246e
                              ELSE
4779  2028                    BRA _label246e
                              ENDIF
477B                  _label246g
477B  F6313D                  LDB CURRENTTILESWIDTH
477E  F7E16D                  STB _Ttmp252
4781  F6E16D                  LDB _Ttmp252
4784  C47F                    ANDB #$7f
4786  F7E16D                  STB _Ttmp252
4789  5F                      CLRB
478A  B600D3                  LDA XCURSYS
478D  B1E16D                  CMPA _Ttmp252
4790  2F01                    BLE _label254
4792  5A                      DECB
4793                  _label254
4793  F7E16F                  STB _Ttmp253
4796  F6E16F                  LDB _Ttmp253
                              IF (((128+_label246e-(*+2))|(127-_label246e+(*+2)))&0x8000)
                              LBEQ _label246e
                              ELSE
4799  2708                    BEQ _label246e
                              ENDIF
479B  F6E0B6                  LDB _Ttmp77
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
479E  C47F                    ANDB #$7f
47A0  F700D3                  STB XCURSYS
47A3                  _label246e
                              IF (((128+_label205repeat-(*+2))|(127-_label205repeat+(*+2)))&0x8000)
47A3  7E4476                  JMP _label205repeat
                              ELSE
                              BRA _label205repeat
                              ENDIF
47A6                  _label205finished
47A6  CCE15B                  LDD #_Ttmp209
47A9  FDE172                  STD _Ttmp256
47AC  C601                    LDB #$01
47AE  F7E0CE                  STB _Ttmp104
47B1  10BEE172                LDY _Ttmp256
47B5  10BF0001                STY TEXTPTR
47B9  B6E0CE                  LDA _Ttmp104
47BC  B70003                  STA TEXTSIZE
47BF  BD3F85                  JSR TEXTATBITMAPMODE
47C2  4F                      CLRA
47C3  B7E0D4                  STA _Ttmp106
47C6  C6FF                    LDB #$ffffffff
                      ; peephole(5): unread1
                      ;       STB _Ttmp258
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp258
47C8  FB00D3                  ADDB XCURSYS
47CB  F700D3                  STB XCURSYS
47CE  F6E0D4                  LDB _Ttmp106
47D1  F7E177                  STB _Ttmp261
47D4  F6E177                  LDB _Ttmp261
47D7  C47F                    ANDB #$7f
47D9  F7E177                  STB _Ttmp261
47DC  5F                      CLRB
47DD  B600D3                  LDA XCURSYS
47E0  B1E177                  CMPA _Ttmp261
47E3  2C01                    BGE _label263
47E5  5A                      DECB
47E6                  _label263
47E6  F7E179                  STB _Ttmp262
47E9  F6E179                  LDB _Ttmp262
                              IF (((128+_label259g-(*+2))|(127-_label259g+(*+2)))&0x8000)
                              LBEQ _label259g
                              ELSE
47EC  270A                    BEQ _label259g
                              ENDIF
47EE  F6313D                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
47F1  C47F                    ANDB #$7f
47F3  F700D3                  STB XCURSYS
                              IF (((128+_label259e-(*+2))|(127-_label259e+(*+2)))&0x8000)
                              JMP _label259e
                              ELSE
47F6  2028                    BRA _label259e
                              ENDIF
47F8                  _label259g
47F8  F6313D                  LDB CURRENTTILESWIDTH
47FB  F7E17B                  STB _Ttmp265
47FE  F6E17B                  LDB _Ttmp265
4801  C47F                    ANDB #$7f
4803  F7E17B                  STB _Ttmp265
4806  5F                      CLRB
4807  B600D3                  LDA XCURSYS
480A  B1E17B                  CMPA _Ttmp265
480D  2F01                    BLE _label267
480F  5A                      DECB
4810                  _label267
4810  F7E17D                  STB _Ttmp266
4813  F6E17D                  LDB _Ttmp266
                              IF (((128+_label259e-(*+2))|(127-_label259e+(*+2)))&0x8000)
                              LBEQ _label259e
                              ELSE
4816  2708                    BEQ _label259e
                              ENDIF
4818  F6E0D4                  LDB _Ttmp106
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
481B  C47F                    ANDB #$7f
481D  F700D3                  STB XCURSYS
4820                  _label259e
4820  B6E008                  LDA _Ttmp2
4823  F6E155                  LDB _Ttmp206
4826  BD31B8                  JSR DSRESIZE
4829  F6E155                  LDB _Ttmp206
482C  BD31DA                  JSR DSDESCRIPTOR
482F  EC01                    LDD 1,X 
4831  FDE180                  STD _Ttmp268
4834  A684                    LDA ,X 
4836  B7E0EA                  STA _Ttmp117
4839  F6E153                  LDB _sentence
483C  BD3186                  JSR DSFREE
483F  B6E0EA                  LDA _Ttmp117
4842  BD323B                  JSR DSALLOC
4845  F7E153                  STB _sentence
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _sentence
4848  BD31DA                  JSR DSDESCRIPTOR
484B  EC01                    LDD 1,X 
484D  FDE184                  STD _Ttmp269
4850  A684                    LDA ,X 
                      ; peephole(5): unread1
                      ;       STA _Ttmp123
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4852  4F                      CLRA
4853  F6E0EA                  LDB _Ttmp117
4856  10BEE180                LDY _Ttmp268
485A  BEE184                  LDX _Ttmp269
485D  BD3401                  JSR DUFFDEVICE
4860  4F                      CLRA
4861  B700D3                  STA XCURSYS
4864  7C00D6                  INC YCURSYS
4867  F6313F                  LDB CURRENTTILESHEIGHT
486A  F7E187                  STB _Ttmp272
486D  F6E187                  LDB _Ttmp272
4870  C47F                    ANDB #$7f
4872  F7E187                  STB _Ttmp272
4875  5F                      CLRB
4876  B600D6                  LDA YCURSYS
4879  B1E187                  CMPA _Ttmp272
487C  2D01                    BLT _label274
487E  5A                      DECB
487F                  _label274
487F  F7E189                  STB _Ttmp273
4882  F6E189                  LDB _Ttmp273
                              IF (((128+_label270scroll-(*+2))|(127-_label270scroll+(*+2)))&0x8000)
                              LBNE _label270scroll
                              ELSE
4885  2602                    BNE _label270scroll
                              ENDIF
                              IF (((128+_label270end-(*+2))|(127-_label270end+(*+2)))&0x8000)
                              JMP _label270end
                              ELSE
4887  2011                    BRA _label270end
                              ENDIF
4889                  _label270scroll
4889  86FF                    LDA #$ff
488B  B7004A                  STA DIRECTION
488E  BD41D9                  JSR VSCROLLT
4891  F6313F                  LDB CURRENTTILESHEIGHT
4894  F700D6                  STB YCURSYS
4897  7A00D6                  DEC YCURSYS
489A                  _label270end
                              ; P:617
                              ; L:42
                              ; P:0
                              ; L:43
                              ; P:0
                              ; L:44
                              ; P:0
                              ; L:45
489A  F6E153                  LDB _sentence
489D  BD31DA                  JSR DSDESCRIPTOR
48A0  EC01                    LDD 1,X 
48A2  FDE135                  STD _Ttmp170
48A5  A684                    LDA ,X 
48A7  B7E00B                  STA _Ttmp3
48AA  F650BC                  LDB _Tstr275
48AD  F7E019                  STB _Ttmp10
48B0  CC50BC                  LDD #_Tstr275
48B3  FDE13F                  STD _Ttmp178
48B6  7CE140                  INC _Ttmp178+1
48B9  2603                    BNE _label277
48BB  7CE13F                  INC _Ttmp178
48BE                  _label277
48BE  4F                      CLRA
48BF  B7E008                  STA _Ttmp2
48C2                  _label278rep
48C2  5F                      CLRB
48C3  B6E008                  LDA _Ttmp2
48C6  B1E00B                  CMPA _Ttmp3
48C9  2601                    BNE _label279
48CB  5A                      DECB
48CC                  _label279
48CC  F7E025                  STB _Ttmp14
48CF  F6E025                  LDB _Ttmp14
                              IF (((128+_label278nfnd-(*+2))|(127-_label278nfnd+(*+2)))&0x8000)
                              LBNE _label278nfnd
                              ELSE
48D2  265C                    BNE _label278nfnd
                              ENDIF
48D4  B6E019                  LDA _Ttmp10
48D7  2739                    BEQ _label280equal
48D9  10BEE135                LDY _Ttmp170
48DD  BEE13F                  LDX _Ttmp178
48E0  B6E019                  LDA _Ttmp10
48E3  8480                    ANDA #$80
48E5  2717                    BEQ _label280second
48E7                  _label280first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
48E7  4F                      CLRA
48E8                  _label280loop
48E8  E686                    LDB A,X
48EA  E1A6                    CMPB A,Y
48EC  262C                    BNE _label280diff
48EE  8B01                    ADDA #1
48F0  817F                    CMPA #$7F
48F2  26F4                    BNE _label280loop
48F4  31A87F                  LEAY 127,Y
48F7  30887F                  LEAX 127,X
48FA  3121                    LEAY 1,Y
48FC  3001                    LEAX 1,X
48FE                  _label280second
48FE  B6E019                  LDA _Ttmp10
4901  847F                    ANDA #$7f
4903  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4905  4F                      CLRA
4906                  _label280loop2
4906  E686                    LDB A,X
4908  E1A6                    CMPB A,Y
490A  260E                    BNE _label280diff
490C  8B01                    ADDA #1
490E  9114                    CMPA <MATHPTR0
4910  26F4                    BNE _label280loop2
4912                  _label280equal
4912  86FF                    LDA #$ff
4914  B7E025                  STA _Ttmp14
4917  7E491E                  JMP _label280final
491A                  _label280diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
491A  4F                      CLRA
491B  B7E025                  STA _Ttmp14
491E                  _label280final
491E  7CE136                  INC _Ttmp170+1
4921  2603                    BNE _label281
4923  7CE135                  INC _Ttmp170
4926                  _label281
4926  7CE008                  INC _Ttmp2
4929  F6E025                  LDB _Ttmp14
                              IF (((128+_label278fnd-(*+2))|(127-_label278fnd+(*+2)))&0x8000)
                              LBNE _label278fnd
                              ELSE
492C  2606                    BNE _label278fnd
                              ENDIF
                              IF (((128+_label278rep-(*+2))|(127-_label278rep+(*+2)))&0x8000)
                              JMP _label278rep
                              ELSE
492E  2092                    BRA _label278rep
                              ENDIF
4930                  _label278nfnd
4930  4F                      CLRA
4931  B7E008                  STA _Ttmp2
4934                  _label278fnd
4934  F6E008                  LDB _Ttmp2
                              IF (((128+_label282e0-(*+2))|(127-_label282e0+(*+2)))&0x8000)
4937  1027026C                LBEQ _label282e0
                              ELSE
                              BEQ _label282e0
                              ENDIF
493B                  _label282t
                              ; P:97
                              ; L:46
493B  F6E153                  LDB _sentence
493E  BD31DA                  JSR DSDESCRIPTOR
4941  EC01                    LDD 1,X 
4943  FDE135                  STD _Ttmp170
4946  A684                    LDA ,X 
4948  B7E019                  STA _Ttmp10
494B  F650BC                  LDB _Tstr283
494E  F7E025                  STB _Ttmp14
4951  CC50BC                  LDD #_Tstr283
4954  FDE13F                  STD _Ttmp178
4957  7CE140                  INC _Ttmp178+1
495A  2603                    BNE _label284
495C  7CE13F                  INC _Ttmp178
495F                  _label284
495F  4F                      CLRA
4960  B7E00B                  STA _Ttmp3
4963                  _label285rep
4963  5F                      CLRB
4964  B6E00B                  LDA _Ttmp3
4967  B1E019                  CMPA _Ttmp10
496A  2601                    BNE _label286
496C  5A                      DECB
496D                  _label286
496D  F7E033                  STB _Ttmp22
4970  F6E033                  LDB _Ttmp22
                              IF (((128+_label285nfnd-(*+2))|(127-_label285nfnd+(*+2)))&0x8000)
                              LBNE _label285nfnd
                              ELSE
4973  265C                    BNE _label285nfnd
                              ENDIF
4975  B6E025                  LDA _Ttmp14
4978  2739                    BEQ _label287equal
497A  10BEE135                LDY _Ttmp170
497E  BEE13F                  LDX _Ttmp178
4981  B6E025                  LDA _Ttmp14
4984  8480                    ANDA #$80
4986  2717                    BEQ _label287second
4988                  _label287first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4988  4F                      CLRA
4989                  _label287loop
4989  E686                    LDB A,X
498B  E1A6                    CMPB A,Y
498D  262C                    BNE _label287diff
498F  8B01                    ADDA #1
4991  817F                    CMPA #$7F
4993  26F4                    BNE _label287loop
4995  31A87F                  LEAY 127,Y
4998  30887F                  LEAX 127,X
499B  3121                    LEAY 1,Y
499D  3001                    LEAX 1,X
499F                  _label287second
499F  B6E025                  LDA _Ttmp14
49A2  847F                    ANDA #$7f
49A4  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
49A6  4F                      CLRA
49A7                  _label287loop2
49A7  E686                    LDB A,X
49A9  E1A6                    CMPB A,Y
49AB  260E                    BNE _label287diff
49AD  8B01                    ADDA #1
49AF  9114                    CMPA <MATHPTR0
49B1  26F4                    BNE _label287loop2
49B3                  _label287equal
49B3  86FF                    LDA #$ff
49B5  B7E033                  STA _Ttmp22
49B8  7E49BF                  JMP _label287final
49BB                  _label287diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
49BB  4F                      CLRA
49BC  B7E033                  STA _Ttmp22
49BF                  _label287final
49BF  7CE136                  INC _Ttmp170+1
49C2  2603                    BNE _label288
49C4  7CE135                  INC _Ttmp170
49C7                  _label288
49C7  7CE00B                  INC _Ttmp3
49CA  F6E033                  LDB _Ttmp22
                              IF (((128+_label285fnd-(*+2))|(127-_label285fnd+(*+2)))&0x8000)
                              LBNE _label285fnd
                              ELSE
49CD  2606                    BNE _label285fnd
                              ENDIF
                              IF (((128+_label285rep-(*+2))|(127-_label285rep+(*+2)))&0x8000)
                              JMP _label285rep
                              ELSE
49CF  2092                    BRA _label285rep
                              ENDIF
49D1                  _label285nfnd
49D1  4F                      CLRA
49D2  B7E00B                  STA _Ttmp3
49D5                  _label285fnd
49D5  C601                    LDB #$01
49D7  F7E03D                  STB _Ttmp25
49DA  F6E00B                  LDB _Ttmp3
49DD  F0E03D                  SUBB _Ttmp25
49E0  F7E03F                  STB _Ttmp26
49E3  F6E18B                  LDB _Ttmp289
49E6  BD3186                  JSR DSFREE
49E9  B6E03F                  LDA _Ttmp26
49EC  BD323B                  JSR DSALLOC
49EF  F7E18B                  STB _Ttmp289
49F2  F6E18B                  LDB _Ttmp289
49F5  BD31DA                  JSR DSDESCRIPTOR
49F8  EC01                    LDD 1,X 
49FA  FDE143                  STD _Ttmp179
49FD  A684                    LDA ,X 
49FF  B7E041                  STA _Ttmp28
4A02  F6E153                  LDB _sentence
4A05  BD31DA                  JSR DSDESCRIPTOR
4A08  EC01                    LDD 1,X 
4A0A  FDE147                  STD _Ttmp181
4A0D  A684                    LDA ,X 
4A0F  B7E043                  STA _Ttmp30
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4A12  4F                      CLRA
4A13  F6E041                  LDB _Ttmp28
4A16  10BEE147                LDY _Ttmp181
4A1A  BEE143                  LDX _Ttmp179
4A1D  BD3401                  JSR DUFFDEVICE
4A20  F6E18B                  LDB _Ttmp289
4A23  BD31DA                  JSR DSDESCRIPTOR
4A26  EC01                    LDD 1,X 
4A28  FDE164                  STD _Ttmp243
4A2B  A684                    LDA ,X 
4A2D  B7E047                  STA _Ttmp33
4A30  F6E18C                  LDB _word1
4A33  BD3186                  JSR DSFREE
4A36  B6E047                  LDA _Ttmp33
4A39  BD323B                  JSR DSALLOC
4A3C  F7E18C                  STB _word1
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word1
4A3F  BD31DA                  JSR DSDESCRIPTOR
4A42  EC01                    LDD 1,X 
4A44  FDE172                  STD _Ttmp256
4A47  A684                    LDA ,X 
4A49  B7E049                  STA _Ttmp34
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4A4C  4F                      CLRA
4A4D  F6E047                  LDB _Ttmp33
4A50  10BEE164                LDY _Ttmp243
4A54  BEE172                  LDX _Ttmp256
4A57  BD3401                  JSR DUFFDEVICE
                              ; L:46
4A5A  F6E153                  LDB _sentence
4A5D  BD31DA                  JSR DSDESCRIPTOR
4A60  EC01                    LDD 1,X 
4A62  FDE135                  STD _Ttmp170
4A65  A684                    LDA ,X 
4A67  B7E019                  STA _Ttmp10
4A6A  F6E019                  LDB _Ttmp10
4A6D  F7E00B                  STB _Ttmp3
4A70  F6E153                  LDB _sentence
4A73  BD31DA                  JSR DSDESCRIPTOR
4A76  EC01                    LDD 1,X 
4A78  FDE13F                  STD _Ttmp178
4A7B  A684                    LDA ,X 
4A7D  B7E033                  STA _Ttmp22
4A80  F650BC                  LDB _Tstr290
4A83  F7E03D                  STB _Ttmp25
4A86  CC50BC                  LDD #_Tstr290
4A89  FDE143                  STD _Ttmp179
4A8C  7CE144                  INC _Ttmp179+1
4A8F  2603                    BNE _label291
4A91  7CE143                  INC _Ttmp179
4A94                  _label291
4A94  4F                      CLRA
4A95  B7E025                  STA _Ttmp14
4A98                  _label292rep
4A98  5F                      CLRB
4A99  B6E025                  LDA _Ttmp14
4A9C  B1E033                  CMPA _Ttmp22
4A9F  2601                    BNE _label293
4AA1  5A                      DECB
4AA2                  _label293
4AA2  F7E03F                  STB _Ttmp26
4AA5  F6E03F                  LDB _Ttmp26
                              IF (((128+_label292nfnd-(*+2))|(127-_label292nfnd+(*+2)))&0x8000)
                              LBNE _label292nfnd
                              ELSE
4AA8  265C                    BNE _label292nfnd
                              ENDIF
4AAA  B6E03D                  LDA _Ttmp25
4AAD  2739                    BEQ _label294equal
4AAF  10BEE13F                LDY _Ttmp178
4AB3  BEE143                  LDX _Ttmp179
4AB6  B6E03D                  LDA _Ttmp25
4AB9  8480                    ANDA #$80
4ABB  2717                    BEQ _label294second
4ABD                  _label294first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4ABD  4F                      CLRA
4ABE                  _label294loop
4ABE  E686                    LDB A,X
4AC0  E1A6                    CMPB A,Y
4AC2  262C                    BNE _label294diff
4AC4  8B01                    ADDA #1
4AC6  817F                    CMPA #$7F
4AC8  26F4                    BNE _label294loop
4ACA  31A87F                  LEAY 127,Y
4ACD  30887F                  LEAX 127,X
4AD0  3121                    LEAY 1,Y
4AD2  3001                    LEAX 1,X
4AD4                  _label294second
4AD4  B6E03D                  LDA _Ttmp25
4AD7  847F                    ANDA #$7f
4AD9  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4ADB  4F                      CLRA
4ADC                  _label294loop2
4ADC  E686                    LDB A,X
4ADE  E1A6                    CMPB A,Y
4AE0  260E                    BNE _label294diff
4AE2  8B01                    ADDA #1
4AE4  9114                    CMPA <MATHPTR0
4AE6  26F4                    BNE _label294loop2
4AE8                  _label294equal
4AE8  86FF                    LDA #$ff
4AEA  B7E03F                  STA _Ttmp26
4AED  7E4AF4                  JMP _label294final
4AF0                  _label294diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
4AF0  4F                      CLRA
4AF1  B7E03F                  STA _Ttmp26
4AF4                  _label294final
4AF4  7CE140                  INC _Ttmp178+1
4AF7  2603                    BNE _label295
4AF9  7CE13F                  INC _Ttmp178
4AFC                  _label295
4AFC  7CE025                  INC _Ttmp14
4AFF  F6E03F                  LDB _Ttmp26
                              IF (((128+_label292fnd-(*+2))|(127-_label292fnd+(*+2)))&0x8000)
                              LBNE _label292fnd
                              ELSE
4B02  2606                    BNE _label292fnd
                              ENDIF
                              IF (((128+_label292rep-(*+2))|(127-_label292rep+(*+2)))&0x8000)
                              JMP _label292rep
                              ELSE
4B04  2092                    BRA _label292rep
                              ENDIF
4B06                  _label292nfnd
4B06  4F                      CLRA
4B07  B7E025                  STA _Ttmp14
4B0A                  _label292fnd
4B0A  F6E00B                  LDB _Ttmp3
4B0D  F0E025                  SUBB _Ttmp14
4B10  F7E041                  STB _Ttmp28
4B13  F6E153                  LDB _sentence
4B16  BD31DA                  JSR DSDESCRIPTOR
4B19  EC01                    LDD 1,X 
4B1B  FDE147                  STD _Ttmp181
4B1E  A684                    LDA ,X 
4B20  B7E043                  STA _Ttmp30
4B23  F6E041                  LDB _Ttmp28
4B26  F7E045                  STB _Ttmp31
4B29  F6E18E                  LDB _Ttmp296
4B2C  BD3186                  JSR DSFREE
4B2F  B6E045                  LDA _Ttmp31
4B32  BD323B                  JSR DSALLOC
4B35  F7E18E                  STB _Ttmp296
4B38  F6E18E                  LDB _Ttmp296
4B3B  BD31DA                  JSR DSDESCRIPTOR
4B3E  EC01                    LDD 1,X 
4B40  FDE164                  STD _Ttmp243
4B43  A684                    LDA ,X 
4B45  B7E045                  STA _Ttmp31
4B48  BEE147                  LDX _Ttmp181
4B4B  F6E043                  LDB _Ttmp30
4B4E  3A                      ABX
4B4F  BFE147                  STX _Ttmp181
4B52  FCE147                  LDD _Ttmp181
4B55  F0E041                  SUBB _Ttmp28
4B58  8200                    SBCA #0
4B5A  FDE147                  STD _Ttmp181
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4B5D  4F                      CLRA
4B5E  F6E045                  LDB _Ttmp31
4B61  10BEE147                LDY _Ttmp181
4B65  BEE164                  LDX _Ttmp243
4B68  BD3401                  JSR DUFFDEVICE
4B6B  F6E18E                  LDB _Ttmp296
4B6E  BD31DA                  JSR DSDESCRIPTOR
4B71  EC01                    LDD 1,X 
4B73  FDE172                  STD _Ttmp256
4B76  A684                    LDA ,X 
4B78  B7E049                  STA _Ttmp34
4B7B  F6E18F                  LDB _word2
4B7E  BD3186                  JSR DSFREE
4B81  B6E049                  LDA _Ttmp34
4B84  BD323B                  JSR DSALLOC
4B87  F7E18F                  STB _word2
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word2
4B8A  BD31DA                  JSR DSDESCRIPTOR
4B8D  EC01                    LDD 1,X 
4B8F  FDE180                  STD _Ttmp268
4B92  A684                    LDA ,X 
4B94  B7E084                  STA _Ttmp55
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4B97  4F                      CLRA
4B98  F6E049                  LDB _Ttmp34
4B9B  10BEE172                LDY _Ttmp256
4B9F  BEE180                  LDX _Ttmp268
4BA2  BD3401                  JSR DUFFDEVICE
                              ; P:294
                              ; L:47
                              IF (((128+_label282f-(*+2))|(127-_label282f+(*+2)))&0x8000)
                              JMP _label282f
                              ELSE
4BA5  204F                    BRA _label282f
                              ENDIF
4BA7                  _label282e0
4BA7  F6E008                  LDB _Ttmp2
                              IF (((128+_label282f-(*+2))|(127-_label282f+(*+2)))&0x8000)
                              LBNE _label282f
                              ELSE
4BAA  264A                    BNE _label282f
                              ENDIF
                              ; P:12
                              ; L:48
                              ; P:0
                              ; L:49
4BAC  F6E153                  LDB _sentence
4BAF  BD31DA                  JSR DSDESCRIPTOR
4BB2  EC01                    LDD 1,X 
4BB4  FDE135                  STD _Ttmp170
4BB7  A684                    LDA ,X 
4BB9  B7E019                  STA _Ttmp10
4BBC  F6E18C                  LDB _word1
4BBF  BD3186                  JSR DSFREE
4BC2  B6E019                  LDA _Ttmp10
4BC5  BD323B                  JSR DSALLOC
4BC8  F7E18C                  STB _word1
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word1
4BCB  BD31DA                  JSR DSDESCRIPTOR
4BCE  EC01                    LDD 1,X 
4BD0  FDE13F                  STD _Ttmp178
4BD3  A684                    LDA ,X 
4BD5  B7E025                  STA _Ttmp14
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4BD8  4F                      CLRA
4BD9  F6E019                  LDB _Ttmp10
4BDC  10BEE135                LDY _Ttmp170
4BE0  BEE13F                  LDX _Ttmp178
4BE3  BD3401                  JSR DUFFDEVICE
                              ; L:49
4BE6  F6E18F                  LDB _word2
4BE9  BD3186                  JSR DSFREE
4BEC  108E50BB                LDY #_Tstr297
4BF0  BD3174                  JSR DSDEFINE
4BF3  F7E18F                  STB _word2
                              ; P:27
                              ; L:50
4BF6                  _label282f
4BF6                  _label282e1
                              ; P:2
                              ; L:51
                              ; P:0
                              ; L:52
4BF6  F6E191                  LDB _Ttmp301
4BF9  BD3186                  JSR DSFREE
4BFC  108E50B3                LDY #_Tstr299
4C00  BD3174                  JSR DSDEFINE
4C03  F7E191                  STB _Ttmp301
4C06  F6E193                  LDB _Ttmp302
4C09  BD3186                  JSR DSFREE
4C0C  108E50B3                LDY #_Tstr299
4C10  BD3174                  JSR DSDEFINE
4C13  F7E193                  STB _Ttmp302
4C16  F6E193                  LDB _Ttmp302
4C19  BD31DA                  JSR DSDESCRIPTOR
4C1C  EC01                    LDD 1,X 
4C1E  FDE135                  STD _Ttmp170
4C21  A684                    LDA ,X 
4C23  B7E019                  STA _Ttmp10
4C26  F6E18C                  LDB _word1
4C29  BD31DA                  JSR DSDESCRIPTOR
4C2C  EC01                    LDD 1,X 
4C2E  FDE13F                  STD _Ttmp178
4C31  A684                    LDA ,X 
4C33  B7E025                  STA _Ttmp14
4C36  F6E019                  LDB _Ttmp10
4C39  FBE025                  ADDB _Ttmp14
4C3C  F7E033                  STB _Ttmp22
4C3F  F6E195                  LDB _Ttmp303
4C42  BD3186                  JSR DSFREE
4C45  B6E033                  LDA _Ttmp22
4C48  BD323B                  JSR DSALLOC
4C4B  F7E195                  STB _Ttmp303
4C4E  F6E195                  LDB _Ttmp303
4C51  BD31DA                  JSR DSDESCRIPTOR
4C54  EC01                    LDD 1,X 
4C56  FDE143                  STD _Ttmp179
4C59  A684                    LDA ,X 
4C5B  B7E033                  STA _Ttmp22
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4C5E  4F                      CLRA
4C5F  F6E019                  LDB _Ttmp10
4C62  10BEE135                LDY _Ttmp170
4C66  BEE143                  LDX _Ttmp179
4C69  BD3401                  JSR DUFFDEVICE
4C6C  BEE143                  LDX _Ttmp179
4C6F  F6E019                  LDB _Ttmp10
4C72  3A                      ABX
4C73  BFE143                  STX _Ttmp179
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4C76  4F                      CLRA
4C77  F6E025                  LDB _Ttmp14
4C7A  10BEE13F                LDY _Ttmp178
4C7E  BEE143                  LDX _Ttmp179
4C81  BD3401                  JSR DUFFDEVICE
4C84  F6E195                  LDB _Ttmp303
4C87  BD31DA                  JSR DSDESCRIPTOR
4C8A  EC01                    LDD 1,X 
4C8C  FDE147                  STD _Ttmp181
4C8F  A684                    LDA ,X 
4C91  B7E03D                  STA _Ttmp25
4C94  10BEE147                LDY _Ttmp181
4C98  10BF0001                STY TEXTPTR
4C9C  B6E03D                  LDA _Ttmp25
4C9F  B70003                  STA TEXTSIZE
4CA2  BD3F85                  JSR TEXTATBITMAPMODE
4CA5  4F                      CLRA
4CA6  B700D3                  STA XCURSYS
4CA9  7C00D6                  INC YCURSYS
4CAC  F6313F                  LDB CURRENTTILESHEIGHT
4CAF  F7E094                  STB _Ttmp62
4CB2  F6E094                  LDB _Ttmp62
4CB5  C47F                    ANDB #$7f
4CB7  F7E094                  STB _Ttmp62
4CBA  5F                      CLRB
4CBB  B600D6                  LDA YCURSYS
4CBE  B1E094                  CMPA _Ttmp62
4CC1  2D01                    BLT _label308
4CC3  5A                      DECB
4CC4                  _label308
4CC4  F7E09C                  STB _Ttmp68
4CC7  F6E09C                  LDB _Ttmp68
                              IF (((128+_label306scroll-(*+2))|(127-_label306scroll+(*+2)))&0x8000)
                              LBNE _label306scroll
                              ELSE
4CCA  2602                    BNE _label306scroll
                              ENDIF
                              IF (((128+_label306end-(*+2))|(127-_label306end+(*+2)))&0x8000)
                              JMP _label306end
                              ELSE
4CCC  2011                    BRA _label306end
                              ENDIF
4CCE                  _label306scroll
4CCE  86FF                    LDA #$ff
4CD0  B7004A                  STA DIRECTION
4CD3  BD41D9                  JSR VSCROLLT
4CD6  F6313F                  LDB CURRENTTILESHEIGHT
4CD9  F700D6                  STB YCURSYS
4CDC  7A00D6                  DEC YCURSYS
4CDF                  _label306end
                              ; P:95
                              ; L:53
4CDF  F6E197                  LDB _Ttmp311
4CE2  BD3186                  JSR DSFREE
4CE5  108E50AB                LDY #_Tstr309
4CE9  BD3174                  JSR DSDEFINE
4CEC  F7E197                  STB _Ttmp311
4CEF  F6E199                  LDB _Ttmp312
4CF2  BD3186                  JSR DSFREE
4CF5  108E50AB                LDY #_Tstr309
4CF9  BD3174                  JSR DSDEFINE
4CFC  F7E199                  STB _Ttmp312
4CFF  F6E199                  LDB _Ttmp312
4D02  BD31DA                  JSR DSDESCRIPTOR
4D05  EC01                    LDD 1,X 
4D07  FDE135                  STD _Ttmp170
4D0A  A684                    LDA ,X 
4D0C  B7E019                  STA _Ttmp10
4D0F  F6E18F                  LDB _word2
4D12  BD31DA                  JSR DSDESCRIPTOR
4D15  EC01                    LDD 1,X 
4D17  FDE13F                  STD _Ttmp178
4D1A  A684                    LDA ,X 
4D1C  B7E025                  STA _Ttmp14
4D1F  F6E019                  LDB _Ttmp10
4D22  FBE025                  ADDB _Ttmp14
4D25  F7E033                  STB _Ttmp22
4D28  F6E19B                  LDB _Ttmp313
4D2B  BD3186                  JSR DSFREE
4D2E  B6E033                  LDA _Ttmp22
4D31  BD323B                  JSR DSALLOC
4D34  F7E19B                  STB _Ttmp313
4D37  F6E19B                  LDB _Ttmp313
4D3A  BD31DA                  JSR DSDESCRIPTOR
4D3D  EC01                    LDD 1,X 
4D3F  FDE143                  STD _Ttmp179
4D42  A684                    LDA ,X 
4D44  B7E033                  STA _Ttmp22
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4D47  4F                      CLRA
4D48  F6E019                  LDB _Ttmp10
4D4B  10BEE135                LDY _Ttmp170
4D4F  BEE143                  LDX _Ttmp179
4D52  BD3401                  JSR DUFFDEVICE
4D55  BEE143                  LDX _Ttmp179
4D58  F6E019                  LDB _Ttmp10
4D5B  3A                      ABX
4D5C  BFE143                  STX _Ttmp179
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4D5F  4F                      CLRA
4D60  F6E025                  LDB _Ttmp14
4D63  10BEE13F                LDY _Ttmp178
4D67  BEE143                  LDX _Ttmp179
4D6A  BD3401                  JSR DUFFDEVICE
4D6D  F6E19B                  LDB _Ttmp313
4D70  BD31DA                  JSR DSDESCRIPTOR
4D73  EC01                    LDD 1,X 
4D75  FDE147                  STD _Ttmp181
4D78  A684                    LDA ,X 
4D7A  B7E03D                  STA _Ttmp25
4D7D  10BEE147                LDY _Ttmp181
4D81  10BF0001                STY TEXTPTR
4D85  B6E03D                  LDA _Ttmp25
4D88  B70003                  STA TEXTSIZE
4D8B  BD3F85                  JSR TEXTATBITMAPMODE
4D8E  4F                      CLRA
4D8F  B700D3                  STA XCURSYS
4D92  7C00D6                  INC YCURSYS
4D95  F6313F                  LDB CURRENTTILESHEIGHT
4D98  F7E094                  STB _Ttmp62
4D9B  F6E094                  LDB _Ttmp62
4D9E  C47F                    ANDB #$7f
4DA0  F7E094                  STB _Ttmp62
4DA3  5F                      CLRB
4DA4  B600D6                  LDA YCURSYS
4DA7  B1E094                  CMPA _Ttmp62
4DAA  2D01                    BLT _label318
4DAC  5A                      DECB
4DAD                  _label318
4DAD  F7E09C                  STB _Ttmp68
4DB0  F6E09C                  LDB _Ttmp68
                              IF (((128+_label316scroll-(*+2))|(127-_label316scroll+(*+2)))&0x8000)
                              LBNE _label316scroll
                              ELSE
4DB3  2602                    BNE _label316scroll
                              ENDIF
                              IF (((128+_label316end-(*+2))|(127-_label316end+(*+2)))&0x8000)
                              JMP _label316end
                              ELSE
4DB5  2011                    BRA _label316end
                              ENDIF
4DB7                  _label316scroll
4DB7  86FF                    LDA #$ff
4DB9  B7004A                  STA DIRECTION
4DBC  BD41D9                  JSR VSCROLLT
4DBF  F6313F                  LDB CURRENTTILESHEIGHT
4DC2  F700D6                  STB YCURSYS
4DC5  7A00D6                  DEC YCURSYS
4DC8                  _label316end
                              ; P:95
                              ; L:54
                              ; P:0
                              ; L:55
4DC8  CC03E8                  LDD #$03e8
4DCB  FDE02C                  STD _Ttmp19
4DCE  CC0000                  LDD #$0000
4DD1  FDE19E                  STD _Ttmp320
4DD4  FCE02C                  LDD _Ttmp19
4DD7  FDE1A2                  STD _Ttmp321
4DDA  FCE1A2                  LDD _Ttmp321
4DDD  8E0004                  LDX #$04
4DE0                  _label322loop
4DE0  1CFE                    ANDCC #$FE
4DE2  47                      ASRA
4DE3  56                      RORB
4DE4  301F                    LEAX -1,X 
4DE6  8C0000                  CMPX #0
4DE9  26F5                    BNE _label322loop
4DEB  FDE1A2                  STD _Ttmp321
4DEE  5F                      CLRB
4DEF  BEE1A2                  LDX _Ttmp321
4DF2  BCE19E                  CMPX _Ttmp320
4DF5  2601                    BNE _label324
4DF7  5A                      DECB
4DF8                  _label324
4DF8  F7E094                  STB _Ttmp62
4DFB  F6E094                  LDB _Ttmp62
4DFE  53                      COMB
4DFF  F7E09C                  STB _Ttmp68
4E02  F6E09C                  LDB _Ttmp68
                              IF (((128+_label325e0-(*+2))|(127-_label325e0+(*+2)))&0x8000)
                              LBEQ _label325e0
                              ELSE
4E05  270D                    BEQ _label325e0
                              ENDIF
4E07                  _label325t
4E07  FCE1A2                  LDD _Ttmp321
4E0A  BE0112                  LDX $0112
4E0D  308B                    LEAX D,X 
4E0F                  _label326first
4E0F  BC0112                  CMPX $0112
4E12  2EFB                    BGT _label326first
4E14                  _label325f
4E14                  _label325e0
                              ; P:41
                              ; L:56
                              ; P:0
                              ; L:57
                              IF (((128+_label18-(*+2))|(127-_label18+(*+2)))&0x8000)
4E14  7E349F                  JMP _label18
                              ELSE
                              BRA _label18
                              ENDIF
4E17                  _label18bis
                              ; P:6
                              ; L:58
                              ; P:0
                              ; L:59
                              ; P:0
                              ; L:60
                              ; P:0
                              ; L:61
                              ; P:0
                              ; L:62
                              ; P:0
                              ; L:63
                              ; P:0
                              ; L:64
                              ; P:0
                              ; L:65
                              ; P:0
                              ; L:66
                              ; P:0
                              ; L:67
                              ; P:0
4E17                  _label327
                              IF (((128+_label327-(*+2))|(127-_label327+(*+2)))&0x8000)
                              JMP _label327
                              ELSE
4E17  20FE                    BRA _label327
                              ENDIF
E000                  _PEN equ $e000
E001                  _PAPER equ $e001
E002                  _windowE equ $e002
E003                  _windowS equ $e003
E004                  _windowW equ $e004
50F6                  _TAB equ cstring1
E005                  _windowMX equ $e005
E006                  _windowMY equ $e006
E009                  _xloc equ $e009
E00C                  _batt equ $e00c
E011                  _w equ $e011
E013                  _h equ $e013
E017                  _c equ $e017
E022                  _mid1 equ $e022
E026                  _mid2 equ $e026
keyimage rzb 307
E028                  _finished equ $e028
E052                  _draw__x0 equ $e052
E054                  _draw__y0 equ $e054
E056                  _draw__x1 equ $e056
E058                  _draw__y1 equ $e058
E05A                  _draw__c equ $e05a
E153                  _sentence equ $e153
E18C                  _word1 equ $e18c
E18F                  _word2 equ $e18f
4F4C  00                      fcb 0
0200                  max_free_string equ $0200
E008                  _Ttmp2 equ $e008
E00B                  _Ttmp3 equ $e00b
50F1                  _Tstr4 equ cstring5
E00F                  _Ttmp6 equ $e00f
E016                  _Ttmp9 equ $e016
E019                  _Ttmp10 equ $e019
E01C                  _Ttmp12 equ $e01c
E020                  _Ttmp13 equ $e020
E025                  _Ttmp14 equ $e025
4F4D                  _Timg16 rzb 0
4F4D  00181800000000000000000000000000 _Timg17 fcb 0,24,24,0,0,0,0,0,0,0,0,0,0,0,0,    0
4F5D  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
4F6D  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
4F7D  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
4F8D  00111111000000000000000001111111         fcb 0,17,17,17,0,0,0,0,0,0,0,0,1,17,17, 17
4F9D  10000000000000001111111111000000         fcb 16,0,0,0,0,0,0,0,17,17,17,17,17,0,0,        0
4FAD  00000001111111111110000000000011         fcb 0,0,0,1,17,17,17,17,17,16,0,0,0,0,0,        17
4FBD  11110011111100000000001111100001         fcb 17,17,0,17,17,17,0,0,0,0,0,17,17,16,0,      1
4FCD  11111111111111111100000011111111         fcb 17,17,17,17,17,17,17,17,17,0,0,0,17,17,17,  17
4FDD  11111111110000001111111111111111         fcb 17,17,17,17,17,0,0,0,17,17,17,17,17,17,17,  17
4FED  11100001111111111111111111110011         fcb 17,16,0,1,17,17,17,17,17,17,17,17,17,17,0,  17
4FFD  11110000111100011111111111100000         fcb 17,17,0,0,17,17,0,1,17,17,17,17,17,16,0,    0
500D  11110000111111111100000011110000         fcb 17,17,0,0,17,17,17,17,17,0,0,0,17,17,0,     0
501D  01111111100000000000000000111111         fcb 1,17,17,17,16,0,0,0,0,0,0,0,0,17,17,        17
502D  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
503D  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
504D  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
505D  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
506D  000000003FFFFFFFFFFFFFFFFFFFFFFF         fcb 0,0,0,0,63,255,255,255,255,255,255,255,255,255,255, 255
507D  FFFFFF                  fcb 255,255,255
E02C                  _Ttmp19 equ $e02c
E030                  _Ttmp20 equ $e030
E033                  _Ttmp22 equ $e033
E036                  _Ttmp23 equ $e036
E03A                  _Ttmp24 equ $e03a
E03D                  _Ttmp25 equ $e03d
E03F                  _Ttmp26 equ $e03f
E041                  _Ttmp28 equ $e041
E043                  _Ttmp30 equ $e043
E045                  _Ttmp31 equ $e045
E047                  _Ttmp33 equ $e047
E049                  _Ttmp34 equ $e049
E04C                  _Ttmp42 equ $e04c
E050                  _Ttmp43 equ $e050
E05D                  _Ttmp45 equ $e05d
E061                  _Ttmp46 equ $e061
E065                  _Ttmp47 equ $e065
E069                  _Ttmp48 equ $e069
E06D                  _Ttmp49 equ $e06d
E071                  _Ttmp50 equ $e071
E075                  _Ttmp51 equ $e075
E079                  _Ttmp52 equ $e079
E07D                  _Ttmp53 equ $e07d
E081                  _Ttmp54 equ $e081
E084                  _Ttmp55 equ $e084
E086                  _Ttmp56 equ $e086
E089                  _Ttmp57 equ $e089
E08C                  _Ttmp58 equ $e08c
E08F                  _Ttmp59 equ $e08f
E092                  _Ttmp60 equ $e092
E094                  _Ttmp62 equ $e094
E097                  _Ttmp65 equ $e097
E09A                  _Ttmp66 equ $e09a
E09C                  _Ttmp68 equ $e09c
E09F                  _Ttmp71 equ $e09f
E0A2                  _Ttmp72 equ $e0a2
E0A5                  _Ttmp73 equ $e0a5
E0A9                  _Ttmp74 equ $e0a9
E0AF                  _Ttmp75 equ $e0af
E0B4                  _Ttmp76 equ $e0b4
E0B6                  _Ttmp77 equ $e0b6
E0B8                  _Ttmp79 equ $e0b8
E0BA                  _Ttmp83 equ $e0ba
E0BC                  _Ttmp85 equ $e0bc
E0BE                  _Ttmp89 equ $e0be
E0C1                  _Ttmp92 equ $e0c1
E0C4                  _Ttmp93 equ $e0c4
E0C6                  _Ttmp96 equ $e0c6
E0C8                  _Ttmp98 equ $e0c8
E0CA                  _Ttmp99 equ $e0ca
E0CC                  _Ttmp101 equ $e0cc
E0CE                  _Ttmp104 equ $e0ce
E0D1                  _Ttmp105 equ $e0d1
E0D4                  _Ttmp106 equ $e0d4
E0D7                  _Ttmp107 equ $e0d7
E0DA                  _Ttmp108 equ $e0da
E0DF                  _Ttmp109 equ $e0df
E0E4                  _Ttmp110 equ $e0e4
E0E6                  _Ttmp111 equ $e0e6
E0E8                  _Ttmp113 equ $e0e8
E0EA                  _Ttmp117 equ $e0ea
E0EC                  _Ttmp119 equ $e0ec
E0EF                  _Ttmp122 equ $e0ef
E0F2                  _Ttmp123 equ $e0f2
E0F4                  _Ttmp126 equ $e0f4
E0F6                  _Ttmp128 equ $e0f6
E0F8                  _Ttmp130 equ $e0f8
E0FB                  _Ttmp133 equ $e0fb
E0FE                  _Ttmp134 equ $e0fe
E101                  _Ttmp135 equ $e101
E104                  _Ttmp136 equ $e104
E107                  _Ttmp137 equ $e107
E10A                  _Ttmp138 equ $e10a
E10D                  _Ttmp139 equ $e10d
E110                  _Ttmp140 equ $e110
E115                  _Ttmp141 equ $e115
E11A                  _Ttmp142 equ $e11a
E11C                  _Ttmp143 equ $e11c
E11E                  _Ttmp145 equ $e11e
E120                  _Ttmp149 equ $e120
E122                  _Ttmp151 equ $e122
E124                  _Ttmp154 equ $e124
E126                  _Ttmp155 equ $e126
E128                  _Ttmp156 equ $e128
E12A                  _Ttmp157 equ $e12a
E12C                  _Ttmp158 equ $e12c
E12E                  _Ttmp159 equ $e12e
E130                  _Ttmp160 equ $e130
E132                  _Ttmp161 equ $e132
50EA                  _Tstr167 equ cstring168
E135                  _Ttmp170 equ $e135
50DE                  _Tstr173 equ cstring174
E138                  _Ttmp175 equ $e138
E13A                  _Ttmp176 equ $e13a
E13C                  _Ttmp177 equ $e13c
E13F                  _Ttmp178 equ $e13f
E143                  _Ttmp179 equ $e143
E147                  _Ttmp181 equ $e147
50D2                  _Tstr186 equ cstring187
50CE                  _Tstr188 equ cstring189
E14A                  _Ttmp190 equ $e14a
E14C                  _Ttmp191 equ $e14c
E14E                  _Ttmp192 equ $e14e
E150                  _Ttmp193 equ $e150
E152                  _Ttmp194 equ $e152
50BE                  _Tstr200 equ cstring201
E155                  _Ttmp206 equ $e155
E157                  _Ttmp207 equ $e157
E159                  _Ttmp208 equ $e159
E15B                  _Ttmp209 equ $e15b
E15D                  _Ttmp210 equ $e15d
E15F                  _Ttmp211 equ $e15f
E161                  _Ttmp212 equ $e161
E164                  _Ttmp243 equ $e164
E167                  _Ttmp245 equ $e167
E169                  _Ttmp248 equ $e169
E16B                  _Ttmp249 equ $e16b
E16D                  _Ttmp252 equ $e16d
E16F                  _Ttmp253 equ $e16f
E172                  _Ttmp256 equ $e172
E175                  _Ttmp258 equ $e175
E177                  _Ttmp261 equ $e177
E179                  _Ttmp262 equ $e179
E17B                  _Ttmp265 equ $e17b
E17D                  _Ttmp266 equ $e17d
E180                  _Ttmp268 equ $e180
E184                  _Ttmp269 equ $e184
E187                  _Ttmp272 equ $e187
E189                  _Ttmp273 equ $e189
50BC                  _Tstr275 equ cstring276
50BC                  _Tstr283 equ cstring276
E18B                  _Ttmp289 equ $e18b
50BC                  _Tstr290 equ cstring276
E18E                  _Ttmp296 equ $e18e
50BB                  _Tstr297 equ cstring298
50B3                  _Tstr299 equ cstring300
E191                  _Ttmp301 equ $e191
E193                  _Ttmp302 equ $e193
E195                  _Ttmp303 equ $e195
50AB                  _Tstr309 equ cstring310
E197                  _Ttmp311 equ $e197
E199                  _Ttmp312 equ $e199
E19B                  _Ttmp313 equ $e19b
E19E                  _Ttmp320 equ $e19e
E1A2                  _Ttmp321 equ $e1a2
5080  00                      fcb 0
5081  00                      fcb 0
5082                  VARINIT
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$38
5082  CC0038                  LDD #$0038
5085  B7E001                  STA _PAPER
                      ; peephole(5): unread1
                      ;       STA _windowE
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _windowS
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _windowW
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _windowMX
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _windowMY
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
5088  B7E009                  STA _xloc
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
508B  F7E000                  STB _PEN
                      ;       CLRA
                      ; peephole(2): r738 [A=0](CLRA)->()
                      ;       CLRA
508E  5F                      CLRB
508F  FDE011                  STD _w
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
5092  FDE013                  STD _h
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _c
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
5095  FDE022                  STD _mid1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
                      ; peephole(5): unread1
                      ;       STD _mid2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
5098  FDE028                  STD _finished
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
509B  FDE052                  STD _draw__x0
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
509E  FDE054                  STD _draw__y0
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
50A1  FDE056                  STD _draw__x1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
50A4  FDE058                  STD _draw__y1
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
50A7  B7E05A                  STA _draw__c
50AA  39                      RTS
50AB  07              cstring310 fcb 7
50AC  576F7264203220          fcc "Word 2 "
50B3  07              cstring300 fcb 7
50B4  576F7264203120          fcc "Word 1 "
50BB  00              cstring298 fcb 0
50BC  01              cstring276 fcb 1
50BD  20                      fcc " "
50BE  0F              cstring201 fcb 15
50BF  436F6D6D616E6420456E7472793A20         fcc "Command Entry: "
50CE  03              cstring189 fcb 3
50CF  524544                  fcc "RED"
50D2  0B              cstring187 fcb 11
50D3  416C657274204C766C3A20         fcc "Alert Lvl: "
50DE  0B              cstring174 fcb 11
50DF  426174742E204C766C3A20         fcc "Batt. Lvl: "
50EA  06              cstring168 fcb 6
50EB  535441545553            fcc "STATUS"
50F1  04              cstring5 fcb 4
50F2  31303025                fcc "100%"
50F6  01              cstring1 fcb 1
50F7  09                      fcc $09
50F8                  UDCCHAR
                              ; $00 
50F8  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $01 
5100  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $02 
5108  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $03 
5110  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $04 
5118  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $05 
5120  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $06 
5128  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $07 
5130  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $08 
5138  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $09 
5140  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0a 
5148  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0b 
5150  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0c 
5158  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0d 
5160  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0e 
5168  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0f 
5170  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $10 
5178  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $11 
5180  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $12 
5188  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $13 
5190  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $14 
5198  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $15 
51A0  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $16 
51A8  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $17 
51B0  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $18 
51B8  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $19 
51C0  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1a 
51C8  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1b 
51D0  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1c 
51D8  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1d 
51E0  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1e 
51E8  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1f 
51F0  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $20 
51F8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $21 
5200  1818181800001800         fcb $18,$18,$18,$18,$00,$00,$18,        $00
                              ; $22 
5208  6666660000000000         fcb $66,$66,$66,$00,$00,$00,$00,        $00
                              ; $23 
5210  6666FF66FF666600         fcb $66,$66,$ff,$66,$ff,$66,$66,        $00
                              ; $24 
5218  183E603C067C1800         fcb $18,$3e,$60,$3c,$06,$7c,$18,        $00
                              ; $25 
5220  62660C1830664600         fcb $62,$66,$0c,$18,$30,$66,$46,        $00
                              ; $26 
5228  3C663C3867663F00         fcb $3c,$66,$3c,$38,$67,$66,$3f,        $00
                              ; $27 
5230  060C180000000000         fcb $06,$0c,$18,$00,$00,$00,$00,        $00
                              ; $28 
5238  0C18303030180C00         fcb $0c,$18,$30,$30,$30,$18,$0c,        $00
                              ; $29 
5240  30180C0C0C183000         fcb $30,$18,$0c,$0c,$0c,$18,$30,        $00
                              ; $2a 
5248  00663CFF3C660000         fcb $00,$66,$3c,$ff,$3c,$66,$00,        $00
                              ; $2b 
5250  0018187E18180000         fcb $00,$18,$18,$7e,$18,$18,$00,        $00
                              ; $2c 
5258  0000000000181830         fcb $00,$00,$00,$00,$00,$18,$18,        $30
                              ; $2d 
5260  0000007E00000000         fcb $00,$00,$00,$7e,$00,$00,$00,        $00
                              ; $2e 
5268  0000000000181800         fcb $00,$00,$00,$00,$00,$18,$18,        $00
                              ; $2f 
5270  0003060C18306000         fcb $00,$03,$06,$0c,$18,$30,$60,        $00
                              ; $30 
5278  3C666E7666663C00         fcb $3c,$66,$6e,$76,$66,$66,$3c,        $00
                              ; $31 
5280  1818381818187E00         fcb $18,$18,$38,$18,$18,$18,$7e,        $00
                              ; $32 
5288  3C66060C30607E00         fcb $3c,$66,$06,$0c,$30,$60,$7e,        $00
                              ; $33 
5290  3C66061C06663C00         fcb $3c,$66,$06,$1c,$06,$66,$3c,        $00
                              ; $34 
5298  060E1E667F060600         fcb $06,$0e,$1e,$66,$7f,$06,$06,        $00
                              ; $35 
52A0  7E607C0606663C00         fcb $7e,$60,$7c,$06,$06,$66,$3c,        $00
                              ; $36 
52A8  3C66607C66663C00         fcb $3c,$66,$60,$7c,$66,$66,$3c,        $00
                              ; $37 
52B0  7E660C1818181800         fcb $7e,$66,$0c,$18,$18,$18,$18,        $00
                              ; $38 
52B8  3C66663C66663C00         fcb $3c,$66,$66,$3c,$66,$66,$3c,        $00
                              ; $39 
52C0  3C66663E06663C00         fcb $3c,$66,$66,$3e,$06,$66,$3c,        $00
                              ; $3a 
52C8  0000180000180000         fcb $00,$00,$18,$00,$00,$18,$00,        $00
                              ; $3b 
52D0  0000180000181830         fcb $00,$00,$18,$00,$00,$18,$18,        $30
                              ; $3c 
52D8  0E18306030180E00         fcb $0e,$18,$30,$60,$30,$18,$0e,        $00
                              ; $3d 
52E0  00007E007E000000         fcb $00,$00,$7e,$00,$7e,$00,$00,        $00
                              ; $3e 
52E8  70180C060C187000         fcb $70,$18,$0c,$06,$0c,$18,$70,        $00
                              ; $3f 
52F0  3C66060C18001800         fcb $3c,$66,$06,$0c,$18,$00,$18,        $00
                              ; $40 
52F8  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $41 
5300  183C667E66666600         fcb $18,$3c,$66,$7e,$66,$66,$66,        $00
                              ; $42 
5308  7C66667C66667C00         fcb $7c,$66,$66,$7c,$66,$66,$7c,        $00
                              ; $43 
5310  3C66606060663C00         fcb $3c,$66,$60,$60,$60,$66,$3c,        $00
                              ; $44 
5318  786C6666666C7800         fcb $78,$6c,$66,$66,$66,$6c,$78,        $00
                              ; $45 
5320  7E60607860607E00         fcb $7e,$60,$60,$78,$60,$60,$7e,        $00
                              ; $46 
5328  7E60607860606000         fcb $7e,$60,$60,$78,$60,$60,$60,        $00
                              ; $47 
5330  3C66606E66663C00         fcb $3c,$66,$60,$6e,$66,$66,$3c,        $00
                              ; $48 
5338  6666667E66666600         fcb $66,$66,$66,$7e,$66,$66,$66,        $00
                              ; $49 
5340  3C18181818183C00         fcb $3c,$18,$18,$18,$18,$18,$3c,        $00
                              ; $4a 
5348  1E0C0C0C0C6C3800         fcb $1e,$0c,$0c,$0c,$0c,$6c,$38,        $00
                              ; $4b 
5350  666C7870786C6600         fcb $66,$6c,$78,$70,$78,$6c,$66,        $00
                              ; $4c 
5358  6060606060607E00         fcb $60,$60,$60,$60,$60,$60,$7e,        $00
                              ; $4d 
5360  63777F6B63636300         fcb $63,$77,$7f,$6b,$63,$63,$63,        $00
                              ; $4e 
5368  66767E7E6E666600         fcb $66,$76,$7e,$7e,$6e,$66,$66,        $00
                              ; $4f 
5370  3C66666666663C00         fcb $3c,$66,$66,$66,$66,$66,$3c,        $00
                              ; $50 
5378  7C66667C60606000         fcb $7c,$66,$66,$7c,$60,$60,$60,        $00
                              ; $51 
5380  3C666666663C0E00         fcb $3c,$66,$66,$66,$66,$3c,$0e,        $00
                              ; $52 
5388  7C66667C786C6600         fcb $7c,$66,$66,$7c,$78,$6c,$66,        $00
                              ; $53 
5390  3C66603C06663C00         fcb $3c,$66,$60,$3c,$06,$66,$3c,        $00
                              ; $54 
5398  7E18181818181800         fcb $7e,$18,$18,$18,$18,$18,$18,        $00
                              ; $55 
53A0  6666666666663C00         fcb $66,$66,$66,$66,$66,$66,$3c,        $00
                              ; $56 
53A8  66666666663C1800         fcb $66,$66,$66,$66,$66,$3c,$18,        $00
                              ; $57 
53B0  6363636B7F776300         fcb $63,$63,$63,$6b,$7f,$77,$63,        $00
                              ; $58 
53B8  66663C183C666600         fcb $66,$66,$3c,$18,$3c,$66,$66,        $00
                              ; $59 
53C0  6666663C18181800         fcb $66,$66,$66,$3c,$18,$18,$18,        $00
                              ; $5a 
53C8  7E060C1830607E00         fcb $7e,$06,$0c,$18,$30,$60,$7e,        $00
                              ; $5b 
53D0  3C30303030303C00         fcb $3c,$30,$30,$30,$30,$30,$3c,        $00
                              ; $5c 
53D8  0C12307C3062FC00         fcb $0c,$12,$30,$7c,$30,$62,$fc,        $00
                              ; $5d 
53E0  3C0C0C0C0C0C3C00         fcb $3c,$0c,$0c,$0c,$0c,$0c,$3c,        $00
                              ; $5e 
53E8  00183C7E18181818         fcb $00,$18,$3c,$7e,$18,$18,$18,        $18
                              ; $5f 
53F0  0010307F7F301000         fcb $00,$10,$30,$7f,$7f,$30,$10,        $00
                              ; $60 
53F8  000000FFFF000000         fcb $00,$00,$00,$ff,$ff,$00,$00,        $00
                              ; $61 
5400  00003C063E663E00         fcb $00,$00,$3c,$06,$3e,$66,$3e,        $00
                              ; $62 
5408  0060607C66667C00         fcb $00,$60,$60,$7c,$66,$66,$7c,        $00
                              ; $63 
5410  00003C6060603C00         fcb $00,$00,$3c,$60,$60,$60,$3c,        $00
                              ; $64 
5418  0006063E66663E00         fcb $00,$06,$06,$3e,$66,$66,$3e,        $00
                              ; $65 
5420  00003C667E603C00         fcb $00,$00,$3c,$66,$7e,$60,$3c,        $00
                              ; $66 
5428  000E183E18181800         fcb $00,$0e,$18,$3e,$18,$18,$18,        $00
                              ; $67 
5430  00003E66663E067C         fcb $00,$00,$3e,$66,$66,$3e,$06,        $7c
                              ; $68 
5438  0060607C66666600         fcb $00,$60,$60,$7c,$66,$66,$66,        $00
                              ; $69 
5440  0018003818183C00         fcb $00,$18,$00,$38,$18,$18,$3c,        $00
                              ; $6a 
5448  000600060606063C         fcb $00,$06,$00,$06,$06,$06,$06,        $3c
                              ; $6b 
5450  0060606C786C6600         fcb $00,$60,$60,$6c,$78,$6c,$66,        $00
                              ; $6c 
5458  0038181818183C00         fcb $00,$38,$18,$18,$18,$18,$3c,        $00
                              ; $6d 
5460  0000667F7F6B6300         fcb $00,$00,$66,$7f,$7f,$6b,$63,        $00
                              ; $6e 
5468  00007C6666666600         fcb $00,$00,$7c,$66,$66,$66,$66,        $00
                              ; $6f 
5470  00003C6666663C00         fcb $00,$00,$3c,$66,$66,$66,$3c,        $00
                              ; $70 
5478  00007C66667C6060         fcb $00,$00,$7c,$66,$66,$7c,$60,        $60
                              ; $71 
5480  00003E66663E0606         fcb $00,$00,$3e,$66,$66,$3e,$06,        $06
                              ; $72 
5488  00007C6660606000         fcb $00,$00,$7c,$66,$60,$60,$60,        $00
                              ; $73 
5490  00003E603C067C00         fcb $00,$00,$3e,$60,$3c,$06,$7c,        $00
                              ; $74 
5498  00187E1818180E00         fcb $00,$18,$7e,$18,$18,$18,$0e,        $00
                              ; $75 
54A0  0000666666663E00         fcb $00,$00,$66,$66,$66,$66,$3e,        $00
                              ; $76 
54A8  00006666663C1800         fcb $00,$00,$66,$66,$66,$3c,$18,        $00
                              ; $77 
54B0  0000636B7F3E3600         fcb $00,$00,$63,$6b,$7f,$3e,$36,        $00
                              ; $78 
54B8  0000663C183C6600         fcb $00,$00,$66,$3c,$18,$3c,$66,        $00
                              ; $79 
54C0  00006666663E0C78         fcb $00,$00,$66,$66,$66,$3e,$0c,        $78
                              ; $7a 
54C8  00007E0C18307E00         fcb $00,$00,$7e,$0c,$18,$30,$7e,        $00
                              ; $7b 
54D0  181818FFFF181818         fcb $18,$18,$18,$ff,$ff,$18,$18,        $18
                              ; $7c 
54D8  C0C03030C0C03030         fcb $c0,$c0,$30,$30,$c0,$c0,$30,        $30
                              ; $7d 
54E0  1818181818181818         fcb $18,$18,$18,$18,$18,$18,$18,        $18
                              ; $7e 
54E8  3333CCCC3333CCCC         fcb $33,$33,$cc,$cc,$33,$33,$cc,        $cc
                              ; $7f 
54F0  3399CC663399CC66         fcb $33,$99,$cc,$66,$33,$99,$cc,        $66
                              ; $80 
54F8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $81 
5500  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $82 
5508  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $83 
5510  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $84 
5518  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $85 
5520  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $86 
5528  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $87 
5530  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $88 
5538  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $89 
5540  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8a 
5548  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8b 
5550  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8c 
5558  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8d 
5560  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8e 
5568  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8f 
5570  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $90 
5578  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $91 
5580  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $92 
5588  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $93 
5590  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $94 
5598  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $95 
55A0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $96 
55A8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $97 
55B0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $98 
55B8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $99 
55C0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9a 
55C8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9b 
55D0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9c 
55D8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9d 
55E0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9e 
55E8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9f 
55F0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a0 
55F8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a1 
5600  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a2 
5608  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a3 
5610  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a4 
5618  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a5 
5620  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a6 
5628  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a7 
5630  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a8 
5638  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a9 
5640  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $aa 
5648  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ab 
5650  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ac 
5658  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ad 
5660  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ae 
5668  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $af 
5670  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b0 
5678  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b1 
5680  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b2 
5688  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b3 
5690  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b4 
5698  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b5 
56A0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b6 
56A8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b7 
56B0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b8 
56B8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b9 
56C0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ba 
56C8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $bb 
56D0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $bc 
56D8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $bd 
56E0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $be 
56E8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $bf 
56F0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c0 
56F8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c1 
5700  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c2 
5708  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c3 
5710  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c4 
5718  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c5 
5720  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c6 
5728  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c7 
5730  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c8 
5738  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c9 
5740  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ca 
5748  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $cb 
5750  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $cc 
5758  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $cd 
5760  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ce 
5768  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $cf 
5770  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d0 
5778  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d1 
5780  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d2 
5788  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d3 
5790  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d4 
5798  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d5 
57A0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d6 
57A8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d7 
57B0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d8 
57B8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d9 
57C0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $da 
57C8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $db 
57D0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $dc 
57D8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $dd 
57E0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $de 
57E8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $df 
57F0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e0 
57F8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e1 
5800  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e2 
5808  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e3 
5810  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e4 
5818  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e5 
5820  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e6 
5828  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e7 
5830  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e8 
5838  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e9 
5840  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ea 
5848  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $eb 
5850  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ec 
5858  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ed 
5860  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ee 
5868  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ef 
5870  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f0 
5878  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f1 
5880  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f2 
5888  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f3 
5890  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f4 
5898  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f5 
58A0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f6 
58A8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f7 
58B0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f8 
58B8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f9 
58C0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fa 
58C8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fb 
58D0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fc 
58D8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fd 
58E0  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fe 
58E8  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
0020                  MAXSTRINGS                    equ 32
58F0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 DESCRIPTORS                   rzb 128
rzb 512
rzb 512
5D70  0200            FREE_STRING                   fdb 512
                      ; peephole: pass 1, 146 changes.
                      ; peephole: pass 2, 36 changes.
                      ; peephole: pass 3, 11 changes.
                      ; peephole: pass 4, 0 change.
                      ; peephole: pass 5, 7 vars removed.
                      ; peephole: pass 6, 7 changes.
                      ; peephole: pass 7, 0 change.
                      ; peephole: pass 8, 0 var removed.
                      ; peephole: pass 9, 2 vars moved to dp, 13 vars inlined.
