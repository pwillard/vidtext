2A00                          ORG $2A00
2A00  7E2C03                  JMP CODESTART
rzb 512
2C03                  CODESTART
2C03  10CE2A03                LDS #IRQSTACK
2C07  B7FFDF                  STA $FFDF
                              IF (((128+vars_after-(*+2))|(127-vars_after+(*+2)))&0x8000)
                              JMP vars_after
                              ELSE
2C0A  200F                    BRA vars_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      INTERNAL VARIABLES FOR TRS-80 COLOR COMPUTER 3         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; peephole(9): inlined3
                      ;TEXTADDRESS         fdb     $e000
2C0C  E000            BITMAPADDRESS       fdb     $e000
2C0E  0000            COLORMAPADDRESS     fdb     $0000
                      ; peephole(9): direct-page4
                      ;CURRENTMODE         fcb     $0
00F0                  CURRENTMODE equ $f0
                      ; peephole(9): inlined3
                      ;CURRENTTILEMODE     fcb     1
2C10  00              EVERYSTATUS        fcb     0
2C11  04              TABCOUNT            fcb     4
                      ; peephole(5): unread2
                      ;XCURS               fcb     0
                      ; peephole(5): unread2
                      ;YCURS               fcb     0
2C12  20              EMPTYTILE           fcb     32
2C13  10              KBDRATE             fcb     16
2C14  0000            COCO3TIMER           fdb     $0
2C16  0000            COCO3TIMER2           fdb     $0
2C18  00              TICKSPERSECOND       fcb     $0
0010                  TMPPTR equ $10    ; $23
0012                  TMPPTR2 equ $12    ; $25
0014                  MATHPTR0 equ $14
0015                  MATHPTR1 equ $15
0016                  MATHPTR2 equ $16
0017                  MATHPTR3 equ $17
0018                  MATHPTR4 equ $18
0019                  MATHPTR5 equ $19
0020                  MATHPTR6 equ $20
0021                  MATHPTR7 equ $21
0022                  MATHPTR8 equ $22
0023                  MATHPTRB0 equ $23
0024                  MATHPTRB1 equ $24
0025                  MATHPTRB2 equ $25
0026                  MATHPTRB3 equ $26
0027                  MATHPTRB4 equ $27
0028                  MATHPTRB5 equ $28
0029                  MATHPTRB6 equ $29
002A                  MATHPTRB7 equ $2a
002B                  MATHPTRB8 equ $2b
003B                  DSSTATUS equ $3b
003C                  DSSIZE equ $3c
003D                  DSADDRLO equ $3d
003E                  DSADDRHI equ $3e
003F                  DSBANKLO equ $3f
0040                  DSBANKHI equ $40
0041                  COPYOFTEXTADDRESS equ $41
0043                  COPYOFBITMAPADDRESS equ $43
0045                  COPYOFCOLORMAPADDRESS equ $45
0047                  COPYOFTEXTADDRESS2 equ $47
0049                  COPYOFCOLORMAPADDRESS2 equ $49
004A                  PORT equ $4a
004A                  DIRECTION equ $4a
004A                  PATTERN equ $4a
004A                  CHARACTERS equ $4a
004B                  CLINEX equ $4b
004C                  CLINEY equ $4c
004A                  BITSTOCONVERT equ $4a
00D3                  XCURSYS equ $D3
00D6                  YCURSYS equ $D6
2C19  FF              BANKSHADOW fcb  $FF
2C1A  3E              BANKSHADOWSHADOW fcb $3E
2C1B                  vars_after
                              IF (((128+startup_after-(*+2))|(127-startup_after+(*+2)))&0x8000)
2C1B  7E2D34                  JMP startup_after
                              ELSE
                              BRA startup_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          STARTUP ROUTINE ON TRS-80 COLOR COMPUTER 3         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
2C1E                  IRQSVC
2C1E  3406                    PSHS D
2C20  3410                    PSHS X
2C22  3420                    PSHS Y
2C24  3440                    PSHS U
2C26  3408                    PSHS DP
2C28  3401                    PSHS CC
2C2A                  IRQSVC2
2C2A  12                      NOP
2C2B  12                      NOP
2C2C  12                      NOP
2C2D  3501                    PULS CC
2C2F  3508                    PULS DP
2C31  3540                    PULS U
2C33  3520                    PULS Y
2C35  3510                    PULS X
2C37  3506                    PULS D
2C39  39                      RTS
                              
2C3A                  OLDISVC
2C3A  0000                    fdb $0
2C3C                  OLDISVC2
2C3C  0000                    fdb $0
2C3E                  OLDNMIISVC
2C3E  0000                    fdb $0
2C40                  OLDNMIISVC2
2C40  0000                    fdb $0
2C42                  OLDCC
2C42  00                      fcb $0
2C43                  ISVCIRQ
2C43  3406                    PSHS D
2C45  1FA8                    TFR CC, A
2C47  84EF                    ANDA #$EF
2C49  B72C42                  STA OLDCC
2C4C  3506                    PULS D
2C4E  BD2C1E                  JSR IRQSVC
                          ; PSHS CC
2C51  3406                    PSHS D
2C53  B62D68                  LDA GIMEVIDMSHADOW
2C56  2706                    BEQ SKIPGIMEROM
2C58  BD2DA3                  JSR GIMEBANKSAVE
2C5B  BD2E0B                  JSR GIMEBANKROM
2C5E                  SKIPGIMEROM    
2C5E  B6FFA6                  LDA GIMEMMU6
2C61  B72C1A                  STA BANKSHADOWSHADOW
2C64  863E                    LDA #$3e
2C66  B7FFA6                  STA GIMEMMU6
2C69  FC2C14                  LDD COCO3TIMER
2C6C  C30001                  ADDD #$1
2C6F  FD2C14                  STD COCO3TIMER
2C72  3410                    PSHS X
2C74  CC0000                  LDD #0
2C77  FD00E3                  STD $00e3
2C7A  B7FFDE                  STA $FFDE
2C7D  1F41                    TFR S,X 
2C7F  300E                    LEAX +14,X
2C81  EC84                    LDD ,X
2C83  FD2C3C                  STD OLDISVC2
2C86  CC2C93                  LDD #ISVCIRQ2
2C89  ED84                    STD ,X
2C8B  3510                    PULS X
2C8D  3506                    PULS D
2C8F  6E9F2C3A                JMP [OLDISVC]
2C93                  ISVCIRQ2
2C93  B7FFDF                  STA $FFDF
                          ; PULS CC
                          ; PULS A
2C96  3406                    PSHS D
2C98  B62D68                  LDA GIMEVIDMSHADOW
2C9B  2703                    BEQ ISVCIRQMMUOK2
2C9D  BD2DAE                  JSR GIMEBANKRESTORE
2CA0                  ISVCIRQMMUOK2
2CA0  B62C1A                  LDA BANKSHADOWSHADOW
2CA3  B7FFA6                  STA GIMEMMU6
2CA6  B62C42                  LDA OLDCC
2CA9  1F8A                    TFR A, CC
2CAB  3506                    PULS D
2CAD  6E9F2C3C                JMP [OLDISVC2]
2CB1                  NMIISVCIRQ
2CB1  3406                    PSHS D
2CB3  3410                    PSHS X
2CB5  FC2C14                  LDD COCO3TIMER
2CB8  C30001                  ADDD #$1
2CBB  FD2C14                  STD COCO3TIMER
2CBE  CC0000                  LDD #0
2CC1  FD00E3                  STD $00e3
2CC4  B7FFDE                  STA $FFDE
2CC7  1F41                    TFR S,X 
2CC9  300E                    LEAX +14,X
2CCB  EC84                    LDD ,X
2CCD  FD2C40                  STD OLDNMIISVC2
2CD0  CC2CDD                  LDD #NMIISVCIRQ2
2CD3  ED84                    STD ,X
2CD5  3510                    PULS X
2CD7  3506                    PULS D
2CD9  6E9F2C3E                JMP [OLDNMIISVC]
2CDD                  NMIISVCIRQ2
2CDD  B7FFDF                  STA $FFDF
2CE0  6E9F2C40                JMP [OLDNMIISVC2]
2CE4                  COCO3STARTUP
2CE4  FC010D                  LDD $010D
2CE7  FD2C3A                  STD OLDISVC
2CEA  CC2C43                  LDD #ISVCIRQ
2CED  FD010D                  STD $010D
2CF0  FC010A                  LDD $010A
2CF3  FD2C3E                  STD OLDNMIISVC
2CF6  CC2CB1                  LDD #NMIISVCIRQ
2CF9  FD010A                  STD $010A
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
2CFC  4F                      CLRA
2CFD  B7011F                  STA $011f
2D00  CC0000                  LDD #$0
2D03                  COCO3STARTUPL1
2D03  C30001                  ADDD #$1
2D06  FD0014                  STD MATHPTR0
2D09  10833100                CMPD #$3100
2D0D  26F4                    BNE COCO3STARTUPL1
2D0F  FC2C14                  LDD COCO3TIMER
2D12  1083000D                CMPD #$000d
2D16  2E08                    BGT COCO3NTSC
2D18                  COCO3PAL
2D18  8632                    LDA #50
2D1A  B72C18                  STA TICKSPERSECOND
2D1D  7E2D28                  JMP COCO3STARTUPDONE
2D20                  COCO3NTSC
2D20  863C                    LDA #60
2D22  B72C18                  STA TICKSPERSECOND
2D25  7E2D28                  JMP COCO3STARTUPDONE
2D28                  COCO3STARTUPDONE
2D28                  SYSCALLDONE
2D28  B7FFDF                  STA $FFDF
2D2B  39                      RTS
2D2C                  SYSCALL
2D2C  B7FFDE                  STA $FFDE
2D2F                  SYSCALL0
2D2F  BD0000                  JSR $0000
2D32  20F4                    BRA SYSCALLDONE
                              
2D34                  startup_after
2D34  BD2CE4                  JSR COCO3STARTUP
2D37  4F                      CLRA
2D38  B700D3                  STA XCURSYS
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
2D3B  B700D6                  STA YCURSYS
                              IF (((128+gimevars_after-(*+2))|(127-gimevars_after+(*+2)))&0x8000)
                              JMP gimevars_after
                              ELSE
2D3E  202B                    BRA gimevars_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       INTERNAL VARIABLES FOR GIME HARDWARE                  *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
000B                  PLOTDEST equ $0b ; $29
000D                  PLOTCDEST equ $0d ; $27
000F                  PLOTC2DEST equ $0f ; $25
                      
                      ; peephole(9): direct-page4
                      ;XGR    fdb 0
00F1                  XGR equ $f1
                      ; peephole(5): unread2
                      ;YGR    fdb 0
2D40  FFFF            LINE   fcb $ff, $ff
                      
2D42  0000            ORIGINX    fdb 0
2D44  0000            ORIGINY    fdb 0
2D46  0000            RESOLUTIONX    fdb 0
2D48  0000            RESOLUTIONY    fdb 0
                      
                      ; peephole(9): inlined3
                      ;CLIPX1    fdb 0
                      ; peephole(9): inlined3
                      ;CLIPY1    fdb 0
                      ; peephole(9): inlined3
                      ;CLIPX2    fdb 319
                      ; peephole(9): inlined3
                      ;CLIPY2    fdb 199
                      
                      ; peephole(5): unread2
                      ;LASTCOLOR fcb 0
                      ; peephole(9): inlined3
                      ;CURRENTWIDTH      fdb 32
                      ; peephole(9): inlined3
                      ;CURRENTHEIGHT      fdb 16
                      ; peephole(9): inlined3
                      ;CURRENTTILESWIDTH      fcb 32
                      ; peephole(9): inlined3
                      ;CURRENTTILESHEIGHT      fcb 16
                      ; peephole(5): unread2
                      ;CURRENTTILES            fcb 128
                      ; peephole(9): inlined3
                      ;CURRENTFRAMESIZE   fdb 32*16
                      ; peephole(9): inlined3
                      ;CURRENTSL          fcb 32
                      ; peephole(9): inlined3
                      ;TEXTWW      fcb 3
                      ; peephole(5): unread2
                      ;FONTWIDTH       fcb 8
                      ; peephole(5): unread2
                      ;FONTHEIGHT      fcb 8
                      
0041                  IMAGEX EQU $41 ; $42
0043                  IMAGEY EQU $43 ; $44
0045                  IMAGEW EQU $45
0047                  IMAGEH EQU $47
0048                  IMAGEH2 EQU $48
0049                  IMAGET EQU $49
0050                  IMAGEF EQU $50
                      
2D4A  0000            BLITTMPPTR fdb $0
2D4C  0000            BLITTMPPTR2 fdb $0
2D4E  00              BLITS0 fcb $0
2D4F  00              BLITS1 fcb $0
2D50  00              BLITS2 fcb $0
2D51  00              BLITR0 fcb $0
2D52  00              BLITR1 fcb $0
2D53  00              BLITR2 fcb $0
2D54  00              BLITR3 fcb $0
                      
0041                  PLOTX   EQU $41 ; $42
0043                  PLOTY   EQU $43
0045                  PLOTC   EQU $45
                      
                      ; PALETTEPAPER               fcb $12, $24, $0b, $07, $3f, $1f, $09, $26
                      ; PALETTEPEN                 fcb $00, $12, $00, $3f, $00, $12, $00, $26
2D55  0000000000000000 PALETTEPAPER               fcb $00, $00, $00, $00, $00, $00, $00, $00
2D5D  0000000000000000 PALETTEPEN                 fcb $00, $00, $00, $00, $00, $00, $00, $00
                      
2D65  00              PALETTEPENUNUSED           fcb 0
2D66  00              PALETTEPAPERUNUSED         fcb 0
2D67  00              PALETTELIMIT               fcb 0
2D68  00              GIMEVIDMSHADOW             fcb 0
2D69  03              GIMEMMUSTART               fcb 3
2D6A  00              GIMEINIT1SHADOW            fcb 0
2D6B                  gimevars_after
                              IF (((128+gimestartup_after-(*+2))|(127-gimestartup_after+(*+2)))&0x8000)
2D6B  7E309F                  JMP gimestartup_after
                              ELSE
                              BRA gimestartup_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                            STARTUP ROUTINE FOR GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
FF90                  GIMEINIT0   equ   $FF90
FF91                  GIMEINIT1   equ   $FF91
FF92                  GIMEIRQENR  equ   $FF92
FF93                  GIMEFIRQENR equ   $FF93
FF94                  GIMETIMSB   equ   $FF94
FF95                  GIMETILSB   equ   $FF95
FF96                  GIMERSVD1   equ   $FF96
FF97                  GIMERSVD2   equ   $FF97
FF98                  GIMEVIDM    equ   $FF98
FF99                  GIMEVIDR    equ   $FF99
FF9A                  GIMEBRDR    equ   $FF9A
FF9B                  GIMERSVD3   equ   $FF9B
FF9C                  GIMEVSCRL   equ   $FF9C
FF9D                  GIMEVOFF1   equ   $FF9D
FF9E                  GIMEVOFF0   equ   $FF9E
FF9F                  GIMEHOFF    equ   $FF9F
                      
FFA0                  GIMEMMU0   equ   $FFA0
FFA1                  GIMEMMU1   equ   $FFA1
FFA2                  GIMEMMU2   equ   $FFA2
FFA3                  GIMEMMU3   equ   $FFA3
FFA4                  GIMEMMU4   equ   $FFA4
FFA5                  GIMEMMU5   equ   $FFA5
FFA6                  GIMEMMU6   equ   $FFA6
FFA7                  GIMEMMU7   equ   $FFA7
                      
FFA8                  GIMEMMU8   equ   $FFA8
FFA9                  GIMEMMU9   equ   $FFA9
FFAA                  GIMEMMUA   equ   $FFAA
FFAB                  GIMEMMUB   equ   $FFAB
FFAC                  GIMEMMUC   equ   $FFAC
FFAD                  GIMEMMUD   equ   $FFAD
FFAE                  GIMEMMUE   equ   $FFAE
FFAF                  GIMEMMUF   equ   $FFAF
                      
                      ; This routine is needed to implement the BANK command.
                      ; It changes the $c000 address mapping on TASK 0.
                      
2D6E                  GIMEBANKSHADOWCHANGE
2D6E  3406                    PSHS D
2D70  B62C19                  LDA BANKSHADOW
2D73  812F                    CMPA #$2F
2D75  2E06                    BGT GIMEBANKSHADOWCHANGERESET
2D77  B7FFA6                  STA GIMEMMU6
2D7A  3506                    PULS D
2D7C  39                      RTS
2D7D                  GIMEBANKSHADOWCHANGERESET
2D7D  863E                    LDA #$3E
2D7F  B7FFA6                  STA GIMEMMU6
2D82  3506                    PULS D
2D84  39                      RTS
                      
                      ; This routine is needed to setup the video RAM
                      ; segments at screen mode change. It is setup
                      ; on the TASK 1. The TASK 0 is left for 
                      ; standard ROM / RAM
                      
2D85                  GIMERAM
2D85  3416                    PSHS D,X 
2D87  1CFE                    ANDCC #$FE
2D89  B62D69                  LDA GIMEMMUSTART
2D8C  8EFFAB                  LDX #GIMEMMUB
2D8F  3086                    LEAX A,X 
2D91  8630                    LDA #$30
2D93  F62D69                  LDB GIMEMMUSTART
2D96                  GIMERAML2
2D96  A784                    STA ,X
2D98  3001                    LEAX 1,X 
2D9A  4C                      INCA
2D9B  5C                      INCB
2D9C  C104                    CMPB #4
2D9E  26F6                    BNE GIMERAML2
2DA0  3516                    PULS D,X 
2DA2  39                      RTS
                      
                      ; This routine is needed to save the current
                      ; state of TASK bank selection (TASK 0 / TASK1).
                      
2DA3                  GIMEBANKSAVE
2DA3  3406                    PSHS D
2DA5  B6FF91                  LDA GIMEINIT1
2DA8  B72D6A                  STA GIMEINIT1SHADOW
2DAB  3506                    PULS D
2DAD  39                      RTS
                      
                      ; This routine is needed to restore the
                      ; state of TASK bank selection (TASK 0 / TASK1).
                      
2DAE                  GIMEBANKRESTORE
2DAE  3406                    PSHS D
2DB0  B62D6A                  LDA GIMEINIT1SHADOW
2DB3  B7FF91                  STA GIMEINIT1
2DB6  3506                    PULS D
2DB8  39                      RTS
                      
                      ; This routine will give back the need of
                      ; switch between video and memory RAM ad each
                      ; read / write cycle.
                      ;    Input: Y = address to check
                      ;           U = size to check
                      ;    Output: A = 1 switch is needed
                      
2DB9                  GIMEBANKISNEEDED
2DB9  3426                    PSHS Y, D
2DBB  1F30                    TFR U, D
2DBD  31AB                    LEAY D,Y 
2DBF  B62D69                  LDA GIMEMMUSTART
2DC2  2710                    BEQ GIMEBANKISNEEDED0
2DC4  8101                    CMPA #1
2DC6  2715                    BEQ GIMEBANKISNEEDED1
2DC8  8102                    CMPA #2
2DCA  271A                    BEQ GIMEBANKISNEEDED2
2DCC  8103                    CMPA #3
2DCE  271F                    BEQ GIMEBANKISNEEDED3
2DD0                  GIMEBANKISNEEDEDN
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
2DD0  4F                      CLRA
2DD1  3526                    PULS Y, D
2DD3  39                      RTS
2DD4                  GIMEBANKISNEEDED0
2DD4  108C5FFF                CMPY #$5FFF
2DD8  2E1E                    BGT GIMEBANKISNEEDEDY
2DDA  7E2DD0                  JMP GIMEBANKISNEEDEDN
2DDD                  GIMEBANKISNEEDED1
2DDD  108C7FFF                CMPY #$7FFF
2DE1  2E15                    BGT GIMEBANKISNEEDEDY
2DE3  7E2DD0                  JMP GIMEBANKISNEEDEDN
2DE6                  GIMEBANKISNEEDED2
2DE6  108C9FFF                CMPY #$9FFF
2DEA  2E0C                    BGT GIMEBANKISNEEDEDY
2DEC  7E2DD0                  JMP GIMEBANKISNEEDEDN
2DEF                  GIMEBANKISNEEDED3
2DEF  108CBFFF                CMPY #$bFFF
2DF3  2E03                    BGT GIMEBANKISNEEDEDY
2DF5  7E2DD0                  JMP GIMEBANKISNEEDEDN
2DF8                  GIMEBANKISNEEDEDY
2DF8  8601                    LDA #1
2DFA  3526                    PULS Y, D
2DFC  39                      RTS
                      
                      ; This routine is needed to switch to video RAM.
                      
2DFD                  GIMEBANKVIDEO
2DFD  3406                    PSHS D
2DFF  B6FF91                  LDA GIMEINIT1
2E02  8A01                    ORA #$1
2E04  B7FF91                  STA GIMEINIT1
2E07  3506                    PULS D
2E09  39                      RTS
                      
                      ; This routine is needed to setup the standard
                      ; RAM / ROM segment. It actually does nothing
                      ; since we preserve the default configuration.
                      
2E0A                  GIMEROM
2E0A  39                      RTS
                      
                      ; This routine is needed to switch to ROM/RAM.
                      
2E0B                  GIMEBANKROM
2E0B  3406                    PSHS D
2E0D  B6FF91                  LDA GIMEINIT1
2E10  84FE                    ANDA #$FE
2E12  B7FF91                  STA GIMEINIT1
2E15  3506                    PULS D
2E17  39                      RTS
                      
                      ; This is the startup routine.
                      
2E18                  GIMESTARTUP
                      
                          ; Standard initialization
                      
2E18  864C                    LDA   #%01001100
2E1A  B7FF90                  STA   GIMEINIT0
                      ; peephole(1): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDA   #%00000011
2E1D  B6FF98                  LDA   GIMEVIDM
2E20  8408                    ANDA  #$8
2E22  8A03                    ORA   #%00000011
2E24  B7FF98                  STA   GIMEVIDM
2E27  B72D68                  STA   GIMEVIDMSHADOW
2E2A  8625                    LDA   #%00100101
2E2C  B7FF99                  STA   GIMEVIDR
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA   #0
2E2F  4F                      CLRA
2E30  B7FF9A                  STA   GIMEBRDR
2E33  7FFF9C                  CLR   GIMEVSCRL
2E36  86C0                    LDA   #$C0
2E38  B7FF9D                  STA   GIMEVOFF1
2E3B  7FFF9E                  CLR   GIMEVOFF0
2E3E  7FFF9F                  CLR   GIMEHOFF
                      
2E41  8EFFA8                  LDX #GIMEMMU8
2E44  8638                    LDA #$38
2E46  A780                    STA ,X+
2E48  4C                      INCA
2E49  A780                    STA ,X+
2E4B  4C                      INCA
2E4C  A780                    STA ,X+
2E4E  4C                      INCA
2E4F  A780                    STA ,X+
2E51  4C                      INCA
2E52  A780                    STA ,X+
2E54  4C                      INCA
2E55  A780                    STA ,X+
2E57  4C                      INCA
2E58  A780                    STA ,X+
2E5A  4C                      INCA
2E5B  A780                    STA ,X+
                      
                          ; Reset the palette.
                      
2E5D  BD2F7A                  JSR GIMERESETPALETTE
                      
                          ; Setup the video RAM segments.
2E60  BD2D85                  JSR GIMERAM
                      
                          ; Turn on ROM/RAM
2E63  BD2E0B                  JSR GIMEBANKROM
                      
2E66  39                      RTS
                      
                      ; Look for a specific (pen) color into the palette.
                      ;   input: B = color to look for
                      ;   output: A = index of ink, $FF if not found
2E67                  GIMELOOKFORPALETTEPEN
2E67  3410                    PSHS X
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2E69  4F                      CLRA
2E6A  8E2D5D                  LDX #PALETTEPEN
2E6D                  GIMELOOKFORPALETTEPENL1
2E6D  E186                    CMPB A,X 
2E6F  2707                    BEQ GIMELOOKFORPALETTEPEND
2E71  4C                      INCA
2E72  8108                    CMPA #8
2E74  26F7                    BNE GIMELOOKFORPALETTEPENL1
2E76  86FF                    LDA #$FF
2E78                  GIMELOOKFORPALETTEPEND
2E78  3510                    PULS X
2E7A  39                      RTS
                      
                      ; Look for a specific (paper) color into the palette.
                      ;   input: B = color to look for
                      ;   output: A = index of ink, $FF if not found
2E7B                  GIMELOOKFORPALETTEPAPER
2E7B  3410                    PSHS X
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2E7D  4F                      CLRA
2E7E  8E2D55                  LDX #PALETTEPAPER
2E81                  GIMELOOKFORPALETTEPAPERL1
2E81  E186                    CMPB A,X 
2E83  2707                    BEQ GIMELOOKFORPALETTEPAPERD
2E85  4C                      INCA
2E86  8108                    CMPA #8
2E88  26F7                    BNE GIMELOOKFORPALETTEPAPERL1
2E8A  86FF                    LDA #$FF
2E8C                  GIMELOOKFORPALETTEPAPERD
2E8C  3510                    PULS X
2E8E  39                      RTS
                      
                      ; Look for a specific color into the (paper+pen) palette.
                      ;   input: B = color to look for
                      ;   output: A = index of ink, $FF if not found
2E8F                  GIMELOOKFORPALETTE
2E8F  3410                    PSHS X
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2E91  4F                      CLRA
2E92  8E2D55                  LDX #PALETTEPAPER
2E95                  GIMELOOKFORPALETTEL1
2E95  E186                    CMPB A,X 
2E97  2708                    BEQ GIMELOOKFORPALETTED
2E99  4C                      INCA
2E9A  B12D67                  CMPA PALETTELIMIT
2E9D  26F6                    BNE GIMELOOKFORPALETTEL1
2E9F  86FF                    LDA #$FF
2EA1                  GIMELOOKFORPALETTED
2EA1  3510                    PULS X
2EA3  39                      RTS
                      
                      ; Insert a specific color into the (pen) palette.
                      ;   input: B = color to insert
                      ;   output: A = index of ink allocated
2EA4                  GIMEINSERTPALETTEPEN
2EA4  3410                    PSHS X
2EA6  C1FF                    CMPB #$FF
2EA8  2716                    BEQ GIMEINSERTPALETTEPENDONE
2EAA  B62D65                  LDA PALETTEPENUNUSED
2EAD  4C                      INCA
2EAE  8108                    CMPA #8
2EB0  2601                    BNE GIMEINSERTPALETTEPENUNDER
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2EB2  4F                      CLRA
2EB3                  GIMEINSERTPALETTEPENUNDER
2EB3  B72D65                  STA PALETTEPENUNUSED
2EB6  8E2D5D                  LDX #PALETTEPEN
2EB9  E786                    STB A,X
2EBB  8EFFB8                  LDX #$FFB8
2EBE  E786                    STB A,X
2EC0                  GIMEINSERTPALETTEPENDONE
2EC0  3510                    PULS X
2EC2  39                      RTS
                      
                      ; Insert a specific color into the (paper) palette.
                      ;   input: B = color to insert
                      ;   output: A = index of ink allocated
2EC3                  GIMEINSERTPALETTEPAPER
2EC3  3410                    PSHS X
2EC5  C1FF                    CMPB #$FF
2EC7  2716                    BEQ GIMEINSERTPALETTEPAPERDONE
2EC9  B62D66                  LDA PALETTEPAPERUNUSED
2ECC  4C                      INCA
2ECD  8108                    CMPA #8
2ECF  2601                    BNE GIMEINSERTPALETTEPAPERUNDER
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2ED1  4F                      CLRA
2ED2                  GIMEINSERTPALETTEPAPERUNDER
2ED2  B72D66                  STA PALETTEPAPERUNUSED
2ED5  8E2D55                  LDX #PALETTEPAPER
2ED8  E786                    STB A,X
2EDA  8EFFB0                  LDX #$FFB0
2EDD  E786                    STB A,X
2EDF                  GIMEINSERTPALETTEPAPERDONE
2EDF  3510                    PULS X
2EE1  39                      RTS
                      
                      ; Insert a specific color into the (paper+pen) palette.
                      ;   input: B = color to insert
                      ;   output: A = index of ink allocated
2EE2                  GIMEINSERTPALETTE
2EE2  3410                    PSHS X
2EE4  C1FF                    CMPB #$FF
2EE6  2717                    BEQ GIMEINSERTPALETTEDONE
2EE8  B62D66                  LDA PALETTEPAPERUNUSED
2EEB  4C                      INCA
2EEC  B12D67                  CMPA PALETTELIMIT
2EEF  2601                    BNE GIMEINSERTPALETTEUNDER
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
2EF1  4F                      CLRA
2EF2                  GIMEINSERTPALETTEUNDER
2EF2  B72D66                  STA PALETTEPAPERUNUSED
2EF5  8E2D55                  LDX #PALETTEPAPER
2EF8  E786                    STB A,X
2EFA  8EFFB0                  LDX #$FFB0
2EFD  E786                    STB A,X
2EFF                  GIMEINSERTPALETTEDONE
2EFF  3510                    PULS X
2F01  39                      RTS
                      
                      ; Update a specific color into the (pen) palette.
                      ;   input: 
                      ;           A = index of ink to update
                      ;           B = color to update
2F02                  GIMEUPDATEPALETTEPEN
2F02  3410                    PSHS X
2F04  C1FF                    CMPB #$FF
2F06  270A                    BEQ GIMEUPDATEPALETTEPENDONE
2F08  8E2D5D                  LDX #PALETTEPEN
2F0B  E786                    STB A,X
2F0D  8EFFB8                  LDX #$FFB8
2F10  E786                    STB A,X
2F12                  GIMEUPDATEPALETTEPENDONE
2F12  3510                    PULS X
2F14  39                      RTS
                      
                      ; Update a specific color into the (paper) palette.
                      ;   input: 
                      ;           A = index of ink to update
                      ;           B = color to update
2F15                  GIMEUPDATEPALETTEPAPER
2F15  3410                    PSHS X
2F17  C1FF                    CMPB #$FF
2F19  270A                    BEQ GIMEUPDATEPALETTEPAPERDONE
2F1B  8E2D55                  LDX #PALETTEPAPER
2F1E  E786                    STB A,X
2F20  8EFFB0                  LDX #$FFB0
2F23  E786                    STB A,X
2F25                  GIMEUPDATEPALETTEPAPERDONE
2F25  3510                    PULS X
2F27  39                      RTS
                      
                      ; Update a specific color into the (paper+pen) palette.
                      ;   input: 
                      ;           A = index of ink to update
                      ;           B = color to update
2F28                  GIMEUPDATEPALETTE
2F28  3410                    PSHS X
2F2A  C1FF                    CMPB #$FF
2F2C  270A                    BEQ GIMEUPDATEPALETTEDONE
2F2E  8E2D55                  LDX #PALETTEPAPER
2F31  E786                    STB A,X
2F33  8EFFB0                  LDX #$FFB0
2F36  E786                    STB A,X
2F38                  GIMEUPDATEPALETTEDONE
2F38  3510                    PULS X
2F3A  39                      RTS
                      
                      ; Get a specific color from the (pen) palette.
                      ;   input: 
                      ;           A = index of ink
                      ;   output: 
                      ;           B = color
2F3B                  GIMEGETPALETTEPEN
2F3B  3410                    PSHS X
2F3D  8E2D5D                  LDX #PALETTEPEN
2F40  E686                    LDB A,X
2F42  3510                    PULS X
2F44  39                      RTS
                      
                      ; Get a specific color from the (paper) palette.
                      ;   input: 
                      ;           A = index of ink
                      ;   output: 
                      ;           B = color
2F45                  GIMEGETPALETTEPAPER
2F45  3410                    PSHS X
2F47  8E2D55                  LDX #PALETTEPAPER
2F4A  E686                    LDB A,X
2F4C  3510                    PULS X
2F4E  39                      RTS
                      
                      ; Get a specific color from the (paper+pen) palette.
                      ;   input: 
                      ;           A = index of ink
                      ;   output: 
                      ;           B = color
2F4F                  GIMEGETPALETTE
2F4F  3410                    PSHS X
2F51  8E2D55                  LDX #PALETTEPAPER
2F54  E686                    LDB A,X
2F56  3510                    PULS X
2F58  39                      RTS
                      
                      ; Look for a specific color into the (pen) palette and, if missing,
                      ; insert it into palette.
                      ;   input: 
                      ;           B = color to look for / insert
                      ;   output: 
                      ;           A = index of ink
2F59                  GIMESELECTPALETTEPEN
2F59  BD2E67                  JSR GIMELOOKFORPALETTEPEN
2F5C  81FF                    CMPA #$FF
2F5E  2603                    BNE GIMESELECTPALETTEPENDONE
2F60  BD2EA4                  JSR GIMEINSERTPALETTEPEN
2F63                  GIMESELECTPALETTEPENDONE
2F63  39                      RTS
                      
                      ; Look for a specific color into the (paper) palette and, if missing,
                      ; insert it into palette.
                      ;   input: 
                      ;           B = color to look for / insert
                      ;   output: 
                      ;           A = index of ink
2F64                  GIMESELECTPALETTEPAPER
2F64  BD2E7B                  JSR GIMELOOKFORPALETTEPAPER
2F67  81FF                    CMPA #$FF
2F69  2603                    BNE GIMESELECTPALETTEPAPERDONE
2F6B  BD2EC3                  JSR GIMEINSERTPALETTEPAPER
2F6E                  GIMESELECTPALETTEPAPERDONE
2F6E  39                      RTS
                      
                      ; Look for a specific color into the (paper+pen) palette and, if missing,
                      ; insert it into palette.
                      ;   input: 
                      ;           B = color to look for / insert
                      ;   output: 
                      ;           A = index of ink
2F6F                  GIMESELECTPALETTE
2F6F  BD2E8F                  JSR GIMELOOKFORPALETTE
2F72  81FF                    CMPA #$FF
2F74  2603                    BNE GIMESELECTPALETTEDONE
2F76  BD2EE2                  JSR GIMEINSERTPALETTE
2F79                  GIMESELECTPALETTEDONE
2F79  39                      RTS
                      
                      ; Reset palette.
2F7A                  GIMERESETPALETTE
2F7A  3436                    PSHS Y,X , D
                      ; peephole(1): r314 (LDA,LDB)->(LDD)
                      ;       LDA #0
                      ;       LDB #0
2F7C  CC0000                  LDD #((0)&255)*256+((0)&255)
2F7F  8E2D55                  LDX #PALETTEPAPER
2F82  108EFFB0                LDY #$FFB0
2F86                  GIMERESETPALETTEL1
2F86  A785                    STA B,X 
2F88  A7A5                    STA B,Y 
2F8A  5C                      INCB
2F8B  C110                    CMPB #16
2F8D  26F7                    BNE GIMERESETPALETTEL1
2F8F  3536                    PULS Y,X , D
2F91  39                      RTS
                      
                      ; Calculate the starting address (byte) of the first pixel
                      ; positioned at PLOTX, PLOTY for the current screen mode.
                      ;               Input: PLOTX, PLOTY
                      ;               Output: 
                      ;                               X -> address
2F92                  GIMECALCPOSBM
2F92  3406                    PSHS D
2F94  BE2C0C                  LDX BITMAPADDRESS
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
2F97  96F0                    LDA <CURRENTMODE
2F99  84E0                    ANDA #$E0
2F9B  81E0                    CMPA #$E0
2F9D  270D                    BEQ GIMECALCPOSBM16
2F9F  8160                    CMPA #$60
2FA1  2752                    BEQ GIMECALCPOSBM4
2FA3  8140                    CMPA #$40
2FA5  102700A9                LBEQ GIMECALCPOSBM2
2FA9  3506                    PULS D
2FAB  39                      RTS 
                      
2FAC                  GIMECALCPOSBM16
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
2FAC  96F0                    LDA <CURRENTMODE
2FAE  841F                    ANDA #$1F
2FB0  8102                    CMPA #2
2FB2  2F13                    BLE GIMECALCPOSBM16X64
2FB4  8105                    CMPA #5
2FB6  2F14                    BLE GIMECALCPOSBM16X80
2FB8  8108                    CMPA #8
2FBA  2F15                    BLE GIMECALCPOSBM16X128
2FBC  810B                    CMPA #11
2FBE  2F16                    BLE GIMECALCPOSBM16X160
2FC0  810E                    CMPA #14
2FC2  2F17                    BLE GIMECALCPOSBM16X256
2FC4  7E2FE0                  JMP GIMECALCPOSBM16X320
2FC7                  GIMECALCPOSBM16X64
2FC7  8620                    LDA #32
2FC9  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FCC                  GIMECALCPOSBM16X80
2FCC  8628                    LDA #40
2FCE  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FD1                  GIMECALCPOSBM16X128
2FD1  8640                    LDA #64
2FD3  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FD6                  GIMECALCPOSBM16X160
2FD6  8650                    LDA #80
2FD8  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FDB                  GIMECALCPOSBM16X256
2FDB  8680                    LDA #128
2FDD  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FE0                  GIMECALCPOSBM16X320
2FE0  86A0                    LDA #160
2FE2  7E2FE5                  JMP GIMECALCPOSBM16OFFSET
2FE5                  GIMECALCPOSBM16OFFSET
2FE5  F60044                  LDB PLOTY+1
2FE8  3D                      MUL
2FE9  308B                    LEAX D,X 
                      
2FEB  FC0041                  LDD PLOTX
2FEE  44                      LSRA
2FEF  56                      RORB
2FF0  308B                    LEAX D,X 
                      
2FF2  3506                    PULS D
2FF4  39                      RTS
                      
2FF5                  GIMECALCPOSBM4
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
2FF5  96F0                    LDA <CURRENTMODE
2FF7  841F                    ANDA #$1F
2FF9  8102                    CMPA #2
2FFB  2F1B                    BLE GIMECALCPOSBM4X64
2FFD  8105                    CMPA #5
2FFF  2F1C                    BLE GIMECALCPOSBM4X80
3001  8108                    CMPA #8
3003  2F1D                    BLE GIMECALCPOSBM4X128
3005  810B                    CMPA #11
3007  2F1E                    BLE GIMECALCPOSBM4X160
3009  810E                    CMPA #14
300B  2F1F                    BLE GIMECALCPOSBM4X256
300D  8111                    CMPA #17
300F  2F20                    BLE GIMECALCPOSBM4X320
3011  8114                    CMPA #20
3013  2F21                    BLE GIMECALCPOSBM4X512
3015  7E303B                  JMP GIMECALCPOSBM4X640
3018                  GIMECALCPOSBM4X64
3018  8610                    LDA #16
301A  7E3040                  JMP GIMECALCPOSBM4OFFSET
301D                  GIMECALCPOSBM4X80
301D  8614                    LDA #20
301F  7E3040                  JMP GIMECALCPOSBM4OFFSET
3022                  GIMECALCPOSBM4X128
3022  8620                    LDA #32
3024  7E3040                  JMP GIMECALCPOSBM4OFFSET
3027                  GIMECALCPOSBM4X160
3027  8628                    LDA #40
3029  7E3040                  JMP GIMECALCPOSBM4OFFSET
302C                  GIMECALCPOSBM4X256
302C  8640                    LDA #64
302E  7E3040                  JMP GIMECALCPOSBM4OFFSET
3031                  GIMECALCPOSBM4X320
3031  8650                    LDA #80
3033  7E3040                  JMP GIMECALCPOSBM4OFFSET
3036                  GIMECALCPOSBM4X512
3036  8680                    LDA #128
3038  7E3040                  JMP GIMECALCPOSBM4OFFSET
303B                  GIMECALCPOSBM4X640
303B  86A0                    LDA #160
303D  7E3040                  JMP GIMECALCPOSBM4OFFSET
3040                  GIMECALCPOSBM4OFFSET
3040  F60044                  LDB PLOTY+1
3043  3D                      MUL
3044  308B                    LEAX D,X 
                      
3046  FC0041                  LDD PLOTX
3049  44                      LSRA
304A  56                      RORB
304B  44                      LSRA
304C  56                      RORB
304D  308B                    LEAX D,X 
                      
304F  3506                    PULS D
3051  39                      RTS
                      
3052                  GIMECALCPOSBM2
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
3052  96F0                    LDA <CURRENTMODE
3054  841F                    ANDA #$1F
3056  8102                    CMPA #2
3058  2F13                    BLE GIMECALCPOSBM2X128
305A  8105                    CMPA #5
305C  2F14                    BLE GIMECALCPOSBM2X160
305E  8108                    CMPA #8
3060  2F15                    BLE GIMECALCPOSBM2X256
3062  810B                    CMPA #11
3064  2F16                    BLE GIMECALCPOSBM2X320
3066  810E                    CMPA #14
3068  2F17                    BLE GIMECALCPOSBM2X512
306A  7E3086                  JMP GIMECALCPOSBM2X640
306D                  GIMECALCPOSBM2X128
306D  8610                    LDA #16
306F  7E308B                  JMP GIMECALCPOSBM2OFFSET
3072                  GIMECALCPOSBM2X160
3072  8614                    LDA #20
3074  7E308B                  JMP GIMECALCPOSBM2OFFSET
3077                  GIMECALCPOSBM2X256
3077  8620                    LDA #32
3079  7E308B                  JMP GIMECALCPOSBM2OFFSET
307C                  GIMECALCPOSBM2X320
307C  8628                    LDA #40
307E  7E308B                  JMP GIMECALCPOSBM2OFFSET
3081                  GIMECALCPOSBM2X512
3081  8640                    LDA #64
3083  7E308B                  JMP GIMECALCPOSBM2OFFSET
3086                  GIMECALCPOSBM2X640
3086  8650                    LDA #80
3088  7E308B                  JMP GIMECALCPOSBM2OFFSET
308B                  GIMECALCPOSBM2OFFSET
308B  F60044                  LDB PLOTY+1
308E  3D                      MUL
308F  308B                    LEAX D,X 
                      
3091  FC0041                  LDD PLOTX
3094  44                      LSRA
3095  56                      RORB
3096  44                      LSRA
3097  56                      RORB
3098  44                      LSRA
3099  56                      RORB
309A  308B                    LEAX D,X 
                      
309C  3506                    PULS D
309E  39                      RTS
309F                  gimestartup_after
309F  BD2E18                  JSR GIMESTARTUP
30A2  CCC000                  LDD #$c000
30A5  B7FF9D                  STA GIMEVOFF1
30A8  F7FF9E                  STB GIMEVOFF0
30AB  7FFF9F                  CLR GIMEHOFF
30AE  B6FF98                  LDA GIMEVIDM
30B1  8408                    ANDA #$8
30B3  8A03                    ORA #$03
30B5  B7FF98                  STA GIMEVIDM
30B8  B72D68                  STA GIMEVIDMSHADOW
30BB  8625                    LDA #$25
30BD  B7FF99                  STA GIMEVIDR
30C0  C603                    LDB #$03
30C2  F72D69                  STB GIMEMMUSTART
30C5  CCC000                  LDD #$c000
30C8  FD2C0C                  STD BITMAPADDRESS
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$c000
30CB  86C0                    LDA #$c0
30CD  FD3146                  STD TEXTADDRESS
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
30D0  4F                      CLRA
30D1  FD2D42                  STD ORIGINX
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
                      ; peephole(3): r738 [A=0](CLRA)->()
                      ;       CLRA
30D4  FD2D44                  STD ORIGINY
30D7  CC0140                  LDD #$0140
30DA  FD30E4                  STD CURRENTWIDTH
30DD  CC00C8                  LDD #$00c8
30E0  FD30EA                  STD CURRENTHEIGHT
                      ; peephole(9): inlined1
                      ;       LDD CURRENTWIDTH
30E3  CC0020                  LDD #32
30E4                  CURRENTWIDTH equ *-2
30E6  FD2D46                  STD RESOLUTIONX
                      ; peephole(9): inlined1
                      ;       LDD CURRENTHEIGHT
30E9  CC0010                  LDD #16
30EA                  CURRENTHEIGHT equ *-2
30EC  FD2D48                  STD RESOLUTIONY
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB #$80
                      ; peephole(5): unread1
                      ;       STB CURRENTTILES
30EF  C628                    LDB #$28
30F1  F7313D                  STB CURRENTTILESWIDTH
30F4  C619                    LDB #$19
30F6  F7313F                  STB CURRENTTILESHEIGHT
30F9  C610                    LDB #$10
30FB  F72D67                  STB PALETTELIMIT
30FE  CC07D0                  LDD #$07d0
3101  FD3A68                  STD CURRENTFRAMESIZE
3104  C6A0                    LDB #$a0
3106  F73BE0                  STB CURRENTSL
                              IF (((128+GIMERESETPALETTE-(*+2))|(127-GIMERESETPALETTE+(*+2)))&0x8000)
3109  BD2F7A                  JSR GIMERESETPALETTE
                              ELSE
                              BSR GIMERESETPALETTE
                              ENDIF
                              IF (((128+GIMERAM-(*+2))|(127-GIMERAM+(*+2)))&0x8000)
310C  BD2D85                  JSR GIMERAM
                              ELSE
                              BSR GIMERAM
                              ENDIF
310F  C604                    LDB #$04
                      ; peephole(9): direct-page1
                      ;       STB CURRENTMODE
3111  D7F0                    STB <CURRENTMODE
3113  C601                    LDB #$01
3115  F7311B                  STB CURRENTTILEMODE
                              IF (((128+clsText_after-(*+2))|(127-clsText_after+(*+2)))&0x8000)
                              JMP clsText_after
                              ELSE
3118  2046                    BRA clsText_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       CLEAR SCREEN ROUTINE FOR GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
311A                  CLST
                      ; peephole(9): inlined1
                      ;       LDA CURRENTTILEMODE
311A  8601                    LDA #1
311B                  CURRENTTILEMODE equ *-1
311C  2601                    BNE CLSTX
311E  39                      RTS
311F                  CLSTX
311F  3476                    PSHS A,B,X,Y,U
                          ; The CLS command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
3121  BD2DFD                  JSR GIMEBANKVIDEO
3124  F6E000                  LDB _PEN
3127  BD2F59                  JSR GIMESELECTPALETTEPEN
312A  48                      LSLA
312B  48                      LSLA
312C  48                      LSLA
312D  B70045                  STA PLOTC
3130  F6E001                  LDB _PAPER
3133  BD2F64                  JSR GIMESELECTPALETTEPAPER
3136  BA0045                  ORA PLOTC
3139  B70045                  STA PLOTC
                      ; peephole(9): inlined1
                      ;       LDA CURRENTTILESWIDTH
313C  8620                    LDA #32
313D                  CURRENTTILESWIDTH equ *-1
                      ; peephole(9): inlined1
                      ;       LDB CURRENTTILESHEIGHT
313E  C610                    LDB #16
313F                  CURRENTTILESHEIGHT equ *-1
3140  3D                      MUL
3141  58                      LSLB
3142  49                      ROLA
3143  1F03                    TFR D,U 
                      ; peephole(9): inlined1
                      ;       LDX TEXTADDRESS
3145  8EE000                  LDX #$e000
3146                  TEXTADDRESS equ *-2
3148  B62C12                  LDA EMPTYTILE
314B  F60045                  LDB PLOTC
314E                  CLSTX0
314E  ED80                    STD ,X+
3150  3001                    LEAX 1,X 
3152  335F                    LEAU -1,U 
3154  11830000                CMPU #0
3158  26F4                    BNE CLSTX0
                          ; The CLS command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
315A  BD2E0B                  JSR GIMEBANKROM
315D  3576                    PULS A,B,X,Y,U
315F  39                      RTS
3160                  clsText_after
3160  BD311A                  JSR CLST
                              IF (((128+VARINIT-(*+2))|(127-VARINIT+(*+2)))&0x8000)
3163  BD577F                  JSR VARINIT
                              ELSE
                              BSR VARINIT
                              ENDIF
                              ; L:0
                              ; P:882
                              ; L:1
                              ; P:0
                              ; L:2
                              ; P:0
                              ; L:3
                              ; P:0
                              ; L:4
                              ; P:0
                              ; L:5
                              ; P:0
                              ; L:6
                              ; P:0
                              ; L:7
                              ; P:0
                              ; L:8
                              IF (((128+cpu_fill_after-(*+2))|(127-cpu_fill_after+(*+2)))&0x8000)
                              JMP cpu_fill_after
                              ELSE
3166  200C                    BRA cpu_fill_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                             FILL AREA ON 6809                               *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
3168                  CPUFILL
3168  C100                    CMPB #$0
316A  2707                    BEQ CPUFILLL1X
316C                  CPUFILLL1
316C  5A                      DECB
316D  A785                    STA B,X
316F  C100                    CMPB #$0
3171  26F9                    BNE CPUFILLL1
3173                  CPUFILLL1X
3173  39                      RTS
3174                  cpu_fill_after
                      ; peephole(1): r314 (LDA,LDB)->(LDD)
                      ;       LDA #0
                      ;       LDB #$1e
3174  CC001E                  LDD #((0)&255)*256+(($1e)&255)
3177  31AB                    LEAY D,Y
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
3179  4F                      CLRA
317A  8E54DA                  LDX #_noun
317D  BD3168                  JSR CPUFILL
                              ; P:22
                              ; L:9
3180  4F                      CLRA
3181  B7E026                  STA _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3184  5F                      CLRB
3185  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
                      ; peephole(3): r759 [D=0](ADD)->(LDD)
                      ;       ADDD _Ttmp6
3188  FCE02D                  LDD _Ttmp6
318B  FDE02D                  STD _Ttmp6
318E  FCE02D                  LDD _Ttmp6
3191  C354DA                  ADDD #_noun
3194  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
3197  1F01                    TFR D,X
3199  E684                    LDB ,X
319B  F7E030                  STB _Ttmp7
319E  F6581C                  LDB _Tstr3
31A1  F7E036                  STB _Ttmp10
31A4  CC581C                  LDD #_Tstr3
31A7  FDE033                  STD _Ttmp9
31AA  7CE034                  INC _Ttmp9+1
31AD  2603                    BNE _label13
31AF  7CE033                  INC _Ttmp9
31B2                  _label13
                              IF (((128+dstring_after-(*+2))|(127-dstring_after+(*+2)))&0x8000)
31B2  7E32B4                  JMP dstring_after
                              ELSE
                              BRA dstring_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                DINAMYC STRING MANAGEMENT WITH GARBAGE COLLECTION            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; DSDEFINE(Y) -> B
31B5                  DSDEFINE
31B5  8D4F                    BSR   DSFINDFREE
31B7  8D62                    BSR   DSDESCRIPTOR
31B9  A6A0                    LDA   ,Y+
31BB  A784                    STA ,X 
31BD  10AF01                  STY 1,X 
31C0  86C0                    LDA #$C0
31C2  A703                    STA 3,X 
31C4  39                      RTS
31C5                  OUT_OF_MEMORY
31C5  20FE                    BRA   OUT_OF_MEMORY
                      ; DSFREE(B)
31C7                  DSFREE
31C7  8D52                    BSR   DSDESCRIPTOR
31C9  4F                      CLRA
31CA  A703                    STA 3,X 
31CC  A784                    STA ,X 
31CE  39                      RTS
                      ; DSWRITE(B)
31CF                  DSWRITE
31CF  8D4A                    BSR   DSDESCRIPTOR
31D1  A603                    LDA 3,X 
31D3  2A23                    BPL   DSWRITED
31D5  847F                    ANDA #$7F
31D7  A703                    STA 3,X 
31D9  A684                    LDA ,X 
31DB  8D46                    BSR   DSCHECKFREE
31DD                  DSWRITEOK
31DD  10AE01                  LDY 1,X 
31E0  3420                    PSHS Y
31E2  BD328C                  JSR   DSUSINGALLOC
31E5  3520                    PULS Y
31E7  EE01                    LDU 1,X 
31E9                  DSCOPY
31E9  A684                    LDA ,X 
                              
31EB                  DSWRITECOPY
31EB  270B                    BEQ DSWRITED
31ED  3404                    PSHS B
31EF                  DSWRITECOPYL
31EF  E6A0                    LDB   ,Y+
31F1  E7C0                    STB   ,U+
31F3  4A                      DECA
31F4  26F9                    BNE DSWRITECOPYL 
31F6  3584                    PULS  B,PC
31F8                  DSWRITED
31F8  39                      RTS
                      ; DSRESIZE(B,A)
31F9                  DSRESIZE
31F9  8D20                    BSR   DSDESCRIPTOR
31FB  A784                    STA ,X 
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #$0
31FD  2606                    BNE DSRESIZEDONE
31FF  A603                    LDA 3,X
3201  8A80                    ORA #$80
3203  A703                    STA 3,X
3205                  DSRESIZEDONE
3205  39                      RTS
                      ; DSFINDFREE() -> B
3206                  DSFINDFREE
3206  3402                    PSHS  A
3208  C601                    LDB   #1; // fix denote 0 as "unused slot"
320A                  DSFINDFREEL
320A  8D0F                    BSR   DSDESCRIPTOR
320C  A603                    LDA   3,X
320E  8440                    ANDA  #$40
3210  2707                    BEQ   DSFINDFREEN
3212  5C                      INCB
3213  C120                    CMPB  #MAXSTRINGS
3215  26F3                    BNE   DSFINDFREEL
3217  20AC                    BRA   OUT_OF_MEMORY   
3219                  DSFINDFREEN
3219  3582                    PULS  A,PC
                      ; DSDESCRIPTOR(B) -> X
321B                  DSDESCRIPTOR
321B  8E601C                  LDX   #DESCRIPTORS
321E  3A                      ABX
321F  3A                      ABX
3220  3A                      ABX
3221  3A                      ABX
3222  39                      RTS
                      ; DSCHECKFREE()
3223                  DSCHECKFREE
3223  3406                    PSHS  A,B
3225  B7322E                  STA   DSCHECKFREE2x
3228                  DSCHECKFREE2
3228  FC649C                  LDD   FREE_STRING
322E                  DSCHECKFREE2x SET *+3
322B  10830000                CMPD  #$0000
322F  2C04                    BGE   DSCHECKFREEOK
3231                  DSCHECKFREEKO
3231  8D04                    BSR   DSGC
3233  20F3                    BRA   DSCHECKFREE2
3235                  DSCHECKFREEOK
3235  3586                    PULS  A,B,PC
                      ; DSGC()
3237                  DSGC
3237  3410                    PSHS X
3239  CC01FF                  LDD #(max_free_string-1)
323C  FD649C                  STD FREE_STRING
323F  B632B3                  LDA USING
3242  2605                    BNE   DSGW
3244  CE629C                  LDU #TEMPORARY
3247  2003                    BRA   BSGCLOOP0
3249                  DSGW
3249  CE609C                  LDU #WORKING
324C                  BSGCLOOP0
324C  C601                    LDB #1
324E                  DSGCLOOP
324E  3406                    PSHS A,B
3250  8DC9                    BSR   DSDESCRIPTOR
3252  A603                    LDA 3,X 
3254  2B1A                    BMI   DSGCLOOP2
3256  8440                    ANDA #$40
3258  2714                    BEQ DSGCLOOP1
325A  A684                    LDA ,X 
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #$0
325C  2712                    BEQ DSGCLOOP3
325E  10AE01                  LDY 1,X 
3261  A684                    LDA ,X 
3263  8D27                    BSR   DSUSINGALLOC
3265  EE01                    LDU 1,X 
3267  A684                    LDA ,X 
3269  17FF7F                  LBSR  DSWRITECOPY
326C  2002                    BRA   DSGCLOOP3
326E                  DSGCLOOP1
                      ;    CLRA       (A already = 0 here)
326E  A784                    STA ,X 
                      ;    BRA   DSGCLOOP3
3270                  DSGCLOOP2
                          ; LDA #0
                          ; STA , X
3270                  DSGCLOOP3
3270  3506                    PULS A,B
3272  5C                      INCB
3273  C120                    CMPB #MAXSTRINGS
3275  26D7                    BNE DSGCLOOP
3277                  DSGCEND
3277  7332B3                  COM   USING
327A  3590                    PULS  X,PC
                      ;OUT_OF_MEMORY2
                      ;    SYNC
                      ;    BRA OUT_OF_MEMORY
                      ; DSALLOC(A) -> B
327C                  DSALLOC
327C  3402                    PSHS A
327E  8D86                    BSR   DSFINDFREE
3280  8D99                    BSR   DSDESCRIPTOR
3282  A603                    LDA 3,X 
3284  8A40                    ORA   #$40
3286  A703                    STA   3,X
3288  3502                    PULS A
328A  8D97                    BSR   DSCHECKFREE
328C                  DSALLOCOK
328C                  DSUSINGALLOC
328C  8D18                    BSR   DSUSING
                      ;    BRA   DSMALLOC
                      ; DSMALLOC(U,A,B)
328E                  DSMALLOC
328E  3440                    PSHS  U
3290  8D89                    BSR   DSDESCRIPTOR
3292  A784                    STA ,X 
3294  3406                    PSHS  D
3296  FC649C                  LDD FREE_STRING
3299  E0E4                    SUBB  ,S
329B  8200                    SBCA  #0
329D  FD649C                  STD   FREE_STRING
32A0  E362                    ADDD  2,S
32A2  ED01                    STD   1,X
                              
32A4  35C6                    PULS  U,D,PC
                      ; DSUSING() -> U
32A6                  DSUSING
32A6  7D32B3                  TST   USING
32A9  2704                    BEQ DSUSINGW
32AB  CE629C                  LDU #TEMPORARY
32AE  39                      RTS
32AF                  DSUSINGW
32AF  CE609C                  LDU #WORKING
32B2  39                      RTS
32B3                  USING 
32B3  00                      FCB   0
                              
32B4                  dstring_after
32B4  F6E030                  LDB _Ttmp7
32B7  BD31C7                  JSR DSFREE
32BA  B6E036                  LDA _Ttmp10
32BD  BD327C                  JSR DSALLOC
32C0  F7E030                  STB _Ttmp7
32C3  F6E030                  LDB _Ttmp7
32C6  BD321B                  JSR DSDESCRIPTOR
32C9  EC01                    LDD 1,X 
32CB  FDE039                  STD _Ttmp11
32CE  A684                    LDA ,X 
32D0  B7E03C                  STA _Ttmp12
                              IF (((128+duff_after-(*+2))|(127-duff_after+(*+2)))&0x8000)
32D3  7E3365                  JMP duff_after
                              ELSE
                              BRA duff_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                               DUFF'S DEVICE                                 *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
                          ; This is a special device that should transform the memory movement into
                          ; an optimized one. This is done by using some tricks and automodification
                          ; assembly code.
                      
32D6                  DUFFDEVICE
                      
                          ; First of all, we avoid to do anything if the memory to copy is equal
                          ; to zero. It means that nothing is needed to do, so move to the end
                          ; of the routine.
                      
32D6  10830000                CMPD #0
32DA  10270085                LBEQ DUFFDEVICEDONE
                      
                          ; Then, we disable, at startup, the 16 byte copy loop, by assigning
                          ; a couple of "NOP" (opcode $12) at the place of the branching.
                      
32DE  CE1212                  LDU #$1212
32E1  FF3348                  STU DUFFDEVICEL0C
                      
                          ; So, we must manage the fact that the size is odd: in this case,
                          ; the first byte will be copied directly. This is done by dividing
                          ; the size by 2 and taking apart the carry bit.
                      
32E4  44                      LSRA
32E5  56                      RORB
                      
                          ; CARRY CLEAR (BCC) -> Size was even
                          ; CARRY SET   (BCS) -> Size was odd
                      
32E6  2410                    BCC DUFFDEVICELX
                      
                          ; The size was odd, so copy the first byte and move ahead
                          ; source (Y) and destination (X) address.
                      
32E8  3406                    PSHS D
32EA  A6A0                    LDA ,Y +
32EC  A780                    STA ,X +
32EE  3506                    PULS D
                      
                          ; Again, we avoid to do anything if the memory to copy is equal
                          ; to zero. It means that nothing is needed to do more, so move 
                          ; to the end of the routine.
                      
32F0  10830000                CMPD #0
32F4  1027006B                LBEQ DUFFDEVICEDONE
                      
                          ; We reach this point having the original size halved. So now we
                          ; have to "unroll" the copy. Unrolling is a process that try to
                          ; transform a "generic" size copy in a "modulus" size copy.
                          ; We use a modulus of 16 bytes (using a 2 byte register for 8 times).
                          ; If the size is multiple of 16 bytes, the process is complete as
                          ; described. Otherwise, we are going to calculate the "rest" 
                          ; (modulus) of the copy. In order to make the process efficient, 
                          ; we will first calculate the remaining part (the "modulus", in fact) 
                          ; and then we will proceed to copy the rest as quickly as possible,
                          ;  which will be a multiple of 16 bytes,
                      
32F8                  DUFFDEVICELX
                      
                          ; Let's put up some numbers (we consider only even sizes):
                          ;
                          ; - (original) size:  2    (16 byte) blocks: 0     (rest) block size:  2 bytes
                          ; - "             ":  4    "              ": 0     "               ":  4 bytes
                          ; - "             ":  6    "              ": 0     "               ":  6 bytes
                          ; - "             ":  8    "              ": 0     "               ":  8 bytes
                          ; - "             ": 10    "              ": 0     "               ": 10 bytes
                          ; - "             ": 12    "              ": 0     "               ": 12 bytes
                          ; - "             ": 14    "              ": 0     "               ": 14 bytes
                          ; - "             ": 16    "              ": 1     "               ":  0 bytes
                          ; - "             ": 18    "              ": 1     "               ":  2 bytes
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ;
                          ; In D register we have the original size (divided by 2). So we have to 
                          ; calculate, first of all, the size of the rest block size.
                          ;
                          ; RBS = ( 2 * D ) MOD 16 = ( 2 * D ) MOD ( 2 * 8 ) = D MOD 8 = B AND #$7
                              
                          ; So we save the (halved) size to copy.
                      
32F8  3406                    PSHS D
                      
                          ; and calculate the block size.
                      
32FA  C407                    ANDB #7
32FC  58                      LSLB
                      
                          ; If it is zero, it means that no (rest) block size has to be managed.
                      
32FD  2718                    BEQ DUFFDEVICELXNR
                      
                          ; Othewise, we have to replace the standard block size (16 bytes) with
                          ; the rest block size. This is done by automodification technique.
                      
32FF  F7333D                  STB DUFFDEVICEL0A + 2
3302  F73340                  STB DUFFDEVICEL0B + 2
                      
                          ; Moreover, we must replace the subtraction terms for the loop counter.
                          ; Again, this is done by automodification technique. Note that the
                          ; loop counter thinks in terms of "2 bytes" so we must store the
                          ; half of the block size.
                      
3305  54                      LSRB
3306  F73343                  STB DUFFDEVICEL0D + 2
                      
                          ; Finally, we must calculate the address (offset) of the first command 
                          ; needed to copy the memory from source to destination. In order to 
                          ; understand which is the offset, we must take in count of this
                          ; numbers:
                          ;
                          ; - (original) size:  2    (rest) block size:  2 bytes  offset:     28
                          ; - "             ":  4    "               ":  4 bytes              24
                          ; - "             ":  6    "               ":  6 bytes              20
                          ; - "             ":  8    "               ":  8 bytes              16
                          ; - "             ": 10    "               ": 10 bytes              12
                          ; - "             ": 12    "               ": 12 bytes              08
                          ; - "             ": 14    "               ": 14 bytes              04
                          ;
                          ; 00: LDU 14, Y
                          ; 02: STU 14, X
                          ; 04: LDU 12, Y
                          ; 06: STU 12, X
                          ; .....
                          ; 24: LDU 2, Y
                          ; 26: STU 2, X
                          ; 28: LDU , Y
                          ; 30: STU , X
                          ;
                          ; The formula is 32 - 4 * ( rest block size / 2 ) = 32 - 4 * B
                      
3309  8604                    LDA #4
330B  3D                      MUL
330C  F73364                  STB DUFFDELTA
330F  C620                    LDB #32
3311  F03364                  SUBB DUFFDELTA
3314  F7331A                  STB DUFFDEVICEL0+1
                      
                          ; If we reach this point, nothing has to be customized since the
                          ; memory to copy is multiple of 16 bytes.
                      
3317                  DUFFDEVICELXNR
                              
                          ; Restore the (halved) size to copy.
                      
3317  3506                    PULS D
                      
                          ; Move to the first command of the unrolled loop.
                          ; This address could be different if (rest) block size.
                      
3319                  DUFFDEVICEL0
3319  2000                    BRA DUFFDEVICEL1
                      
                          ; This is the unrolled loop to copy 16 bytes at each round.
                          ; If the memory to copy is not multiple of 16 bytes, the
                          ; first time we will jump "inside" the loop, in order to copy
                          ; only a part of the block (< 16 bytes).
                      
331B                  DUFFDEVICEL1
331B  EE2E                    LDU 14,Y 
331D  EF0E                    STU 14,X 
331F  EE2C                    LDU 12,Y 
3321  EF0C                    STU 12,X 
3323  EE2A                    LDU 10,Y 
3325  EF0A                    STU 10,X 
3327  EE28                    LDU 8,Y 
3329  EF08                    STU 8,X 
332B  EE26                    LDU 6,Y 
332D  EF06                    STU 6,X 
332F  EE24                    LDU 4,Y 
3331  EF04                    STU 4,X 
3333  EE22                    LDU 2,Y 
3335  EF02                    STU 2,X 
3337  EEA4                    LDU ,Y 
3339  EF84                    STU ,X 
                      
                          ; Move the destination address ahead of the *actual*
                          ; block size. Normally it is 16 but not in the first
                          ; block copied, that is equal to the (rest) block size.
                      
333B                  DUFFDEVICEL0A
333B  308810                  LEAX 16,X 
                      
                          ; Move the source address ahead of the *actual*
                          ; block size. Normally it is 16 but not in the first
                          ; block copied, that is equal to the (rest) block size.
                      
333E                  DUFFDEVICEL0B
333E  31A810                  LEAY 16,Y
                      
                          ; Decrement the counter of the size of the block. Normally
                          ; it is 8 (2x8 = 16 bytes) but it could be lesser in case
                          ; of the first loop for a movement that is not multiple
                          ; of 16 bytes.
                      
3341                  DUFFDEVICEL0D
3341  830008                  SUBD #$8
                      
                          ; Finally, if D <= 0 we can exit the copy process.
                          ; Actually, we could just check for D = 0 but I am not
                          ; sure that the algorithm is corrected.
                      
3344  2B1D                    BMI DUFFDEVICEDONE
3346  271B                    BEQ DUFFDEVICEDONE
                      
                          ; We can reach this point in two different moments: 
                          ; on the first run of the loop, or the n-th one.
                          ; If this is the first time we reach this label,
                          ; the BRA DUFFDEVICEL1 has been replaced by NOP NOP:
                          ; this means that the execution will continue to the
                          ; following istructions. Otherwise, this will move
                          ; to the next round.
                      
3348                  DUFFDEVICEL0C
3348  20D1                    BRA DUFFDEVICEL1
                      
                          ; If we reached this line, we have copied the very
                          ; first block, that could be smaller than 16 bytes.
                          ; At this point, we must replace the block size 
                          ; with the standard block size (16 bytes)
                          ; This is done by automodification technique.
                              
334A  3406                    PSHS D
                      
                          ; Replace the displacement for each loop.
                      
334C  C610                    LDB #16
334E  F7333D                  STB DUFFDEVICEL0A+2
3351  F73340                  STB DUFFDEVICEL0B+2
                      
                          ; Replace the decrement for each loop.
                      
3354  C608                    LDB #8
3356  F73343                  STB DUFFDEVICEL0D+2
                      
                          ; Replace the NOPs with a jump to the first
                          ; instruction of the unrolled loop.
                      
3359  CC20D1                  LDD #$20D1
335C  FD3348                  STD DUFFDEVICEL0C
                      
335F  3506                    PULS D
                      
                          ; Finally, jump to the first instruction
                          ; of the unrolled loop.
                      
3361  20B8                    BRA DUFFDEVICEL1
                      
3363                  DUFFDEVICEDONE
3363  39                      RTS
                      
3364                  DUFFDELTA
3364  00                      FCB $0
3365                  duff_after
                              IF (((128+cpu_mem_move_after-(*+2))|(127-cpu_mem_move_after+(*+2)))&0x8000)
                              JMP cpu_mem_move_after
                              ELSE
3365  2000                    BRA cpu_mem_move_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ; CPUMEMMOVE
                      ;     CMPU #0
                      ;     BEQ CPUMEMMOVEDONE
                      ; CPUMEMMOVEL1
                      ;     LDA ,Y+
                      ;     STA ,X+
                      ;     LEAU -1,U
                      ;     CMPU #$0
                      ;     BNE CPUMEMMOVEL1
                      ; CPUMEMMOVEDONE
                      ;     RTS
3367                  cpu_mem_move_after
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
3367  4F                      CLRA
3368  F6E036                  LDB _Ttmp10
336B  10BEE033                LDY _Ttmp9
336F  BEE039                  LDX _Ttmp11
3372  BD32D6                  JSR DUFFDEVICE
3375  F6E030                  LDB _Ttmp7
3378  E79FE02D                STB [_Ttmp6]
337C  4F                      CLRA
337D  B7E030                  STA _Ttmp7
                              ; P:300
                              ; L:10
3380  C601                    LDB #$01
3382  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3385  5F                      CLRB
3386  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0001
                      ; peephole(3): r786 [B=0](LDB#1)->(INCB)
                      ;       LDB #$01
3389  5C                      INCB
338A  F3E02D                  ADDD _Ttmp6
338D  FDE02D                  STD _Ttmp6
3390  FCE02D                  LDD _Ttmp6
3393  C354DA                  ADDD #_noun
3396  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
3399  1F01                    TFR D,X
339B  E684                    LDB ,X
339D  F7E03E                  STB _Ttmp16
33A0  F65816                  LDB _Tstr14
33A3  F7E036                  STB _Ttmp10
33A6  CC5816                  LDD #_Tstr14
33A9  FDE033                  STD _Ttmp9
33AC  7CE034                  INC _Ttmp9+1
33AF  2603                    BNE _label18
33B1  7CE033                  INC _Ttmp9
33B4                  _label18
33B4  F6E03E                  LDB _Ttmp16
33B7  BD31C7                  JSR DSFREE
33BA  B6E036                  LDA _Ttmp10
33BD  BD327C                  JSR DSALLOC
33C0  F7E03E                  STB _Ttmp16
33C3  F6E03E                  LDB _Ttmp16
33C6  BD321B                  JSR DSDESCRIPTOR
33C9  EC01                    LDD 1,X 
33CB  FDE039                  STD _Ttmp11
33CE  A684                    LDA ,X 
33D0  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
33D3  4F                      CLRA
33D4  F6E036                  LDB _Ttmp10
33D7  10BEE033                LDY _Ttmp9
33DB  BEE039                  LDX _Ttmp11
33DE  BD32D6                  JSR DUFFDEVICE
33E1  F6E03E                  LDB _Ttmp16
33E4  E79FE02D                STB [_Ttmp6]
33E8  4F                      CLRA
33E9  B7E03E                  STA _Ttmp16
                              ; P:40
                              ; L:11
33EC  C602                    LDB #$02
33EE  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
33F1  5F                      CLRB
33F2  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0002
33F5  C602                    LDB #$02
33F7  F3E02D                  ADDD _Ttmp6
33FA  FDE02D                  STD _Ttmp6
33FD  FCE02D                  LDD _Ttmp6
3400  C354DA                  ADDD #_noun
3403  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
3406  1F01                    TFR D,X
3408  E684                    LDB ,X
340A  F7E040                  STB _Ttmp21
340D  F65811                  LDB _Tstr19
3410  F7E036                  STB _Ttmp10
3413  CC5811                  LDD #_Tstr19
3416  FDE033                  STD _Ttmp9
3419  7CE034                  INC _Ttmp9+1
341C  2603                    BNE _label23
341E  7CE033                  INC _Ttmp9
3421                  _label23
3421  F6E040                  LDB _Ttmp21
3424  BD31C7                  JSR DSFREE
3427  B6E036                  LDA _Ttmp10
342A  BD327C                  JSR DSALLOC
342D  F7E040                  STB _Ttmp21
3430  F6E040                  LDB _Ttmp21
3433  BD321B                  JSR DSDESCRIPTOR
3436  EC01                    LDD 1,X 
3438  FDE039                  STD _Ttmp11
343B  A684                    LDA ,X 
343D  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
3440  4F                      CLRA
3441  F6E036                  LDB _Ttmp10
3444  10BEE033                LDY _Ttmp9
3448  BEE039                  LDX _Ttmp11
344B  BD32D6                  JSR DUFFDEVICE
344E  F6E040                  LDB _Ttmp21
3451  E79FE02D                STB [_Ttmp6]
3455  4F                      CLRA
3456  B7E040                  STA _Ttmp21
                              ; P:40
                              ; L:12
3459  C603                    LDB #$03
345B  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
345E  5F                      CLRB
345F  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0003
3462  C603                    LDB #$03
3464  F3E02D                  ADDD _Ttmp6
3467  FDE02D                  STD _Ttmp6
346A  FCE02D                  LDD _Ttmp6
346D  C354DA                  ADDD #_noun
3470  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
3473  1F01                    TFR D,X
3475  E684                    LDB ,X
3477  F7E042                  STB _Ttmp26
347A  F6580C                  LDB _Tstr24
347D  F7E036                  STB _Ttmp10
3480  CC580C                  LDD #_Tstr24
3483  FDE033                  STD _Ttmp9
3486  7CE034                  INC _Ttmp9+1
3489  2603                    BNE _label28
348B  7CE033                  INC _Ttmp9
348E                  _label28
348E  F6E042                  LDB _Ttmp26
3491  BD31C7                  JSR DSFREE
3494  B6E036                  LDA _Ttmp10
3497  BD327C                  JSR DSALLOC
349A  F7E042                  STB _Ttmp26
349D  F6E042                  LDB _Ttmp26
34A0  BD321B                  JSR DSDESCRIPTOR
34A3  EC01                    LDD 1,X 
34A5  FDE039                  STD _Ttmp11
34A8  A684                    LDA ,X 
34AA  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
34AD  4F                      CLRA
34AE  F6E036                  LDB _Ttmp10
34B1  10BEE033                LDY _Ttmp9
34B5  BEE039                  LDX _Ttmp11
34B8  BD32D6                  JSR DUFFDEVICE
34BB  F6E042                  LDB _Ttmp26
34BE  E79FE02D                STB [_Ttmp6]
34C2  4F                      CLRA
34C3  B7E042                  STA _Ttmp26
                              ; P:40
                              ; L:13
34C6  C604                    LDB #$04
34C8  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
34CB  5F                      CLRB
34CC  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0004
34CF  C604                    LDB #$04
34D1  F3E02D                  ADDD _Ttmp6
34D4  FDE02D                  STD _Ttmp6
34D7  FCE02D                  LDD _Ttmp6
34DA  C354DA                  ADDD #_noun
34DD  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
34E0  1F01                    TFR D,X
34E2  E684                    LDB ,X
34E4  F7E044                  STB _Ttmp31
34E7  F65809                  LDB _Tstr29
34EA  F7E036                  STB _Ttmp10
34ED  CC5809                  LDD #_Tstr29
34F0  FDE033                  STD _Ttmp9
34F3  7CE034                  INC _Ttmp9+1
34F6  2603                    BNE _label33
34F8  7CE033                  INC _Ttmp9
34FB                  _label33
34FB  F6E044                  LDB _Ttmp31
34FE  BD31C7                  JSR DSFREE
3501  B6E036                  LDA _Ttmp10
3504  BD327C                  JSR DSALLOC
3507  F7E044                  STB _Ttmp31
350A  F6E044                  LDB _Ttmp31
350D  BD321B                  JSR DSDESCRIPTOR
3510  EC01                    LDD 1,X 
3512  FDE039                  STD _Ttmp11
3515  A684                    LDA ,X 
3517  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
351A  4F                      CLRA
351B  F6E036                  LDB _Ttmp10
351E  10BEE033                LDY _Ttmp9
3522  BEE039                  LDX _Ttmp11
3525  BD32D6                  JSR DUFFDEVICE
3528  F6E044                  LDB _Ttmp31
352B  E79FE02D                STB [_Ttmp6]
352F  4F                      CLRA
3530  B7E044                  STA _Ttmp31
                              ; P:40
                              ; L:14
3533  C605                    LDB #$05
3535  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3538  5F                      CLRB
3539  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0005
353C  C605                    LDB #$05
353E  F3E02D                  ADDD _Ttmp6
3541  FDE02D                  STD _Ttmp6
3544  FCE02D                  LDD _Ttmp6
3547  C354DA                  ADDD #_noun
354A  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
354D  1F01                    TFR D,X
354F  E684                    LDB ,X
3551  F7E046                  STB _Ttmp36
3554  F65804                  LDB _Tstr34
3557  F7E036                  STB _Ttmp10
355A  CC5804                  LDD #_Tstr34
355D  FDE033                  STD _Ttmp9
3560  7CE034                  INC _Ttmp9+1
3563  2603                    BNE _label38
3565  7CE033                  INC _Ttmp9
3568                  _label38
3568  F6E046                  LDB _Ttmp36
356B  BD31C7                  JSR DSFREE
356E  B6E036                  LDA _Ttmp10
3571  BD327C                  JSR DSALLOC
3574  F7E046                  STB _Ttmp36
3577  F6E046                  LDB _Ttmp36
357A  BD321B                  JSR DSDESCRIPTOR
357D  EC01                    LDD 1,X 
357F  FDE039                  STD _Ttmp11
3582  A684                    LDA ,X 
3584  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
3587  4F                      CLRA
3588  F6E036                  LDB _Ttmp10
358B  10BEE033                LDY _Ttmp9
358F  BEE039                  LDX _Ttmp11
3592  BD32D6                  JSR DUFFDEVICE
3595  F6E046                  LDB _Ttmp36
3598  E79FE02D                STB [_Ttmp6]
359C  4F                      CLRA
359D  B7E046                  STA _Ttmp36
                              ; P:40
                              ; L:15
35A0  C606                    LDB #$06
35A2  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
35A5  5F                      CLRB
35A6  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0006
35A9  C606                    LDB #$06
35AB  F3E02D                  ADDD _Ttmp6
35AE  FDE02D                  STD _Ttmp6
35B1  FCE02D                  LDD _Ttmp6
35B4  C354DA                  ADDD #_noun
35B7  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
35BA  1F01                    TFR D,X
35BC  E684                    LDB ,X
35BE  F7E048                  STB _Ttmp41
35C1  F657FD                  LDB _Tstr39
35C4  F7E036                  STB _Ttmp10
35C7  CC57FD                  LDD #_Tstr39
35CA  FDE033                  STD _Ttmp9
35CD  7CE034                  INC _Ttmp9+1
35D0  2603                    BNE _label43
35D2  7CE033                  INC _Ttmp9
35D5                  _label43
35D5  F6E048                  LDB _Ttmp41
35D8  BD31C7                  JSR DSFREE
35DB  B6E036                  LDA _Ttmp10
35DE  BD327C                  JSR DSALLOC
35E1  F7E048                  STB _Ttmp41
35E4  F6E048                  LDB _Ttmp41
35E7  BD321B                  JSR DSDESCRIPTOR
35EA  EC01                    LDD 1,X 
35EC  FDE039                  STD _Ttmp11
35EF  A684                    LDA ,X 
35F1  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
35F4  4F                      CLRA
35F5  F6E036                  LDB _Ttmp10
35F8  10BEE033                LDY _Ttmp9
35FC  BEE039                  LDX _Ttmp11
35FF  BD32D6                  JSR DUFFDEVICE
3602  F6E048                  LDB _Ttmp41
3605  E79FE02D                STB [_Ttmp6]
3609  4F                      CLRA
360A  B7E048                  STA _Ttmp41
                              ; P:40
                              ; L:16
                              ; P:0
                              ; L:17
                      ; peephole(1): r314 (LDA,LDB)->(LDD)
                      ;       LDA #0
                      ;       LDB #$1e
360D  CC001E                  LDD #((0)&255)*256+(($1e)&255)
3610  31AB                    LEAY D,Y
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
3612  4F                      CLRA
3613  8E54F8                  LDX #_verb
3616  BD3168                  JSR CPUFILL
                              ; P:6
                              ; L:18
3619  4F                      CLRA
361A  B7E026                  STA _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
361D  5F                      CLRB
361E  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
                      ; peephole(3): r759 [D=0](ADD)->(LDD)
                      ;       ADDD _Ttmp6
3621  FCE02D                  LDD _Ttmp6
3624  FDE02D                  STD _Ttmp6
3627  FCE02D                  LDD _Ttmp6
362A  C354F8                  ADDD #_verb
362D  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
3630  1F01                    TFR D,X
3632  E684                    LDB ,X
3634  F7E068                  STB _Ttmp46
3637  F657FA                  LDB _Tstr44
363A  F7E036                  STB _Ttmp10
363D  CC57FA                  LDD #_Tstr44
3640  FDE033                  STD _Ttmp9
3643  7CE034                  INC _Ttmp9+1
3646  2603                    BNE _label48
3648  7CE033                  INC _Ttmp9
364B                  _label48
364B  F6E068                  LDB _Ttmp46
364E  BD31C7                  JSR DSFREE
3651  B6E036                  LDA _Ttmp10
3654  BD327C                  JSR DSALLOC
3657  F7E068                  STB _Ttmp46
365A  F6E068                  LDB _Ttmp46
365D  BD321B                  JSR DSDESCRIPTOR
3660  EC01                    LDD 1,X 
3662  FDE039                  STD _Ttmp11
3665  A684                    LDA ,X 
3667  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
366A  4F                      CLRA
366B  F6E036                  LDB _Ttmp10
366E  10BEE033                LDY _Ttmp9
3672  BEE039                  LDX _Ttmp11
3675  BD32D6                  JSR DUFFDEVICE
3678  F6E068                  LDB _Ttmp46
367B  E79FE02D                STB [_Ttmp6]
367F  4F                      CLRA
3680  B7E068                  STA _Ttmp46
                              ; P:40
                              ; L:19
3683  C601                    LDB #$01
3685  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3688  5F                      CLRB
3689  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0001
                      ; peephole(3): r786 [B=0](LDB#1)->(INCB)
                      ;       LDB #$01
368C  5C                      INCB
368D  F3E02D                  ADDD _Ttmp6
3690  FDE02D                  STD _Ttmp6
3693  FCE02D                  LDD _Ttmp6
3696  C354F8                  ADDD #_verb
3699  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
369C  1F01                    TFR D,X
369E  E684                    LDB ,X
36A0  F7E06A                  STB _Ttmp51
36A3  F657F6                  LDB _Tstr49
36A6  F7E036                  STB _Ttmp10
36A9  CC57F6                  LDD #_Tstr49
36AC  FDE033                  STD _Ttmp9
36AF  7CE034                  INC _Ttmp9+1
36B2  2603                    BNE _label53
36B4  7CE033                  INC _Ttmp9
36B7                  _label53
36B7  F6E06A                  LDB _Ttmp51
36BA  BD31C7                  JSR DSFREE
36BD  B6E036                  LDA _Ttmp10
36C0  BD327C                  JSR DSALLOC
36C3  F7E06A                  STB _Ttmp51
36C6  F6E06A                  LDB _Ttmp51
36C9  BD321B                  JSR DSDESCRIPTOR
36CC  EC01                    LDD 1,X 
36CE  FDE039                  STD _Ttmp11
36D1  A684                    LDA ,X 
36D3  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
36D6  4F                      CLRA
36D7  F6E036                  LDB _Ttmp10
36DA  10BEE033                LDY _Ttmp9
36DE  BEE039                  LDX _Ttmp11
36E1  BD32D6                  JSR DUFFDEVICE
36E4  F6E06A                  LDB _Ttmp51
36E7  E79FE02D                STB [_Ttmp6]
36EB  4F                      CLRA
36EC  B7E06A                  STA _Ttmp51
                              ; P:40
                              ; L:20
36EF  C602                    LDB #$02
36F1  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
36F4  5F                      CLRB
36F5  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0002
36F8  C602                    LDB #$02
36FA  F3E02D                  ADDD _Ttmp6
36FD  FDE02D                  STD _Ttmp6
3700  FCE02D                  LDD _Ttmp6
3703  C354F8                  ADDD #_verb
3706  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
3709  1F01                    TFR D,X
370B  E684                    LDB ,X
370D  F7E06C                  STB _Ttmp56
3710  F657F1                  LDB _Tstr54
3713  F7E036                  STB _Ttmp10
3716  CC57F1                  LDD #_Tstr54
3719  FDE033                  STD _Ttmp9
371C  7CE034                  INC _Ttmp9+1
371F  2603                    BNE _label58
3721  7CE033                  INC _Ttmp9
3724                  _label58
3724  F6E06C                  LDB _Ttmp56
3727  BD31C7                  JSR DSFREE
372A  B6E036                  LDA _Ttmp10
372D  BD327C                  JSR DSALLOC
3730  F7E06C                  STB _Ttmp56
3733  F6E06C                  LDB _Ttmp56
3736  BD321B                  JSR DSDESCRIPTOR
3739  EC01                    LDD 1,X 
373B  FDE039                  STD _Ttmp11
373E  A684                    LDA ,X 
3740  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
3743  4F                      CLRA
3744  F6E036                  LDB _Ttmp10
3747  10BEE033                LDY _Ttmp9
374B  BEE039                  LDX _Ttmp11
374E  BD32D6                  JSR DUFFDEVICE
3751  F6E06C                  LDB _Ttmp56
3754  E79FE02D                STB [_Ttmp6]
3758  4F                      CLRA
3759  B7E06C                  STA _Ttmp56
                              ; P:40
                              ; L:21
375C  C603                    LDB #$03
375E  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3761  5F                      CLRB
3762  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0003
3765  C603                    LDB #$03
3767  F3E02D                  ADDD _Ttmp6
376A  FDE02D                  STD _Ttmp6
376D  FCE02D                  LDD _Ttmp6
3770  C354F8                  ADDD #_verb
3773  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
3776  1F01                    TFR D,X
3778  E684                    LDB ,X
377A  F7E06E                  STB _Ttmp61
377D  F657EB                  LDB _Tstr59
3780  F7E036                  STB _Ttmp10
3783  CC57EB                  LDD #_Tstr59
3786  FDE033                  STD _Ttmp9
3789  7CE034                  INC _Ttmp9+1
378C  2603                    BNE _label63
378E  7CE033                  INC _Ttmp9
3791                  _label63
3791  F6E06E                  LDB _Ttmp61
3794  BD31C7                  JSR DSFREE
3797  B6E036                  LDA _Ttmp10
379A  BD327C                  JSR DSALLOC
379D  F7E06E                  STB _Ttmp61
37A0  F6E06E                  LDB _Ttmp61
37A3  BD321B                  JSR DSDESCRIPTOR
37A6  EC01                    LDD 1,X 
37A8  FDE039                  STD _Ttmp11
37AB  A684                    LDA ,X 
37AD  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
37B0  4F                      CLRA
37B1  F6E036                  LDB _Ttmp10
37B4  10BEE033                LDY _Ttmp9
37B8  BEE039                  LDX _Ttmp11
37BB  BD32D6                  JSR DUFFDEVICE
37BE  F6E06E                  LDB _Ttmp61
37C1  E79FE02D                STB [_Ttmp6]
37C5  4F                      CLRA
37C6  B7E06E                  STA _Ttmp61
                              ; P:40
                              ; L:22
37C9  C604                    LDB #$04
37CB  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
37CE  5F                      CLRB
37CF  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0004
37D2  C604                    LDB #$04
37D4  F3E02D                  ADDD _Ttmp6
37D7  FDE02D                  STD _Ttmp6
37DA  FCE02D                  LDD _Ttmp6
37DD  C354F8                  ADDD #_verb
37E0  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
37E3  1F01                    TFR D,X
37E5  E684                    LDB ,X
37E7  F7E070                  STB _Ttmp66
37EA  F657E5                  LDB _Tstr64
37ED  F7E036                  STB _Ttmp10
37F0  CC57E5                  LDD #_Tstr64
37F3  FDE033                  STD _Ttmp9
37F6  7CE034                  INC _Ttmp9+1
37F9  2603                    BNE _label68
37FB  7CE033                  INC _Ttmp9
37FE                  _label68
37FE  F6E070                  LDB _Ttmp66
3801  BD31C7                  JSR DSFREE
3804  B6E036                  LDA _Ttmp10
3807  BD327C                  JSR DSALLOC
380A  F7E070                  STB _Ttmp66
380D  F6E070                  LDB _Ttmp66
3810  BD321B                  JSR DSDESCRIPTOR
3813  EC01                    LDD 1,X 
3815  FDE039                  STD _Ttmp11
3818  A684                    LDA ,X 
381A  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
381D  4F                      CLRA
381E  F6E036                  LDB _Ttmp10
3821  10BEE033                LDY _Ttmp9
3825  BEE039                  LDX _Ttmp11
3828  BD32D6                  JSR DUFFDEVICE
382B  F6E070                  LDB _Ttmp66
382E  E79FE02D                STB [_Ttmp6]
3832  4F                      CLRA
3833  B7E070                  STA _Ttmp66
                              ; P:40
                              ; L:23
                              ; P:0
                              ; L:24
                              ; P:0
                              ; L:25
                              ; P:0
                              ; L:26
                              ; P:0
                              ; L:27
3836  C615                    LDB #$15
3838  F7E026                  STB _Ttmp2
383B  F6E026                  LDB _Ttmp2
383E  F7E071                  STB _xloc
                              ; P:4
                              ; L:28
3841  F6E072                  LDB _batt
3844  BD31C7                  JSR DSFREE
3847  108E57E0                LDY #_Tstr69
384B  BD31B5                  JSR DSDEFINE
384E  F7E072                  STB _batt
                              ; P:5
                              ; L:29
                              ; P:0
                              ; L:30
3851  CCC000                  LDD #$c000
3854  B7FF9D                  STA GIMEVOFF1
3857  F7FF9E                  STB GIMEVOFF0
385A  7FFF9F                  CLR GIMEHOFF
385D  B6FF98                  LDA GIMEVIDM
3860  8408                    ANDA #$8
3862  8A81                    ORA #$81
3864  B7FF98                  STA GIMEVIDM
3867  B72D68                  STA GIMEVIDMSHADOW
386A  863E                    LDA #$3e
386C  B7FF99                  STA GIMEVIDR
386F  4F                      CLRA
3870  B72D69                  STA GIMEMMUSTART
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$6000
3873  8660                    LDA #$60
3875  FD2C0C                  STD BITMAPADDRESS
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$6000
3878  8660                    LDA #$60
387A  FD3146                  STD TEXTADDRESS
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
387D  4F                      CLRA
387E  FD2D42                  STD ORIGINX
                      ; peephole(1): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
                      ; peephole(3): r738 [A=0](CLRA)->()
                      ;       CLRA
3881  FD2D44                  STD ORIGINY
3884  CC0140                  LDD #$0140
3887  FD30E4                  STD CURRENTWIDTH
388A  CC00C8                  LDD #$00c8
388D  FD30EA                  STD CURRENTHEIGHT
3890  FC30E4                  LDD CURRENTWIDTH
3893  FD2D46                  STD RESOLUTIONX
3896  FC30EA                  LDD CURRENTHEIGHT
3899  FD2D48                  STD RESOLUTIONY
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB #$80
                      ; peephole(5): unread1
                      ;       STB CURRENTTILES
389C  C628                    LDB #$28
389E  F7313D                  STB CURRENTTILESWIDTH
38A1  C619                    LDB #$19
38A3  F7313F                  STB CURRENTTILESHEIGHT
38A6  C610                    LDB #$10
38A8  F72D67                  STB PALETTELIMIT
38AB  CC7D00                  LDD #$7d00
38AE  FD3A68                  STD CURRENTFRAMESIZE
38B1  C6A0                    LDB #$a0
38B3  F73BE0                  STB CURRENTSL
                              IF (((128+GIMERESETPALETTE-(*+2))|(127-GIMERESETPALETTE+(*+2)))&0x8000)
38B6  BD2F7A                  JSR GIMERESETPALETTE
                              ELSE
                              BSR GIMERESETPALETTE
                              ENDIF
                              IF (((128+GIMERAM-(*+2))|(127-GIMERAM+(*+2)))&0x8000)
38B9  BD2D85                  JSR GIMERAM
                              ELSE
                              BSR GIMERAM
                              ENDIF
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$f0
38BC  CC00F0                  LDD #$00f0
38BF  B7311B                  STA CURRENTTILEMODE
                              ; P:55
                              ; L:31
                      ; peephole(9): direct-page1
                      ;       STB CURRENTMODE
38C2  D7F0                    STB <CURRENTMODE
                      ;       CLRA
38C4  BE30E4                  LDX CURRENTWIDTH
38C7  BFE075                  STX _Ttmp71
38CA  FCE075                  LDD _Ttmp71
38CD  FDE077                  STD _w
                              ; L:31
38D0  BE30EA                  LDX CURRENTHEIGHT
38D3  BFE075                  STX _Ttmp71
38D6  FCE075                  LDD _Ttmp71
38D9  FDE079                  STD _h
                              ; L:31
38DC  C610                    LDB #$10
38DE  F7E07C                  STB _Ttmp74
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp74
                      ; peephole(5): unread1
                      ;       STB _c
                              ; P:12
                              ; L:32
                              ; P:0
                              ; L:33
38E1  C602                    LDB #$02
38E3  F7E026                  STB _Ttmp2
38E6  CC0000                  LDD #$0000
38E9  FDE075                  STD _Ttmp71
38EC  F6E026                  LDB _Ttmp2
38EF  F7E076                  STB _Ttmp71+1
                              IF (((128+cpu_math_div_16bit_to_16bit_after-(*+2))|(127-cpu_math_div_16bit_to_16bit_after+(*+2)))&0x8000)
38F2  7E3994                  JMP cpu_math_div_16bit_to_16bit_after
                              ELSE
                              BRA cpu_math_div_16bit_to_16bit_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ; unsigned division
                      ; D=D/X X=D.mod.X
                      ; http://www.logicielsmoto.com/phpBB/viewtopic.php?p=1090#p1090
38F5                  CPUMATHDIV16BITTO16BIT_fast
38F5  3410                    PSHS  X
38F7  E7E4                    STB   ,S
38F9  E661                    LDB   1,S
38FB  5A                      DECB
38FC  C501                    BITB  #1
38FE  2606                    BNE   CPUMATHDIV16BITTO16BIT_remainder
                              
3900  E6E4                    LDB   ,S
3902                  CPUMATHDIV16BITTO16BIT_slow
3902  EDE4                    STD   ,S
3904  203F                    BRA   CPUMATHDIV16BITTO16BIT0  
3906                  CPUMATHDIV16BITTO16BIT_remainder
3906  E4E4                    ANDB  ,S
3908  E761                    STB   1,S   
390A  E6E4                    LDB   ,S
390C  6FE4                    CLR   ,S
390E  6E99391C                JMP   [CPUMATHDIV16BITTO16BIT_tab-2,X]
3912                  CPUMATHDIV16BITTO16BIT_fast32
3912  44                      LSRA
3913  56                      RORB
3914                  CPUMATHDIV16BITTO16BIT_fast16    
3914  44                      LSRA
3915  56                      RORB
3916                  CPUMATHDIV16BITTO16BIT_fast8    
3916  44                      LSRA
3917  56                      RORB
3918                  CPUMATHDIV16BITTO16BIT_fast4    
3918  44                      LSRA
3919  56                      RORB
391A                  CPUMATHDIV16BITTO16BIT_fast2    
391A  44                      LSRA
391B  56                      RORB
391C  3590                    PULS  X,PC
391E                  CPUMATHDIV16BITTO16BIT_tab
391E  391A                    FDB   CPUMATHDIV16BITTO16BIT_fast2
3920  3918                    FDB   CPUMATHDIV16BITTO16BIT_fast4
3922  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
3924  3916                    FDB   CPUMATHDIV16BITTO16BIT_fast8
3926  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
3928  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
392A  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
392C  3914                    FDB   CPUMATHDIV16BITTO16BIT_fast16
392E  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
3930  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
3932  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
3934  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
3936  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
3938  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
393A  3902                    FDB   CPUMATHDIV16BITTO16BIT_slow
393C  3912                    FDB   CPUMATHDIV16BITTO16BIT_fast32
                              
393E                  CPUMATHDIV16BITTO16BIT
393E  8C0020                  CMPX  #32
3941  23B2                    BLS   CPUMATHDIV16BITTO16BIT_fast
                              
3943  3406                    PSHS  D
3945                  CPUMATHDIV16BITTO16BIT0
3945  BF395F                  STX   CPUMATHDIV16BITTO16BITL2-2
3948  BF395A                  STX   CPUMATHDIV16BITTO16BITL2-7
394B  3161                    LEAY  1,S
394D  4F                      CLRA
394E  5F                      CLRB
394F  8E0010                  LDX   #16
3952                  CPUMATHDIV16BITTO16BITL1    
3952  69A4                    ROL   ,Y
3954  69E4                    ROL   ,S
3956  59                      ROLB
3957  49                      ROLA
3958  10835555                CMPD  #$5555
395C  2503                    BCS   CPUMATHDIV16BITTO16BITL2
395E  835555                  SUBD  #$5555
3961                  CPUMATHDIV16BITTO16BITL2
3961  301F                    LEAX  -1,X
3963  26ED                    BNE CPUMATHDIV16BITTO16BITL1
3965  1F01                    TFR   D,X
3967  3506                    PULS  D
3969  59                      ROLB
396A  49                      ROLA
396B  53                      COMB
396C  43                      COMA
396D  39                      RTS
396E                  CPUMATHDIV16BITTO16BIT_SIGNED
396E  DD14                    STD   <MATHPTR0
3970  9F16                    STX   <MATHPTR2
3972  9816                    EORA  <MATHPTR2 ; compute sign of result
3974  9719                    STA   <MATHPTR5 ; store it on stack
3976  CC0000                  LDD   #0        ; D=-X
3979  9316                    SUBD  <MATHPTR2 ; X < 0 ?
397B  2B02                    BMI   CPUMATHDIV16BITTO16BIT_SIGNED1
397D  DD16                    STD   <MATHPTR2 ; yes ==> repmace with -X
397F                  CPUMATHDIV16BITTO16BIT_SIGNED1
397F  9E16                    LDX   <MATHPTR2
3981  DC14                    LDD   <MATHPTR0 ; D < 0 ?
3983  2A04                    BPL   CPUMATHDIV16BITTO16BIT_SIGNED2
3985  40                      NEGA            ; yes => negate D
3986  50                      NEGB
3987  8200                    SBCA  #0
3989                  CPUMATHDIV16BITTO16BIT_SIGNED2    
3989  8DB3                    BSR   CPUMATHDIV16BITTO16BIT
398B  0D19                    TST   <MATHPTR5 ; get sign of result
398D  2A04                    BPL   CPUMATHDIV16BITTO16BIT_SIGNED3    
398F  40                      NEGA            ; negative ? 
3990  50                      NEGB            ; yes => negate D
3991  8200                    SBCA  #0
3993                  CPUMATHDIV16BITTO16BIT_SIGNED3
3993  39                      RTS
3994                  cpu_math_div_16bit_to_16bit_after
3994  FCE077                  LDD _w
3997  BEE075                  LDX _Ttmp71
399A  BD396E                  JSR CPUMATHDIV16BITTO16BIT_SIGNED
399D  BFE084                  STX _Ttmp77
39A0  FDE080                  STD _Ttmp76
39A3  FCE080                  LDD _Ttmp76
39A6  FDE086                  STD _mid1
                              ; P:126
                              ; L:34
39A9  C602                    LDB #$02
39AB  F7E026                  STB _Ttmp2
39AE  CC0000                  LDD #$0000
39B1  FDE075                  STD _Ttmp71
39B4  F6E026                  LDB _Ttmp2
39B7  F7E076                  STB _Ttmp71+1
39BA  FCE079                  LDD _h
39BD  BEE075                  LDX _Ttmp71
39C0  BD396E                  JSR CPUMATHDIV16BITTO16BIT_SIGNED
39C3  BFE084                  STX _Ttmp77
39C6  FDE080                  STD _Ttmp76
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDD _Ttmp76
                      ; peephole(5): unread1
                      ;       STD _mid2
                              ; P:13
                              ; L:35
                              ; P:0
                              ; L:36
39C9  CC0133                  LDD #$0133
39CC  108E564A                LDY #_Timg81
39D0  8E5516                  LDX #_keyimage
39D3  BD32D6                  JSR DUFFDEVICE
                              ; P:4
                              ; L:37
                              ; P:0
                              ; L:38
                              ; P:0
                              ; L:39
39D6                  _label82
39D6  FCE08C                  LDD _finished
39D9  43                      COMA
39DA  53                      COMB
39DB  FDE029                  STD _Ttmp5
                      ; peephole(1): r489 (STD,LDB+1)->()
                      ;       LDB _Ttmp5+1
39DE  F7E026                  STB _Ttmp2
39E1  F6E026                  LDB _Ttmp2
                              IF (((128+_label82bis-(*+2))|(127-_label82bis+(*+2)))&0x8000)
39E4  10271AF0                LBEQ _label82bis
                              ELSE
                              BEQ _label82bis
                              ENDIF
                              ; P:13
                              ; L:40
39E8  4F                      CLRA
39E9  B7E026                  STA _Ttmp2
                      ; peephole(3): r756 [A=0](STA*,LDB*)->(CLRB)
                      ;       LDB _Ttmp2
39EC  5F                      CLRB
39ED  F7E001                  STB _PAPER
                              IF (((128+clsGraphic_after-(*+2))|(127-clsGraphic_after+(*+2)))&0x8000)
39F0  7E3A80                  JMP clsGraphic_after
                              ELSE
                              BRA clsGraphic_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       CLEAR SCREEN ROUTINE FOR GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
39F3                  CLSG
39F3  B6311B                  LDA CURRENTTILEMODE
39F6  2701                    BEQ CLSGX
39F8  39                      RTS
39F9                  CLSGX
39F9  3476                    PSHS A,B,X,Y,U
                          ; The CLS command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
39FB  BD2DFD                  JSR GIMEBANKVIDEO
39FE  F6E001                  LDB _PAPER
3A01  BD2F6F                  JSR GIMESELECTPALETTE
3A04  B70045                  STA PLOTC
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
3A07  96F0                    LDA <CURRENTMODE
3A09  84E0                    ANDA #$E0
3A0B  81E0                    CMPA #$E0
3A0D  270B                    BEQ CLSGB16
3A0F  8160                    CMPA #$60
3A11  2717                    BEQ CLSGB4
3A13  8140                    CMPA #$40
3A15  10270029                LBEQ CLSGB2
3A19  39                      RTS
3A1A                  CLSGB16
3A1A  B60045                  LDA PLOTC
3A1D  48                      LSLA
3A1E  48                      LSLA
3A1F  48                      LSLA
3A20  48                      LSLA
3A21  BA0045                  ORA PLOTC
3A24  B70045                  STA PLOTC
3A27  7E3A67                  JMP CLSGGO
3A2A                  CLSGB4
3A2A  B60045                  LDA PLOTC
3A2D  48                      LSLA
3A2E  48                      LSLA
3A2F  BA0045                  ORA PLOTC
3A32  48                      LSLA
3A33  48                      LSLA
3A34  BA0045                  ORA PLOTC
3A37  48                      LSLA
3A38  48                      LSLA
3A39  BA0045                  ORA PLOTC
3A3C  B70045                  STA PLOTC
3A3F  7E3A67                  JMP CLSGGO
3A42                  CLSGB2
3A42  B60045                  LDA PLOTC
3A45  48                      LSLA
3A46  BA0045                  ORA PLOTC
3A49  48                      LSLA
3A4A  BA0045                  ORA PLOTC
3A4D  48                      LSLA
3A4E  BA0045                  ORA PLOTC
3A51  48                      LSLA
3A52  BA0045                  ORA PLOTC
3A55  48                      LSLA
3A56  BA0045                  ORA PLOTC
3A59  48                      LSLA
3A5A  BA0045                  ORA PLOTC
3A5D  48                      LSLA
3A5E  BA0045                  ORA PLOTC
3A61  B70045                  STA PLOTC
3A64  7E3A67                  JMP CLSGGO
3A67                  CLSGGO
                      ; peephole(9): inlined1
                      ;       LDU CURRENTFRAMESIZE
3A67  CE0200                  LDU #32*16
3A68                  CURRENTFRAMESIZE equ *-2
3A6A  BE2C0C                  LDX BITMAPADDRESS
3A6D  B60045                  LDA PLOTC
3A70                  CLSGX0
3A70  A780                    STA ,X+
3A72  335F                    LEAU -1,U 
3A74  11830000                CMPU #0
3A78  26F6                    BNE CLSGX0
                          ; The CLS command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
3A7A  BD2E0B                  JSR GIMEBANKROM
3A7D  3576                    PULS A,B,X,Y,U
3A7F  39                      RTS
3A80                  clsGraphic_after
3A80  BD39F3                  JSR CLSG
                              ; P:82
                              ; L:41
3A83  C60F                    LDB #$0f
3A85  F7E026                  STB _Ttmp2
3A88  F6E026                  LDB _Ttmp2
3A8B  F7E000                  STB _PEN
                              ; P:4
                              ; L:42
3A8E  C650                    LDB #$50
3A90  F7E026                  STB _Ttmp2
3A93  CC0000                  LDD #$0000
3A96  FDE090                  STD _Ttmp83
3A99  F6E026                  LDB _Ttmp2
3A9C  F7E091                  STB _Ttmp83+1
3A9F  FCE090                  LDD _Ttmp83
3AA2  FDE075                  STD _Ttmp71
3AA5  C610                    LDB #$10
3AA7  F7E093                  STB _Ttmp85
3AAA  CC0000                  LDD #$0000
3AAD  FDE09A                  STD _Ttmp87
3AB0  F6E093                  LDB _Ttmp85
3AB3  F7E09B                  STB _Ttmp87+1
3AB6  FCE09A                  LDD _Ttmp87
3AB9  FDE096                  STD _Ttmp86
                              IF (((128+putimage_after-(*+2))|(127-putimage_after+(*+2)))&0x8000)
3ABC  7E3D38                  JMP putimage_after
                              ELSE
                              BRA putimage_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          IMAGES ROUTINE FOR GIME                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; ----------------------------------------------------------------------------
                      ; - Put image on bitmap
                      ; ----------------------------------------------------------------------------
3ABF                  PUTIMAGE
                          ; We must do nothing if we are in text mode!
3ABF  B6311B                  LDA CURRENTTILEMODE
3AC2  2701                    BEQ PUTIMAGEGO
3AC4  39                      RTS
3AC5                  PUTIMAGEGO
                          ; Convert PLOTX, PLOTY into the first byte of video RAM.
3AC5  FC0041                  LDD IMAGEX
3AC8  FD0041                  STD PLOTX
3ACB  FC0043                  LDD IMAGEY
3ACE  FD0043                  STD PLOTY
3AD1  BD2F92                  JSR GIMECALCPOSBM
                          ; Based on bpp, we 
3AD4  F62D67                  LDB PALETTELIMIT
3AD7  C102                    CMPB #2
3AD9  2709                    BEQ PUTIMAGEGOS3
3ADB  C104                    CMPB #4
3ADD  2710                    BEQ PUTIMAGEGOS2
3ADF  C110                    CMPB #16
3AE1  2715                    BEQ PUTIMAGEGOS1
3AE3  39                      RTS
                          ; Load the width from the header, and calculate
                          ; the size of the writing in bytes.
3AE4                  PUTIMAGEGOS3
3AE4  ECA4                    LDD ,Y 
3AE6  44                      LSRA
3AE7  56                      RORB
3AE8  44                      LSRA
3AE9  56                      RORB
3AEA  44                      LSRA
3AEB  56                      RORB
3AEC  7E3AFF                  JMP PUTIMAGEGOSX
3AEF                  PUTIMAGEGOS2
3AEF  ECA4                    LDD ,Y 
3AF1  44                      LSRA
3AF2  56                      RORB
3AF3  44                      LSRA
3AF4  56                      RORB
3AF5  7E3AFF                  JMP PUTIMAGEGOSX
3AF8                  PUTIMAGEGOS1
3AF8  ECA4                    LDD ,Y 
3AFA  44                      LSRA
3AFB  56                      RORB
3AFC  7E3AFF                  JMP PUTIMAGEGOSX
3AFF                  PUTIMAGEGOSX
3AFF  FD0045                  STD IMAGEW
3B02  A622                    LDA 2,Y 
3B04  B70047                  STA IMAGEH
                              
3B07  3123                    LEAY 3,Y
                          ; The PUT IMAGE primitive must have control if it is necessary to bank 
                          ; in the RAM and, if necessary, to differentiate the drawing logic.
3B09  3406                    PSHS D
3B0B  B60045                  LDA IMAGEW
3B0E  F60047                  LDB IMAGEH
3B11  3D                      MUL
3B12  1F03                    TFR D,U 
3B14  3506                    PULS D
3B16  BD2DB9                  JSR GIMEBANKISNEEDED
3B19  8100                    CMPA #0
3B1B  10270115                LBEQ PUTIMAGEGOSXNOBANK
                          ; This is the banked logic.
3B1F  FE0045                  LDU IMAGEW
3B22                  PUTIMAGEL1
3B22  B60050                  LDA IMAGEF
3B25  8420                    ANDA #32
3B27  8100                    CMPA #0 
3B29  277F                    BEQ PUTIMAGEDEF
3B2B  B62D67                  LDA PALETTELIMIT
3B2E  8102                    CMPA #2
3B30  2778                    BEQ PUTIMAGEL1T2
3B32  8104                    CMPA #4
3B34  2721                    BEQ PUTIMAGEL1T4
3B36                  PUTIMAGEL1T16
3B36  BD2E0B                  JSR GIMEBANKROM
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3B39  4F                      CLRA
3B3A  9719                    STA <MATHPTR5
3B3C  A6A4                    LDA ,Y 
3B3E  84F0                    ANDA #$F0
3B40  2706                    BEQ PUTIMAGEL1T16P16A
3B42  9619                    LDA <MATHPTR5
3B44  8AF0                    ORA #$F0
3B46  9719                    STA <MATHPTR5
3B48                  PUTIMAGEL1T16P16A
3B48  A6A4                    LDA ,Y
3B4A  840F                    ANDA #$0F
3B4C  2706                    BEQ PUTIMAGEL1T16P16B
3B4E  9619                    LDA <MATHPTR5
3B50  8A0F                    ORA #$0F
3B52  9719                    STA <MATHPTR5
3B54                  PUTIMAGEL1T16P16B
3B54  7E3B90                  JMP PUTIMAGEL1TFINAL
3B57                  PUTIMAGEL1T4
3B57  BD2E0B                  JSR GIMEBANKROM
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3B5A  4F                      CLRA
3B5B  9719                    STA <MATHPTR5
3B5D  A6A4                    LDA ,Y 
3B5F  84C0                    ANDA #$C0
3B61  2706                    BEQ PUTIMAGEL1T4P4A
3B63  9619                    LDA <MATHPTR5
3B65  8AC0                    ORA #$C0
3B67  9719                    STA <MATHPTR5
3B69                  PUTIMAGEL1T4P4A
3B69  A6A4                    LDA ,Y 
3B6B  8430                    ANDA #$30
3B6D  2706                    BEQ PUTIMAGEL1T4P4B
3B6F  9619                    LDA <MATHPTR5
3B71  8A30                    ORA #$30
3B73  9719                    STA <MATHPTR5
3B75                  PUTIMAGEL1T4P4B
3B75  A6A4                    LDA ,Y 
3B77  840C                    ANDA #$0C
3B79  2706                    BEQ PUTIMAGEL1T4P4C
3B7B  9619                    LDA <MATHPTR5
3B7D  8A0C                    ORA #$0C
3B7F  9719                    STA <MATHPTR5
3B81                  PUTIMAGEL1T4P4C
3B81  A6A4                    LDA ,Y 
3B83  8403                    ANDA #$03
3B85  2706                    BEQ PUTIMAGEL1T4P4D
3B87  9619                    LDA <MATHPTR5
3B89  8A03                    ORA #$03
3B8B  9719                    STA <MATHPTR5
3B8D                  PUTIMAGEL1T4P4D
3B8D  7E3B90                  JMP PUTIMAGEL1TFINAL
3B90                  PUTIMAGEL1TFINAL
3B90  BD2DFD                  JSR GIMEBANKVIDEO
3B93  9619                    LDA <MATHPTR5
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORA #$FF
3B95  43                      COMA
3B96  9720                    STA <MATHPTR6
3B98  A684                    LDA ,X 
3B9A  9420                    ANDA <MATHPTR6
3B9C  9720                    STA <MATHPTR6
3B9E  BD2E0B                  JSR GIMEBANKROM
3BA1  A6A0                    LDA ,Y +
3BA3  9419                    ANDA <MATHPTR5
3BA5  9A20                    ORA <MATHPTR6
3BA7  7E3BAF                  JMP PUTIMAGEDEFFINAL
3BAA                  PUTIMAGEL1T2
3BAA                  PUTIMAGEDEF
3BAA  BD2E0B                  JSR GIMEBANKROM
3BAD  A6A0                    LDA ,Y +
3BAF                  PUTIMAGEDEFFINAL    
3BAF  BD2DFD                  JSR GIMEBANKVIDEO
3BB2  A780                    STA ,X +
3BB4  335F                    LEAU -1,U 
3BB6  11830000                CMPU #0
3BBA  1026FF64                LBNE PUTIMAGEL1
                              
3BBE  B60050                  LDA IMAGEF
3BC1  8440                    ANDA #64
3BC3  8100                    CMPA #0
3BC5  272D                    BEQ PUTIMAGEL1N
3BC7  B60050                  LDA IMAGEF
3BCA  8401                    ANDA #1
3BCC  8101                    CMPA #1
3BCE  271C                    BEQ PUTIMAGEL1N0
3BD0  8A41                    ORA #65
3BD2  B70050                  STA IMAGEF
3BD5  FC0045                  LDD IMAGEW
3BD8  40                      NEGA
3BD9  50                      NEGB
3BDA  8200                    SBCA #0
3BDC  31AB                    LEAY D,Y 
3BDE  4F                      CLRA
                      ; peephole(9): inlined1
                      ;       LDB CURRENTSL
3BDF  C620                    LDB #32
3BE0                  CURRENTSL equ *-1
3BE1  B30045                  SUBD IMAGEW
3BE4  308B                    LEAX D,X 
                              
3BE6  FE0045                  LDU IMAGEW
3BE9  7E3B22                  JMP PUTIMAGEL1
3BEC                  PUTIMAGEL1N0
3BEC  B60050                  LDA IMAGEF
3BEF  84FE                    ANDA #$FE
3BF1  B70050                  STA IMAGEF
3BF4                  PUTIMAGEL1N
3BF4  4F                      CLRA
3BF5  F63BE0                  LDB CURRENTSL
3BF8  B30045                  SUBD IMAGEW
3BFB  308B                    LEAX D,X 
3BFD  FC0043                  LDD IMAGEY
3C00  C30001                  ADDD #1
3C03  FD0043                  STD IMAGEY
3C06  10B330EA                CMPD CURRENTHEIGHT
3C0A  2C0E                    BGE PUTIMAGECOMMONESKIP
3C0C  7A0047                  DEC IMAGEH
3C0F  F60047                  LDB IMAGEH
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPB #0
3C12  2710                    BEQ PUTIMAGECOMMONE
3C14  FE0045                  LDU IMAGEW
3C17  7E3B22                  JMP PUTIMAGEL1
3C1A                  PUTIMAGECOMMONESKIP
3C1A  FC0045                  LDD IMAGEW
3C1D                  PUTIMAGECOMMONESKIPL1    
3C1D  31AB                    LEAY D,Y 
3C1F  7A0047                  DEC IMAGEH
3C22  26F9                    BNE PUTIMAGECOMMONESKIPL1
3C24                  PUTIMAGECOMMONE
3C24  BD2E0B                  JSR GIMEBANKROM
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3C27  4F                      CLRA
3C28                  PUTIMAGECOMMONEL1
3C28  E6A0                    LDB ,Y +
3C2A  BD2F28                  JSR GIMEUPDATEPALETTE
3C2D  4C                      INCA
3C2E  B12D67                  CMPA PALETTELIMIT
3C31  26F5                    BNE PUTIMAGECOMMONEL1
3C33  39                      RTS
                          ; This is the "not banked" logic.
3C34                  PUTIMAGEGOSXNOBANK
3C34  BD2DFD                  JSR GIMEBANKVIDEO
3C37  FE0045                  LDU IMAGEW
3C3A                  PUTIMAGEL1NOBANK
3C3A  B60050                  LDA IMAGEF
3C3D  8420                    ANDA #32
3C3F  8100                    CMPA #0 
3C41  2773                    BEQ PUTIMAGEDEFNOBANK
3C43  B62D67                  LDA PALETTELIMIT
3C46  8102                    CMPA #2
3C48  276C                    BEQ PUTIMAGEL1T2NOBANK
3C4A  8104                    CMPA #4
3C4C  271E                    BEQ PUTIMAGEL1T4NOBANK
3C4E                  PUTIMAGEL1T16NOBANK
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3C4E  4F                      CLRA
3C4F  9719                    STA <MATHPTR5
3C51  A6A4                    LDA ,Y 
3C53  84F0                    ANDA #$F0
3C55  2706                    BEQ PUTIMAGEL1T16P16ANOBANK
3C57  9619                    LDA <MATHPTR5
3C59  8AF0                    ORA #$F0
3C5B  9719                    STA <MATHPTR5
3C5D                  PUTIMAGEL1T16P16ANOBANK
3C5D  A6A4                    LDA ,Y
3C5F  840F                    ANDA #$0F
3C61  2706                    BEQ PUTIMAGEL1T16P16BNOBANK
3C63  9619                    LDA <MATHPTR5
3C65  8A0F                    ORA #$0F
3C67  9719                    STA <MATHPTR5
3C69                  PUTIMAGEL1T16P16BNOBANK
3C69  7E3CA2                  JMP PUTIMAGEL1TFINALNOBANK
3C6C                  PUTIMAGEL1T4NOBANK
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3C6C  4F                      CLRA
3C6D  9719                    STA <MATHPTR5
3C6F  A6A4                    LDA ,Y 
3C71  84C0                    ANDA #$C0
3C73  2706                    BEQ PUTIMAGEL1T4P4ANOBANK
3C75  9619                    LDA <MATHPTR5
3C77  8AC0                    ORA #$C0
3C79  9719                    STA <MATHPTR5
3C7B                  PUTIMAGEL1T4P4ANOBANK
3C7B  A6A4                    LDA ,Y 
3C7D  8430                    ANDA #$30
3C7F  2706                    BEQ PUTIMAGEL1T4P4BNOBANK
3C81  9619                    LDA <MATHPTR5
3C83  8A30                    ORA #$30
3C85  9719                    STA <MATHPTR5
3C87                  PUTIMAGEL1T4P4BNOBANK
3C87  A6A4                    LDA ,Y 
3C89  840C                    ANDA #$0C
3C8B  2706                    BEQ PUTIMAGEL1T4P4CNOBANK
3C8D  9619                    LDA <MATHPTR5
3C8F  8A0C                    ORA #$0C
3C91  9719                    STA <MATHPTR5
3C93                  PUTIMAGEL1T4P4CNOBANK
3C93  A6A4                    LDA ,Y 
3C95  8403                    ANDA #$03
3C97  2706                    BEQ PUTIMAGEL1T4P4DNOBANK
3C99  9619                    LDA <MATHPTR5
3C9B  8A03                    ORA #$03
3C9D  9719                    STA <MATHPTR5
3C9F                  PUTIMAGEL1T4P4DNOBANK
3C9F  7E3CA2                  JMP PUTIMAGEL1TFINALNOBANK
3CA2                  PUTIMAGEL1TFINALNOBANK
3CA2  9619                    LDA <MATHPTR5
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORA #$FF
3CA4  43                      COMA
3CA5  9720                    STA <MATHPTR6
3CA7  A684                    LDA ,X 
3CA9  9420                    ANDA <MATHPTR6
3CAB  9720                    STA <MATHPTR6
3CAD  A6A0                    LDA ,Y +
3CAF  9419                    ANDA <MATHPTR5
3CB1  9A20                    ORA <MATHPTR6
3CB3  7E3CB8                  JMP PUTIMAGEDEFFINALNOBANK
3CB6                  PUTIMAGEL1T2NOBANK
3CB6                  PUTIMAGEDEFNOBANK
3CB6  A6A0                    LDA ,Y +
3CB8                  PUTIMAGEDEFFINALNOBANK    
3CB8  A780                    STA ,X +
3CBA  335F                    LEAU -1,U 
3CBC  11830000                CMPU #0
3CC0  1026FF76                LBNE PUTIMAGEL1NOBANK
                              
3CC4  B60050                  LDA IMAGEF
3CC7  8440                    ANDA #64
3CC9  8100                    CMPA #0
3CCB  272E                    BEQ PUTIMAGEL1NNOBANK
3CCD  B60050                  LDA IMAGEF
3CD0  8401                    ANDA #1
3CD2  8101                    CMPA #1
3CD4  271D                    BEQ PUTIMAGEL1N0NOBANK
3CD6  8A41                    ORA #65
3CD8  B70050                  STA IMAGEF
3CDB  FC0045                  LDD IMAGEW
3CDE  40                      NEGA
3CDF  50                      NEGB
3CE0  8200                    SBCA #0
3CE2  31AB                    LEAY D,Y 
3CE4  4F                      CLRA
3CE5  F63BE0                  LDB CURRENTSL
3CE8  B30045                  SUBD IMAGEW
3CEB  308B                    LEAX D,X 
                              
3CED  FE0045                  LDU IMAGEW
3CF0  7E3C3A                  JMP PUTIMAGEL1NOBANK
3CF3                  PUTIMAGEL1N0NOBANK
3CF3  B60050                  LDA IMAGEF
3CF6  84FE                    ANDA #$FE
3CF8  B70050                  STA IMAGEF
3CFB                  PUTIMAGEL1NNOBANK
3CFB  4F                      CLRA
3CFC  F63BE0                  LDB CURRENTSL
3CFF  B30045                  SUBD IMAGEW
3D02  308B                    LEAX D,X 
3D04  FC0043                  LDD IMAGEY
3D07  C30001                  ADDD #1
3D0A  10B330EA                CMPD CURRENTHEIGHT
3D0E  270E                    BEQ PUTIMAGECOMMONESKIPNOBANK
3D10  7A0047                  DEC IMAGEH
3D13  F60047                  LDB IMAGEH
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPB #0
3D16  2710                    BEQ PUTIMAGECOMMONENOBANK
3D18  FE0045                  LDU IMAGEW
3D1B  7E3C3A                  JMP PUTIMAGEL1NOBANK
3D1E                  PUTIMAGECOMMONESKIPNOBANK
3D1E  FC0045                  LDD IMAGEW
3D21                  PUTIMAGECOMMONESKIPL1NOBANK    
3D21  31AB                    LEAY D,Y 
3D23  7A0047                  DEC IMAGEH
3D26  26F9                    BNE PUTIMAGECOMMONESKIPL1NOBANK
3D28                  PUTIMAGECOMMONENOBANK
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D28  4F                      CLRA
3D29                  PUTIMAGECOMMONEL1NOBANK
3D29  E6A0                    LDB ,Y +
3D2B  BD2F28                  JSR GIMEUPDATEPALETTE
3D2E  4C                      INCA
3D2F  B12D67                  CMPA PALETTELIMIT
3D32  26F5                    BNE PUTIMAGECOMMONEL1NOBANK
3D34  BD2E0B                  JSR GIMEBANKROM
3D37  39                      RTS
3D38                  putimage_after
3D38  108E5516                LDY #_keyimage
3D3C  FCE075                  LDD _Ttmp71
3D3F  FD0041                  STD IMAGEX
3D42  FCE096                  LDD _Ttmp86
3D45  FD0043                  STD IMAGEY
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
3D48  4F                      CLRA
3D49  9750                    STA <IMAGEF
3D4B  8602                    LDA #$02
3D4D  9749                    STA <IMAGET
3D4F  BD3ABF                  JSR PUTIMAGE
3D52  CC0000                  LDD #$0000
                      ; peephole(9): direct-page1
                      ;       STD XGR
3D55  DDF1                    STD <XGR
3D57  F6E026                  LDB _Ttmp2
                      ; peephole(9): direct-page1
                      ;       STB XGR+1
3D5A  D7F2                    STB <XGR+1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       CLRB
                      ; peephole(5): unread1
                      ;       STD YGR
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp85
                      ; peephole(5): unread1
                      ;       STB YGR+1
                              ; P:379
                              ; L:43
3D5C  C614                    LDB #$14
3D5E  F7E026                  STB _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3D61  5F                      CLRB
3D62  FDE090                  STD _Ttmp83
3D65  F6E026                  LDB _Ttmp2
3D68  F7E091                  STB _Ttmp83+1
3D6B  FCE090                  LDD _Ttmp83
3D6E  FDE075                  STD _Ttmp71
3D71  C610                    LDB #$10
3D73  F7E093                  STB _Ttmp85
3D76  CC0000                  LDD #$0000
3D79  FDE09A                  STD _Ttmp87
3D7C  F6E093                  LDB _Ttmp85
3D7F  F7E09B                  STB _Ttmp87+1
3D82  FCE09A                  LDD _Ttmp87
3D85  FDE096                  STD _Ttmp86
3D88  108E5516                LDY #_keyimage
3D8C  FCE075                  LDD _Ttmp71
3D8F  FD0041                  STD IMAGEX
3D92  FCE096                  LDD _Ttmp86
3D95  FD0043                  STD IMAGEY
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
3D98  4F                      CLRA
3D99  9750                    STA <IMAGEF
3D9B  8602                    LDA #$02
3D9D  9749                    STA <IMAGET
3D9F  BD3ABF                  JSR PUTIMAGE
3DA2  CC0000                  LDD #$0000
                      ; peephole(9): direct-page1
                      ;       STD XGR
3DA5  DDF1                    STD <XGR
3DA7  F6E026                  LDB _Ttmp2
                      ; peephole(9): direct-page1
                      ;       STB XGR+1
3DAA  D7F2                    STB <XGR+1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       CLRB
                      ; peephole(5): unread1
                      ;       STD YGR
3DAC  F6E093                  LDB _Ttmp85
                      ; peephole(5): unread1
                      ;       STB YGR+1
                              ; P:34
                              ; L:44
                              ; P:0
                              ; L:45
3DAF  FCE086                  LDD _mid1
3DB2  FDE075                  STD _Ttmp71
3DB5  4F                      CLRA
3DB6  B7E036                  STA _Ttmp10
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3DB9  5F                      CLRB
3DBA  FDE096                  STD _Ttmp86
3DBD  F6E036                  LDB _Ttmp10
3DC0  F7E097                  STB _Ttmp86+1
3DC3  FCE096                  LDD _Ttmp86
3DC6  FDE090                  STD _Ttmp83
3DC9  FCE086                  LDD _mid1
3DCC  FDE09A                  STD _Ttmp87
3DCF  C660                    LDB #$60
3DD1  F7E09F                  STB _Ttmp89
3DD4  CC0000                  LDD #$0000
3DD7  FDE0B0                  STD _Ttmp106
3DDA  F6E09F                  LDB _Ttmp89
3DDD  F7E0B1                  STB _Ttmp106+1
3DE0  FCE0B0                  LDD _Ttmp106
3DE3  FDE0AC                  STD _Ttmp105
                              IF (((128+draw_after-(*+2))|(127-draw_after+(*+2)))&0x8000)
3DE6  7E426B                  JMP draw_after
                              ELSE
                              BRA draw_after
                              ENDIF
3DE9                  lib_draw
3DE9  CC0000                  LDD #$0000
3DEC  FDE0BD                  STD _Ttmp108
3DEF  B7E0A9                  STA _Ttmp97
3DF2  C610                    LDB #$10
3DF4  F7E0A7                  STB _Ttmp96
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
3DF7  FCE0B2                  LDD _draw__x0
3DFA  FDE0C5                  STD _Ttmp110
3DFD  FCE0B4                  LDD _draw__y0
3E00  FDE0C9                  STD _Ttmp111
3E03  FCE0B6                  LDD _draw__x1
3E06  B3E0B2                  SUBD _draw__x0
3E09  FDE0E9                  STD _Ttmp120
3E0C  FCE0E9                  LDD _Ttmp120
3E0F  FDE0CD                  STD _Ttmp112
3E12  FCE0B8                  LDD _draw__y1
3E15  B3E0B4                  SUBD _draw__y0
3E18  FDE0EF                  STD _Ttmp122
3E1B  FCE0EF                  LDD _Ttmp122
3E1E  FDE0D1                  STD _Ttmp113
3E21  5F                      CLRB
3E22  BEE0D1                  LDX _Ttmp113
3E25  BCE0BD                  CMPX _Ttmp108
3E28  2C01                    BGE _label126
3E2A  5A                      DECB
3E2B                  _label126
3E2B  F7E0F4                  STB _Ttmp125
3E2E  F6E0F4                  LDB _Ttmp125
                              IF (((128+_label127e0-(*+2))|(127-_label127e0+(*+2)))&0x8000)
                              LBEQ _label127e0
                              ELSE
3E31  2717                    BEQ _label127e0
                              ENDIF
3E33                  _label127t
3E33  FCE0BD                  LDD _Ttmp108
3E36  B3E0D1                  SUBD _Ttmp113
3E39  FDE0F7                  STD _Ttmp128
3E3C  FCE0F7                  LDD _Ttmp128
3E3F  FDE0D1                  STD _Ttmp113
3E42  CCFFFF                  LDD #$ffff
3E45  FDE0E1                  STD _Ttmp117
                              IF (((128+_label127f-(*+2))|(127-_label127f+(*+2)))&0x8000)
                              JMP _label127f
                              ELSE
3E48  200B                    BRA _label127f
                              ENDIF
3E4A                  _label127e0
3E4A  F6E0F4                  LDB _Ttmp125
                              IF (((128+_label127f-(*+2))|(127-_label127f+(*+2)))&0x8000)
                              LBNE _label127f
                              ELSE
3E4D  2606                    BNE _label127f
                              ENDIF
3E4F  CC0001                  LDD #$0001
3E52  FDE0E1                  STD _Ttmp117
3E55                  _label127f
3E55                  _label127e1
3E55  5F                      CLRB
3E56  BEE0CD                  LDX _Ttmp112
3E59  BCE0BD                  CMPX _Ttmp108
3E5C  2C01                    BGE _label132
3E5E  5A                      DECB
3E5F                  _label132
3E5F  F7E0FC                  STB _Ttmp131
3E62  F6E0FC                  LDB _Ttmp131
                              IF (((128+_label133e0-(*+2))|(127-_label133e0+(*+2)))&0x8000)
                              LBEQ _label133e0
                              ELSE
3E65  2717                    BEQ _label133e0
                              ENDIF
3E67                  _label133t
3E67  FCE0BD                  LDD _Ttmp108
3E6A  B3E0CD                  SUBD _Ttmp112
3E6D  FDE0FF                  STD _Ttmp134
3E70  FCE0FF                  LDD _Ttmp134
3E73  FDE0CD                  STD _Ttmp112
3E76  CCFFFF                  LDD #$ffff
3E79  FDE0DD                  STD _Ttmp116
                              IF (((128+_label133f-(*+2))|(127-_label133f+(*+2)))&0x8000)
                              JMP _label133f
                              ELSE
3E7C  200B                    BRA _label133f
                              ENDIF
3E7E                  _label133e0
3E7E  F6E0FC                  LDB _Ttmp131
                              IF (((128+_label133f-(*+2))|(127-_label133f+(*+2)))&0x8000)
                              LBNE _label133f
                              ELSE
3E81  2606                    BNE _label133f
                              ENDIF
3E83  CC0001                  LDD #$0001
3E86  FDE0DD                  STD _Ttmp116
3E89                  _label133f
3E89                  _label133e1
3E89  FCE0D1                  LDD _Ttmp113
3E8C  FDE0D9                  STD _Ttmp115
3E8F  FCE0D9                  LDD _Ttmp115
3E92  FDE105                  STD _Ttmp136
3E95  FCE105                  LDD _Ttmp136
3E98  58                      LSLB
3E99  49                      ROLA
3E9A  FDE105                  STD _Ttmp136
3E9D  FCE0CD                  LDD _Ttmp112
3EA0  FDE0D5                  STD _Ttmp114
3EA3  FCE0D5                  LDD _Ttmp114
3EA6  FDE109                  STD _Ttmp137
3EA9  FCE109                  LDD _Ttmp137
3EAC  58                      LSLB
3EAD  49                      ROLA
3EAE  FDE109                  STD _Ttmp137
3EB1  CC0000                  LDD #$0000
3EB4  FDE10F                  STD _Ttmp138
3EB7  FDE111                  STD _Ttmp138+2
3EBA  FC2D40                  LDD LINE
3EBD  FDE111                  STD _Ttmp138+2
3EC0  2008                    BRA _bit_check_extended_tab_after
3EC2                  bit_check_extended_tab
3EC2  0102040810204080         fcb 1,2,4,8,16,32,64,128
3ECA                  _bit_check_extended_tab_after
3ECA  B6E0A9                  LDA _Ttmp97
3ECD  F6E112                  LDB _Ttmp138+3
3ED0  8108                    CMPA #8
3ED2  2511                    BLO _label144eval
3ED4  F6E111                  LDB _Ttmp138+2
3ED7  8110                    CMPA #16
3ED9  250A                    BLO _label144eval
3EDB  F6E110                  LDB _Ttmp138+1
3EDE  8118                    CMPA #24
3EE0  2503                    BLO _label144eval
3EE2  F6E10F                  LDB _Ttmp138
3EE5                  _label144eval
3EE5  8E3EC2                  LDX #bit_check_extended_tab
3EE8  B6E0A9                  LDA _Ttmp97
3EEB  8407                    ANDA #7
3EED  E486                    ANDB A,X
3EEF  2702                    BEQ _label144end
3EF1  C6FF                    LDB #$ff
3EF3                  _label144end
3EF3  F7E118                  STB _Ttmp142
3EF6  F6E118                  LDB _Ttmp142
                              IF (((128+_label145e0-(*+2))|(127-_label145e0+(*+2)))&0x8000)
3EF9  1027015A                LBEQ _label145e0
                              ELSE
                              BEQ _label145e0
                              ENDIF
3EFD                  _label145t
3EFD  F6E0BA                  LDB _draw__c
3F00  F7E000                  STB _PEN
                              IF (((128+plot_after-(*+2))|(127-plot_after+(*+2)))&0x8000)
3F03  7E4043                  JMP plot_after
                              ELSE
                              BRA plot_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                            PLOT ROUTINE FOR GIME                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
0046                  PLOTM   EQU $46
                      ;--------------
3F06                  PLOT
3F06  B6311B                  LDA CURRENTTILEMODE
3F09  2701                    BEQ PLOTGO
3F0B  39                      RTS
3F0C                  PLOTGO
3F0C  FC0043                  LDD PLOTY
                      ; peephole(9): inlined1
                      ;       CMPD CLIPY2
3F0F  108300C7                CMPD #199
3F11                  CLIPY2 equ *-2
3F13  2F03                    BLE PLOTCLIP2
3F15  7E4017                  JMP PLOTP
3F18                  PLOTCLIP2
                      ; peephole(9): inlined1
                      ;       CMPD CLIPY1
3F18  10830000                CMPD #0
3F1A                  CLIPY1 equ *-2
3F1C  2C03                    BGE PLOTCLIP3
3F1E  7E4017                  JMP PLOTP
3F21                  PLOTCLIP3
3F21  FC0041                  LDD PLOTX
                      ; peephole(9): inlined1
                      ;       CMPD CLIPX2
3F24  1083013F                CMPD #319
3F26                  CLIPX2 equ *-2
3F28  2F03                    BLE PLOTCLIP4
3F2A  7E4017                  JMP PLOTP
3F2D                  PLOTCLIP4
                      ; peephole(9): inlined1
                      ;       CMPD CLIPX1
3F2D  10830000                CMPD #0
3F2F                  CLIPX1 equ *-2
3F31  2C03                    BGE PLOTCLIP5
3F33  7E4017                  JMP PLOTP
3F36                  PLOTCLIP5
3F36                  PLOTMODE
                          ; The PLOT command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
3F36  BD2DFD                  JSR GIMEBANKVIDEO
3F39  F6E000                  LDB _PEN
3F3C  BD2F6F                  JSR GIMESELECTPALETTE
3F3F  B70045                  STA PLOTC
3F42  BD2F92                  JSR GIMECALCPOSBM
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
3F45  96F0                    LDA <CURRENTMODE
3F47  84E0                    ANDA #$E0
3F49  81E0                    CMPA #$E0
3F4B  270E                    BEQ PLOTB16
3F4D  8160                    CMPA #$60
3F4F  272B                    BEQ PLOTB4
3F51  8140                    CMPA #$40
3F53  10270056                LBEQ PLOTB2
                          ; The PLOT command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
3F57  BD2E0B                  JSR GIMEBANKROM
3F5A  39                      RTS
3F5B                  PLOTB16
3F5B  CE4041                  LDU #PLOTANDBIT8
3F5E  FC0041                  LDD PLOTX
3F61  C401                    ANDB #$1
3F63  33C5                    LEAU B,U 
3F65  C101                    CMPB #$1
3F67  270A                    BEQ PLOTB16SKIP
3F69  B60045                  LDA PLOTC
3F6C  48                      LSLA
3F6D  48                      LSLA
3F6E  48                      LSLA
3F6F  48                      LSLA
3F70  7E3F76                  JMP PLOTB16SKIPE
3F73                  PLOTB16SKIP
3F73  B60045                  LDA PLOTC
3F76                  PLOTB16SKIPE
3F76  B70045                  STA PLOTC
3F79  7E3FCF                  JMP PLOTCOMMON
3F7C                  PLOTB4
3F7C  FC0041                  LDD PLOTX
3F7F  B60045                  LDA PLOTC
3F82  48                      LSLA
3F83  48                      LSLA
3F84  48                      LSLA
3F85  48                      LSLA
3F86  48                      LSLA
3F87  48                      LSLA
3F88  C403                    ANDB #$03
3F8A  2711                    BEQ PLOTB4SKIPE
3F8C  44                      LSRA
3F8D  44                      LSRA
3F8E  5A                      DECB
3F8F  270C                    BEQ PLOTB4SKIPE
3F91  44                      LSRA
3F92  44                      LSRA
3F93  5A                      DECB
3F94  2707                    BEQ PLOTB4SKIPE
3F96  44                      LSRA
3F97  44                      LSRA
3F98  5A                      DECB
3F99  2702                    BEQ PLOTB4SKIPE
3F9B  44                      LSRA
3F9C  44                      LSRA
3F9D                  PLOTB4SKIPE
3F9D  B70045                  STA PLOTC
3FA0  F60042                  LDB PLOTX+1
3FA3  C403                    ANDB #$03
3FA5  CE403B                  LDU #PLOTANDBIT4
3FA8  33C5                    LEAU B,U 
3FAA  7E3FCF                  JMP PLOTCOMMON
3FAD                  PLOTB2
3FAD  B60045                  LDA PLOTC
3FB0  2711                    BEQ PLOTB2SKIPE
3FB2  108E401B                LDY #PLOTORBIT
3FB6  F60042                  LDB PLOTX+1
3FB9  C407                    ANDB #$07
3FBB  A6A5                    LDA B,Y 
3FBD  B70045                  STA PLOTC
3FC0  7E3FC7                  JMP PLOTB2SFINAL
3FC3                  PLOTB2SKIPE
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3FC3  4F                      CLRA
3FC4  B70045                  STA PLOTC
                              
3FC7                  PLOTB2SFINAL
3FC7  CE4023                  LDU #PLOTANDBIT
3FCA  33C5                    LEAU B,U 
3FCC  7E3FCF                  JMP PLOTCOMMON
3FCF                  PLOTCOMMON
                          ;----------------------------------------------
                          ;depending on PLOTM, routine draws or erases
                          ;----------------------------------------------
3FCF  B60046                  LDA PLOTM                  ;(0 = erase, 1 = set, 2 = get pixel, 3 = get color)
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
3FD2  271B                    BEQ PLOTE                  ;if = 0 then branch to clear the point
3FD4  8101                    CMPA #1
3FD6  270B                    BEQ PLOTD                  ;if = 1 then branch to draw the point
3FD8  8102                    CMPA #2
3FDA  271C                    BEQ PLOTG                  ;if = 2 then branch to get the point (0/1)
3FDC  8103                    CMPA #3
3FDE  272F                    BEQ PLOTCL                  ;if = 3 then branch to get the color index (0...15)
3FE0  7E4017                  JMP PLOTP
3FE3                  PLOTD
                          ;---------
                          ;set point
                          ;---------
3FE3  A684                    LDA ,X            ;get row with point in it
3FE5  A4C4                    ANDA ,U 
3FE7  BA0045                  ORA PLOTC
                          ; ORA , Y               ;isolate AND set the point
3FEA  A784                    STA ,X            ;write back to $A000
3FEC  7E4017                  JMP PLOTP                  ;skip the erase-point section
                          ;-----------
                          ;erase point
                          ;-----------
3FEF                  PLOTE                          ;handled same way as setting a point
3FEF  A684                    LDA ,X            ;get row with point in it
3FF1  A4C4                    ANDA ,U 
3FF3  A784                    STA ,X            ;write back to $A000
3FF5  7E4017                  JMP PLOTP                  ;skip the erase-point section
3FF8                  PLOTG      
3FF8  A684                    LDA ,X            ;get row with point in it
3FFA  A4C4                    ANDA ,U 
3FFC  8100                    CMPA #0
3FFE  2708                    BEQ PLOTG0
4000                  PLOTG1
4000  86FF                    LDA #$ff
4002  B70046                  STA PLOTM
4005  7E4017                  JMP PLOTP
4008                  PLOTG0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
4008  4F                      CLRA
4009  B70046                  STA PLOTM
400C  7E4017                  JMP PLOTP            
400F                  PLOTCL                          
400F  A684                    LDA ,X            ;get row with point in it
4011  B70046                  STA PLOTM
4014  7E4017                  JMP PLOTP
4017                  PLOTP
                          ; The PLOT command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
4017  BD2E0B                  JSR GIMEBANKROM
                              
401A  39                      RTS
401B                  PLOTORBIT
401B  80                      fcb %10000000
401C  40                      fcb %01000000
401D  20                      fcb %00100000
401E  10                      fcb %00010000
401F  08                      fcb %00001000
4020  04                      fcb %00000100
4021  02                      fcb %00000010
4022  01                      fcb %00000001
4023                  PLOTANDBIT
4023  7F                      fcb %01111111
4024  BF                      fcb %10111111
4025  DF                      fcb %11011111
4026  EF                      fcb %11101111
4027  F7                      fcb %11110111
4028  FB                      fcb %11111011
4029  FD                      fcb %11111101
402A  FE                      fcb %11111110
402B                  PLOTORBIT40
402B  00                      fcb %00000000
402C  00                      fcb %00000000
402D  00                      fcb %00000000
402E  00                      fcb %00000000
402F                  PLOTORBIT41
402F  40                      fcb %01000000
4030  10                      fcb %00010000
4031  04                      fcb %00000100
4032  01                      fcb %00000001
4033                  PLOTORBIT42
4033  80                      fcb %10000000
4034  20                      fcb %00100000
4035  08                      fcb %00001000
4036  02                      fcb %00000010
4037                  PLOTORBIT43
4037  C0                      fcb %11000000
4038  30                      fcb %00110000
4039  0C                      fcb %00001100
403A  03                      fcb %00000011
403B                  PLOTANDBIT4
403B  FC                      fcb %11111100
403C  F3                      fcb %11110011
403D  CF                      fcb %11001111
403E  3F                      fcb %00111111
403F                  PLOTORBIT8
403F  F0                      fcb %11110000
4040  0F                      fcb %00001111
4041                  PLOTANDBIT8
4041  0F                      fcb %00001111
4042  F0                      fcb %11110000
4043                  plot_after
4043  BEE0C5                  LDX _Ttmp110
4046  BF0041                  STX PLOTX
4049  FCE0C9                  LDD _Ttmp111
404C  FD0043                  STD PLOTY
404F  8601                    LDA #1
4051  B70046                  STA PLOTM
4054  BD3F06                  JSR PLOT
4057                  _label145f
4057                  _label145e0
4057  7CE0A9                  INC _Ttmp97
405A  5F                      CLRB
405B  B6E0A9                  LDA _Ttmp97
405E  B1E0A7                  CMPA _Ttmp96
4061  2601                    BNE _label149
4063  5A                      DECB
4064                  _label149
4064  F7E11C                  STB _Ttmp148
4067  F6E11C                  LDB _Ttmp148
                              IF (((128+_label150e0-(*+2))|(127-_label150e0+(*+2)))&0x8000)
                              LBEQ _label150e0
                              ELSE
406A  2704                    BEQ _label150e0
                              ENDIF
406C                  _label150t
406C  4F                      CLRA
406D  B7E0A9                  STA _Ttmp97
4070                  _label150f
4070                  _label150e0
4070  5F                      CLRB
4071  BEE109                  LDX _Ttmp137
4074  BCE105                  CMPX _Ttmp136
4077  2F01                    BLE _label153
4079  5A                      DECB
407A                  _label153
407A  F7E11E                  STB _Ttmp152
407D  F6E11E                  LDB _Ttmp152
                              IF (((128+_label154e0-(*+2))|(127-_label154e0+(*+2)))&0x8000)
4080  102700F1                LBEQ _label154e0
                              ELSE
                              BEQ _label154e0
                              ENDIF
4084                  _label154t
4084  FCE105                  LDD _Ttmp136
4087  B3E0CD                  SUBD _Ttmp112
408A  FDE121                  STD _Ttmp155
408D  FCE121                  LDD _Ttmp155
4090  FDE0C1                  STD _Ttmp109
4093                  _label157
4093  5F                      CLRB
4094  BEE0C5                  LDX _Ttmp110
4097  BCE0B6                  CMPX _draw__x1
409A  2601                    BNE _label160
409C  5A                      DECB
409D                  _label160
409D  F7E126                  STB _Ttmp159
40A0  F6E126                  LDB _Ttmp159
40A3  53                      COMB
40A4  F7E128                  STB _Ttmp161
40A7  F6E128                  LDB _Ttmp161
                              IF (((128+_label157bis-(*+2))|(127-_label157bis+(*+2)))&0x8000)
40AA  102700C4                LBEQ _label157bis
                              ELSE
                              BEQ _label157bis
                              ENDIF
40AE  FCE0DD                  LDD _Ttmp116
40B1  F3E0C5                  ADDD _Ttmp110
40B4  FDE080                  STD _Ttmp76
40B7  FCE080                  LDD _Ttmp76
40BA  FDE0C5                  STD _Ttmp110
40BD  5F                      CLRB
40BE  BEE0C1                  LDX _Ttmp109
40C1  BCE0BD                  CMPX _Ttmp108
40C4  2D01                    BLT _label165
40C6  5A                      DECB
40C7                  _label165
40C7  F7E12C                  STB _Ttmp164
40CA  F6E12C                  LDB _Ttmp164
                              IF (((128+_label166e0-(*+2))|(127-_label166e0+(*+2)))&0x8000)
                              LBEQ _label166e0
                              ELSE
40CD  271E                    BEQ _label166e0
                              ENDIF
40CF                  _label166t
40CF  FCE0E1                  LDD _Ttmp117
40D2  F3E0C9                  ADDD _Ttmp111
40D5  FDE084                  STD _Ttmp77
40D8  FCE084                  LDD _Ttmp77
40DB  FDE0C9                  STD _Ttmp111
40DE  FCE0C1                  LDD _Ttmp109
40E1  B3E109                  SUBD _Ttmp137
40E4  FDE131                  STD _Ttmp168
40E7  FCE131                  LDD _Ttmp168
40EA  FDE0C1                  STD _Ttmp109
40ED                  _label166f
40ED                  _label166e0
40ED  FCE105                  LDD _Ttmp136
40F0  F3E0C1                  ADDD _Ttmp109
40F3  FDE137                  STD _Ttmp170
40F6  FCE137                  LDD _Ttmp170
40F9  FDE0C1                  STD _Ttmp109
40FC  CC0000                  LDD #$0000
40FF  FDE13F                  STD _Ttmp172
4102  FDE141                  STD _Ttmp172+2
4105  FC2D40                  LDD LINE
4108  FDE141                  STD _Ttmp172+2
410B  B6E0A9                  LDA _Ttmp97
410E  F6E142                  LDB _Ttmp172+3
4111  8108                    CMPA #8
4113  2511                    BLO _label178eval
4115  F6E141                  LDB _Ttmp172+2
4118  8110                    CMPA #16
411A  250A                    BLO _label178eval
411C  F6E140                  LDB _Ttmp172+1
411F  8118                    CMPA #24
4121  2503                    BLO _label178eval
4123  F6E13F                  LDB _Ttmp172
4126                  _label178eval
4126  8E3EC2                  LDX #bit_check_extended_tab
4129  B6E0A9                  LDA _Ttmp97
412C  8407                    ANDA #7
412E  E486                    ANDB A,X
4130  2702                    BEQ _label178end
4132  C6FF                    LDB #$ff
4134                  _label178end
4134  F7E148                  STB _Ttmp176
4137  F6E148                  LDB _Ttmp176
                              IF (((128+_label179e0-(*+2))|(127-_label179e0+(*+2)))&0x8000)
                              LBEQ _label179e0
                              ELSE
413A  271A                    BEQ _label179e0
                              ENDIF
413C                  _label179t
413C  F6E0BA                  LDB _draw__c
413F  F7E000                  STB _PEN
4142  BEE0C5                  LDX _Ttmp110
4145  BF0041                  STX PLOTX
4148  FCE0C9                  LDD _Ttmp111
414B  FD0043                  STD PLOTY
414E  8601                    LDA #1
4150  B70046                  STA PLOTM
4153  BD3F06                  JSR PLOT
4156                  _label179f
4156                  _label179e0
4156  7CE0A9                  INC _Ttmp97
4159  5F                      CLRB
415A  B6E0A9                  LDA _Ttmp97
415D  B1E0A7                  CMPA _Ttmp96
4160  2601                    BNE _label183
4162  5A                      DECB
4163                  _label183
4163  F7E14C                  STB _Ttmp182
4166  F6E14C                  LDB _Ttmp182
                              IF (((128+_label184e0-(*+2))|(127-_label184e0+(*+2)))&0x8000)
                              LBEQ _label184e0
                              ELSE
4169  2704                    BEQ _label184e0
                              ENDIF
416B                  _label184t
416B  4F                      CLRA
416C  B7E0A9                  STA _Ttmp97
416F                  _label184f
416F                  _label184e0
                              IF (((128+_label157-(*+2))|(127-_label157+(*+2)))&0x8000)
416F  7E4093                  JMP _label157
                              ELSE
                              BRA _label157
                              ENDIF
4172                  _label157bis
                              IF (((128+_label154f-(*+2))|(127-_label154f+(*+2)))&0x8000)
4172  7E426A                  JMP _label154f
                              ELSE
                              BRA _label154f
                              ENDIF
4175                  _label154e0
4175  F6E11E                  LDB _Ttmp152
                              IF (((128+_label154f-(*+2))|(127-_label154f+(*+2)))&0x8000)
4178  102600EE                LBNE _label154f
                              ELSE
                              BNE _label154f
                              ENDIF
417C  FCE109                  LDD _Ttmp137
417F  B3E0D1                  SUBD _Ttmp113
4182  FDE14F                  STD _Ttmp185
4185  FCE14F                  LDD _Ttmp185
4188  FDE0C1                  STD _Ttmp109
418B                  _label187
418B  5F                      CLRB
418C  BEE0C9                  LDX _Ttmp111
418F  BCE0B8                  CMPX _draw__y1
4192  2601                    BNE _label190
4194  5A                      DECB
4195                  _label190
4195  F7E154                  STB _Ttmp189
4198  F6E154                  LDB _Ttmp189
419B  53                      COMB
419C  F7E156                  STB _Ttmp191
419F  F6E156                  LDB _Ttmp191
                              IF (((128+_label187bis-(*+2))|(127-_label187bis+(*+2)))&0x8000)
41A2  102700C4                LBEQ _label187bis
                              ELSE
                              BEQ _label187bis
                              ENDIF
41A6  5F                      CLRB
41A7  BEE0C1                  LDX _Ttmp109
41AA  BCE0BD                  CMPX _Ttmp108
41AD  2D01                    BLT _label194
41AF  5A                      DECB
41B0                  _label194
41B0  F7E158                  STB _Ttmp193
41B3  F6E158                  LDB _Ttmp193
                              IF (((128+_label195e0-(*+2))|(127-_label195e0+(*+2)))&0x8000)
                              LBEQ _label195e0
                              ELSE
41B6  271E                    BEQ _label195e0
                              ENDIF
41B8                  _label195t
41B8  FCE0DD                  LDD _Ttmp116
41BB  F3E0C5                  ADDD _Ttmp110
41BE  FDE15B                  STD _Ttmp196
41C1  FCE15B                  LDD _Ttmp196
41C4  FDE0C5                  STD _Ttmp110
41C7  FCE0C1                  LDD _Ttmp109
41CA  B3E105                  SUBD _Ttmp136
41CD  FDE161                  STD _Ttmp198
41D0  FCE161                  LDD _Ttmp198
41D3  FDE0C1                  STD _Ttmp109
41D6                  _label195f
41D6                  _label195e0
41D6  FCE0E1                  LDD _Ttmp117
41D9  F3E0C9                  ADDD _Ttmp111
41DC  FDE167                  STD _Ttmp200
41DF  FCE167                  LDD _Ttmp200
41E2  FDE0C9                  STD _Ttmp111
41E5  FCE109                  LDD _Ttmp137
41E8  F3E0C1                  ADDD _Ttmp109
41EB  FDE16D                  STD _Ttmp202
41EE  FCE16D                  LDD _Ttmp202
41F1  FDE0C1                  STD _Ttmp109
41F4  CC0000                  LDD #$0000
41F7  FDE175                  STD _Ttmp204
41FA  FDE177                  STD _Ttmp204+2
41FD  FC2D40                  LDD LINE
4200  FDE177                  STD _Ttmp204+2
4203  B6E0A9                  LDA _Ttmp97
4206  F6E178                  LDB _Ttmp204+3
4209  8108                    CMPA #8
420B  2511                    BLO _label210eval
420D  F6E177                  LDB _Ttmp204+2
4210  8110                    CMPA #16
4212  250A                    BLO _label210eval
4214  F6E176                  LDB _Ttmp204+1
4217  8118                    CMPA #24
4219  2503                    BLO _label210eval
421B  F6E175                  LDB _Ttmp204
421E                  _label210eval
421E  8E3EC2                  LDX #bit_check_extended_tab
4221  B6E0A9                  LDA _Ttmp97
4224  8407                    ANDA #7
4226  E486                    ANDB A,X
4228  2702                    BEQ _label210end
422A  C6FF                    LDB #$ff
422C                  _label210end
422C  F7E17E                  STB _Ttmp208
422F  F6E17E                  LDB _Ttmp208
                              IF (((128+_label211e0-(*+2))|(127-_label211e0+(*+2)))&0x8000)
                              LBEQ _label211e0
                              ELSE
4232  271A                    BEQ _label211e0
                              ENDIF
4234                  _label211t
4234  F6E0BA                  LDB _draw__c
4237  F7E000                  STB _PEN
423A  BEE0C5                  LDX _Ttmp110
423D  BF0041                  STX PLOTX
4240  FCE0C9                  LDD _Ttmp111
4243  FD0043                  STD PLOTY
4246  8601                    LDA #1
4248  B70046                  STA PLOTM
424B  BD3F06                  JSR PLOT
424E                  _label211f
424E                  _label211e0
424E  7CE0A9                  INC _Ttmp97
4251  5F                      CLRB
4252  B6E0A9                  LDA _Ttmp97
4255  B1E0A7                  CMPA _Ttmp96
4258  2601                    BNE _label215
425A  5A                      DECB
425B                  _label215
425B  F7E182                  STB _Ttmp214
425E  F6E182                  LDB _Ttmp214
                              IF (((128+_label216e0-(*+2))|(127-_label216e0+(*+2)))&0x8000)
                              LBEQ _label216e0
                              ELSE
4261  2704                    BEQ _label216e0
                              ENDIF
4263                  _label216t
4263  4F                      CLRA
4264  B7E0A9                  STA _Ttmp97
4267                  _label216f
4267                  _label216e0
                              IF (((128+_label187-(*+2))|(127-_label187+(*+2)))&0x8000)
4267  7E418B                  JMP _label187
                              ELSE
                              BRA _label187
                              ENDIF
426A                  _label187bis
426A                  _label154f
426A                  _label154e1
426A  39                      RTS
426B                  draw_after
426B  FCE075                  LDD _Ttmp71
426E  FDE0B2                  STD _draw__x0
4271  FCE090                  LDD _Ttmp83
4274  FDE0B4                  STD _draw__y0
4277  FCE09A                  LDD _Ttmp87
427A  FDE0B6                  STD _draw__x1
427D  FCE0AC                  LDD _Ttmp105
4280  FDE0B8                  STD _draw__y1
4283  F6E000                  LDB _PEN
4286  F7E0BA                  STB _draw__c
                              IF (((128+lib_draw-(*+2))|(127-lib_draw+(*+2)))&0x8000)
4289  BD3DE9                  JSR lib_draw
                              ELSE
                              BSR lib_draw
                              ENDIF
428C  FCE086                  LDD _mid1
                      ; peephole(9): direct-page1
                      ;       STD XGR
428F  DDF1                    STD <XGR
4291  CC0000                  LDD #$0000
                      ; peephole(5): unread1
                      ;       STD YGR
4294  B7E026                  STA _Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
4297  F6E09F                  LDB _Ttmp89
                      ; peephole(5): unread1
                      ;       STB YGR+1
                              ; P:710
                              ; L:46
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
429A  5F                      CLRB
429B  FDE090                  STD _Ttmp83
429E  F6E026                  LDB _Ttmp2
42A1  F7E091                  STB _Ttmp83+1
42A4  FCE090                  LDD _Ttmp83
42A7  FDE075                  STD _Ttmp71
42AA  C660                    LDB #$60
42AC  F7E093                  STB _Ttmp85
42AF  CC0000                  LDD #$0000
42B2  FDE09A                  STD _Ttmp87
42B5  F6E093                  LDB _Ttmp85
42B8  F7E09B                  STB _Ttmp87+1
42BB  FCE09A                  LDD _Ttmp87
42BE  FDE096                  STD _Ttmp86
42C1  CC0140                  LDD #$0140
42C4  FDE029                  STD _Ttmp5
42C7  FCE029                  LDD _Ttmp5
42CA  FDE0AC                  STD _Ttmp105
42CD  F6E0AC                  LDB _Ttmp105
42D0  C47F                    ANDB #$7f
42D2  F7E0AC                  STB _Ttmp105
42D5  C660                    LDB #$60
42D7  F7E0A5                  STB _Ttmp94
42DA  CC0000                  LDD #$0000
42DD  FDE0BD                  STD _Ttmp108
42E0  F6E0A5                  LDB _Ttmp94
42E3  F7E0BE                  STB _Ttmp108+1
42E6  FCE0BD                  LDD _Ttmp108
42E9  FDE0B0                  STD _Ttmp106
42EC  FCE075                  LDD _Ttmp71
42EF  FDE0B2                  STD _draw__x0
42F2  FCE096                  LDD _Ttmp86
42F5  FDE0B4                  STD _draw__y0
42F8  FCE0AC                  LDD _Ttmp105
42FB  FDE0B6                  STD _draw__x1
42FE  FCE0B0                  LDD _Ttmp106
4301  FDE0B8                  STD _draw__y1
4304  F6E000                  LDB _PEN
4307  F7E0BA                  STB _draw__c
                              IF (((128+lib_draw-(*+2))|(127-lib_draw+(*+2)))&0x8000)
430A  BD3DE9                  JSR lib_draw
                              ELSE
                              BSR lib_draw
                              ENDIF
430D  FCE029                  LDD _Ttmp5
                      ; peephole(9): direct-page1
                      ;       STD XGR
4310  DDF1                    STD <XGR
                      ; peephole(9): direct-page1
                      ;       LDB XGR
4312  D6F1                    LDB <XGR
4314  C47F                    ANDB #$7f
                      ; peephole(9): direct-page1
                      ;       STB XGR
4316  D7F1                    STB <XGR
4318  CC0000                  LDD #$0000
                      ; peephole(5): unread1
                      ;       STD YGR
431B  B7E026                  STA _Ttmp2
                      ; peephole(6): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp94
                      ; peephole(5): unread1
                      ;       STB YGR+1
                              ; P:55
                              ; L:47
                              ; P:0
                              ; L:48
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
431E  F6E071                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4321  C47F                    ANDB #$7f
4323  F700D3                  STB XCURSYS
4326  F6E026                  LDB _Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
4329  C47F                    ANDB #$7f
432B  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:49
432E  F657FD                  LDB _Tstr230
4331  F7E026                  STB _Ttmp2
4334  CC57FD                  LDD #_Tstr230
4337  FDE033                  STD _Ttmp9
433A  7CE034                  INC _Ttmp9+1
433D  2603                    BNE _label232
433F  7CE033                  INC _Ttmp9
4342                  _label232
                              IF (((128+textEncodedAt_after-(*+2))|(127-textEncodedAt_after+(*+2)))&0x8000)
                              JMP textEncodedAt_after
                              ELSE
4342  2000                    BRA textEncodedAt_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      TEXT AT GIVEN POSITION ON GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
0001                  TEXTPTR equ $01
0003                  TEXTSIZE equ $03
0004                  TABSTODRAW equ $04
0008                  SCREENCODE equ $08
                      
4344                  textEncodedAt_after
4344  10BEE033                LDY _Ttmp9
4348  10BF0001                STY TEXTPTR
434C  B6E026                  LDA _Ttmp2
434F  B70003                  STA TEXTSIZE
                              IF (((128+textEncodedAtGraphic_after-(*+2))|(127-textEncodedAtGraphic_after+(*+2)))&0x8000)
4352  7E461C                  JMP textEncodedAtGraphic_after
                              ELSE
                              BRA textEncodedAtGraphic_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      TEXT AT GIVEN POSITION ON GIME                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
4355                  TEXTATBMDRAWCHAR
4355  3477                    PSHS D,X , Y, U, CC
                      
                          ; The PRINT primitive should have control if it is necessary to bank 
                          ; in the RAM and, if necessary, to differentiate the drawing logic.
                          ; However, since the font is probably in the screen segment,
                          ; there is no reason to differentiate.
                      
4357  C608                    LDB #$08
4359  3D                      MUL
435A  C35824                  ADDD #UDCCHAR
435D  1F02                    TFR D,Y 
                      
435F  B600D6                  LDA YCURSYS
4362  C608                    LDB #8
4364  3D                      MUL
4365  FD0043                  STD PLOTY
                      
4368  B600D3                  LDA XCURSYS
436B  C608                    LDB #8
436D  3D                      MUL
436E  FD0041                  STD PLOTX
                      
4371  BD2F92                  JSR GIMECALCPOSBM
                      
                      ; peephole(9): direct-page1
                      ;       LDA CURRENTMODE
4374  96F0                    LDA <CURRENTMODE
4376  84E0                    ANDA #$E0
4378  81E0                    CMPA #$E0
437A  270F                    BEQ TEXTATBMDRAWCHARB16
437C  8160                    CMPA #$60
437E  102700B6                LBEQ TEXTATBMDRAWCHARB4
4382  8140                    CMPA #$40
4384  10270111                LBEQ TEXTATBMDRAWCHARB2
                      
4388  3577                    PULS D,X , Y, U, CC
438A  39                      RTS
                      
438B                  TEXTATBMDRAWCHARB16
438B  B6313D                  LDA CURRENTTILESWIDTH
438E  C602                    LDB #2
4390  3D                      MUL
                      
4391  CE0008                  LDU #8
4394                  TEXTATBMDRAWCHARB16L1
4394  BD2E0B                  JSR GIMEBANKROM
4397  A6A0                    LDA ,Y +
4399  BD2DFD                  JSR GIMEBANKVIDEO
                      
439C  3003                    LEAX 3,X 
                      
439E  3446                    PSHS U, D
43A0  CE0002                  LDU #2
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
43A3  5F                      CLRB
43A4  E784                    STB ,X 
43A6  F60045                  LDB PLOTC
43A9                  TEXTATBMDRAWCHARB16L1A
43A9  44                      LSRA
43AA  2404                    BCC TEXTATBMDRAWCHARB16L1A0
43AC  EA84                    ORB ,X 
43AE  E784                    STB ,X 
43B0                  TEXTATBMDRAWCHARB16L1A0
43B0  58                      LSLB
43B1  58                      LSLB
43B2  58                      LSLB
43B3  58                      LSLB
43B4  335F                    LEAU -1,U 
43B6  11830000                CMPU #0
43BA  26ED                    BNE TEXTATBMDRAWCHARB16L1A
43BC  3540                    PULS U
                      
43BE  301F                    LEAX -1,X 
                      
43C0  3440                    PSHS U
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
43C2  5F                      CLRB
43C3  E784                    STB ,X 
43C5  F60045                  LDB PLOTC
43C8  CE0002                  LDU #2
43CB                  TEXTATBMDRAWCHARB16L1B
43CB  44                      LSRA
43CC  2404                    BCC TEXTATBMDRAWCHARB16L1B0
43CE  EA84                    ORB ,X 
43D0  E784                    STB ,X 
43D2                  TEXTATBMDRAWCHARB16L1B0
43D2  58                      LSLB
43D3  58                      LSLB
43D4  58                      LSLB
43D5  58                      LSLB
43D6  335F                    LEAU -1,U 
43D8  11830000                CMPU #0
43DC  26ED                    BNE TEXTATBMDRAWCHARB16L1B
43DE  3540                    PULS U
                      
43E0  301F                    LEAX -1,X 
                      
43E2  3440                    PSHS U
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
43E4  5F                      CLRB
43E5  E784                    STB ,X 
43E7  F60045                  LDB PLOTC
43EA  CE0002                  LDU #2
43ED                  TEXTATBMDRAWCHARB16L1C
43ED  44                      LSRA
43EE  2404                    BCC TEXTATBMDRAWCHARB16L1C0
43F0  EA84                    ORB ,X 
43F2  E784                    STB ,X 
43F4                  TEXTATBMDRAWCHARB16L1C0
43F4  58                      LSLB
43F5  58                      LSLB
43F6  58                      LSLB
43F7  58                      LSLB
43F8  335F                    LEAU -1,U 
43FA  11830000                CMPU #0
43FE  26ED                    BNE TEXTATBMDRAWCHARB16L1C
4400  3540                    PULS U
                      
4402  301F                    LEAX -1,X 
                      
4404  3440                    PSHS U
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
4406  5F                      CLRB
4407  E784                    STB ,X 
4409  F60045                  LDB PLOTC
440C  CE0002                  LDU #2
440F                  TEXTATBMDRAWCHARB16L1D
440F  44                      LSRA
4410  2404                    BCC TEXTATBMDRAWCHARB16L1D0
4412  EA84                    ORB ,X 
4414  E784                    STB ,X 
4416                  TEXTATBMDRAWCHARB16L1D0
4416  58                      LSLB
4417  58                      LSLB
4418  58                      LSLB
4419  58                      LSLB
441A  335F                    LEAU -1,U 
441C  11830000                CMPU #0
4420  26ED                    BNE TEXTATBMDRAWCHARB16L1D
4422  3546                    PULS D,U 
                      
4424  3085                    LEAX B,X 
4426  3085                    LEAX B,X 
4428  335F                    LEAU -1,U 
442A  11830000                CMPU #0
442E  1026FF62                LBNE TEXTATBMDRAWCHARB16L1
                      
4432  BD2E0B                  JSR GIMEBANKROM
                      
4435  3577                    PULS D,X , Y, U, CC
4437  39                      RTS
                      
4438                  TEXTATBMDRAWCHARB4
4438  B6313D                  LDA CURRENTTILESWIDTH
443B  C602                    LDB #2
443D  3D                      MUL
                      
443E  CE0008                  LDU #8
4441                  TEXTATBMDRAWCHARB4L1
4441  BD2E0B                  JSR GIMEBANKROM
4444  A6A0                    LDA ,Y +
4446  BD2DFD                  JSR GIMEBANKVIDEO
                      
4449  3001                    LEAX 1,X 
                      
444B  3446                    PSHS U, D
444D  CE0004                  LDU #4
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
4450  5F                      CLRB
4451  E784                    STB ,X 
4453  F60045                  LDB PLOTC
4456                  TEXTATBMDRAWCHARB4L2
4456  44                      LSRA
4457  2404                    BCC TEXTATBMDRAWCHARB4L10
4459  EA84                    ORB ,X 
445B  E784                    STB ,X 
445D                  TEXTATBMDRAWCHARB4L10    
445D  58                      LSLB
445E  58                      LSLB
445F  335F                    LEAU -1,U 
4461  11830000                CMPU #0
4465  26EF                    BNE TEXTATBMDRAWCHARB4L2
4467  3540                    PULS U
                      
4469  301F                    LEAX -1,X 
                      
446B  3440                    PSHS U
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
446D  5F                      CLRB
446E  E784                    STB ,X 
4470  F60045                  LDB PLOTC
4473  CE0004                  LDU #4
4476                  TEXTATBMDRAWCHARB4L2B
4476  44                      LSRA
4477  2404                    BCC TEXTATBMDRAWCHARB4L10C
4479  EA84                    ORB ,X 
447B  E784                    STB ,X 
447D                  TEXTATBMDRAWCHARB4L10C
447D  58                      LSLB
447E  58                      LSLB
447F  335F                    LEAU -1,U 
4481  11830000                CMPU #0
4485  26EF                    BNE TEXTATBMDRAWCHARB4L2B
4487  3546                    PULS D,U 
                      
4489  3085                    LEAX B,X 
448B  335F                    LEAU -1,U 
448D  11830000                CMPU #0
4491  26AE                    BNE TEXTATBMDRAWCHARB4L1
                      
4493  BD2E0B                  JSR GIMEBANKROM
                      
4496  3577                    PULS D,X , Y, U, CC
4498  39                      RTS
                      
4499                  TEXTATBMDRAWCHARB2
4499  B6313D                  LDA CURRENTTILESWIDTH
449C  C601                    LDB #1
449E  3D                      MUL
                      
449F  CE0008                  LDU #8
44A2                  TEXTATBMDRAWCHARB2L1
44A2  BD2E0B                  JSR GIMEBANKROM
44A5  A6A0                    LDA ,Y +
44A7  BD2DFD                  JSR GIMEBANKVIDEO
44AA  A784                    STA ,X 
44AC  335F                    LEAU -1,U 
44AE  3085                    LEAX B,X 
44B0  11830000                CMPU #0
44B4  26EC                    BNE TEXTATBMDRAWCHARB2L1
                      
44B6  BD2E0B                  JSR GIMEBANKROM
                      
44B9  3577                    PULS D,X , Y, U, CC
44BB  39                      RTS
                      
                          ; This small routine will print a string on the screen, when
                          ; in bitmap mode. This routine will try to avoid to do anything
                          ; if in text mode and / or the string is empty.
                      
44BC                  TEXTATBITMAPMODE
                      
44BC  F6E000                  LDB _PEN
44BF  BD2F6F                  JSR GIMESELECTPALETTE
44C2  B70045                  STA PLOTC
                      
                          ; Avoid to do anything if we are in text mode.
44C5  B6311B                  LDA CURRENTTILEMODE
44C8  2701                    BEQ TEXTATBMMODEGO
44CA  39                      RTS
                      
44CB                  TEXTATBMMODEGO
                      
                          ; Avoid to do anything if there is no text to print.
44CB  B60003                  LDA TEXTSIZE
44CE  2601                    BNE TEXTATBMGO
44D0  39                      RTS
                      
                          ; The routine starts here!
                      
44D1                  TEXTATBMGO
                      
                          ; Prepare the color
                      
                          ; Load the starting address of the video ram
                          ; in a specific location, as a copy. This makes
                          ; possible to calculate the exact position where
                          ; to write, based on the actual cursor position.
                      
                          ; Initialize the counter for printing tabs.
                      
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
44D1  4F                      CLRA
44D2  B70004                  STA TABSTODRAW
                      
                          ; Load in Y register the starting address of the
                          ; string to print on the video RAM.
                      
44D5  10BE0001                LDY TEXTPTR
                      
                          ; Load in B the size of the string.
                      
44D9  F60003                  LDB TEXTSIZE
                      
                          ; When program reach this point, we are going to
                          ; print the next character.
                      
44DC                  TEXTATBMLOOP2
                      
                          ; If there are TABs to print, we have to skip the printing.
                      
44DC  B60004                  LDA TABSTODRAW
44DF  102600F2                LBNE TEXTATBMSKIPTAB
                      
                          ; Load the character from the string and move it into the
                          ; A register, offseted by Y. Move ahead of one character and
                          ; decrement the size of the string.
                      
44E3  A6A0                    LDA ,Y+
44E5  5A                      DECB
                      
                          ; All characters from 0 to 31 are special, so we mu9t
                          ; parse it, if needed. If the character is higher,
                          ; we can simply print it.
                      
44E6  811F                    CMPA #31
44E8  102200E3                LBHI TEXTATBMSP0
                      
                          ; Let's go to decode the special character.
                      
44EC  7E4510                  JMP TEXTATBMCC
                      
                          ; This code will be executed if a TAB character is found
                          ; in the string. In that case, the character will be
                          ; translated in enough spaces until we reach the next
                          ; TAB marker on the screen.
                      
44EF                  TEXTATBMTAB
                      
                          ; In order to calculate where to print the next character
                          ; after the TAB character, we start considering the
                          ; current X position. If the current position is greater
                          ; than the number of spaces equivalent to a TAB, we subtract
                          ; the number of spaces from the current X position, until
                          ; we reach that limit. The complement is the number of spaces
                          ; that will be printed out to reach the next TAB marker.
                      
                          ; Loop until X cursor position is greater than tab count.
                      
44EF  B600D3                  LDA XCURSYS
44F2                  TEXTATBMTAB2
44F2  B12C11                  CMPA TABCOUNT
44F5  2508                    BLO TEXTATBMTAB3
44F7  1C01                    ANDCC #$01
44F9  B02C11                  SUBA TABCOUNT
44FC  7E44F2                  JMP TEXTATBMTAB2
                      
                          ; Calculate the complement for tab count.
                      
44FF                  TEXTATBMTAB3
44FF  B70010                  STA TMPPTR
4502  B62C11                  LDA TABCOUNT
4505  1C01                    ANDCC #$01
4507  B00010                  SUBA TMPPTR
450A  B70004                  STA TABSTODRAW
                      
                          ; Move to the next character to print.
                      
450D  7E45FE                  JMP TEXTATBMNEXT
                      
                          ; This code will be executed if a special character
                          ; has to be decoded. 
                      
4510                  TEXTATBMCC
                      
                          ; CR -> move ahead and down like a line feed
4510  810D                    CMPA #13
4512  2729                    BEQ TEXTATBMLF
                      
                          ; LF -> move ahead and down like a line feed
4514  810A                    CMPA #10
4516  2725                    BEQ TEXTATBMLF
                      
                          ; TAB -> move to the next tab marker
4518  8109                    CMPA #09
451A  27D3                    BEQ TEXTATBMTAB
                      
                          ; PEN -> change the pen color
451C  8101                    CMPA #01    
451E  272A                    BEQ TEXTATBMPEN
                      
                          ; PAPER -> change the paper color
4520  8102                    CMPA #02
4522  2740                    BEQ TEXTATBMPAPER
                      
                          ; CMOVE -> move the cursor to a relative position
4524  8103                    CMPA #03
4526  10270055                LBEQ TEXTATBMCMOVEPREPARE
                      
                          ; AT -> move the cursor to an absolute position
452A  8104                    CMPA #04
452C  10270086                LBEQ TEXTATBMAT
                      
                          ; CLS -> clear the screen
4530  8105                    CMPA #05
4532  2703                    BEQ TEXTATBMCLS
                      
                          ; Move to the next character to print.
                      
4534  7E45FE                  JMP TEXTATBMNEXT
                      
                          ; This routine will process a clear screen embedded command
                          ; into the string to print.
                      
4537                  TEXTATBMCLS
                      
4537  BD39F3                  JSR CLSG
                      
                          ; Move to the next character to print.
                      
453A  7E45FE                  JMP TEXTATBMNEXT
                      
                          ; This routine will process a LF command.
                      
453D                  TEXTATBMLF
                      
                          ; In order to move to the next line, I have to move ahead of
                          ; an entire line, and "come back" for a number of character
                          ; that is equal to the horizontal position. Move one character
                          ; back and update the address.
                      
453D  B6313D                  LDA CURRENTTILESWIDTH
4540  B000D3                  SUBA XCURSYS
4543  8001                    SUBA #1
4545  3086                    LEAX A,X
                      
                          ; Move to the routine that should scroll the video if we are
                          ; printing on the last line of the screen.
                      
4547  7E45E9                  JMP TEXTATBMNEXT2
                      
                          ; This routine will change the current pen color, used for
                          ; the following writing texts.
                      
454A                  TEXTATBMPEN
                      
                          ; We have to check if the current WRITING flags allows to
                          ; change the pen color.
                      
                      ; peephole(9): inlined1
                      ;       LDA TEXTWW
454A  8603                    LDA #3
454B                  TEXTWW equ *-1
454C  8402                    ANDA #$2
454E  270E                    BEQ TEXTATBMPENDISABLED
                      
                          ; Load the parameter from the next character.
4550  A6A0                    LDA ,Y +
4552  5A                      DECB
                      
                          ; A parameter of $FF means $00.
4553  81FF                    CMPA #$FF
4555  2601                    BNE TEXTATBMPEN2
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
4557  4F                      CLRA
4558                  TEXTATBMPEN2
4558  B7E000                  STA _PEN
                      
                          ; Move to the next character to print.
                      
455B  7E45FE                  JMP TEXTATBMNEXT
                      
                          ; Change pen color is disabled. So we can ignore the
                          ; parameter, and move ahead.
                      
455E                  TEXTATBMPENDISABLED
455E  3121                    LEAY 1,Y
4560  5A                      DECB
                      
                          ; Move to the next character to print.
                      
4561  7E45FE                  JMP TEXTATBMNEXT
                      
                          ; This routine will change the current paper color, used for
                          ; the following writing texts.
                      
4564                  TEXTATBMPAPER
                      
                          ; We have to check if the current WRITING flags allows to
                          ; change the paper color.
                      
4564  B6454B                  LDA TEXTWW
4567  8401                    ANDA #$1
4569  270E                    BEQ TEXTATBMPAPERDISABLED
                      
                          ; Load the parameter from the next character.
456B  A6A0                    LDA ,Y +
456D  5A                      DECB
                      
                          ; Save the paper.
                          ; A parameter of $FF means $00.
456E  81FF                    CMPA #$FF
4570  2601                    BNE TEXTATBMPAPER2
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
4572  4F                      CLRA
4573                  TEXTATBMPAPER2
4573  B7E001                  STA _PAPER
                      
                          ; Move to the next character to print.
                      
4576  7E45FE                  JMP TEXTATBMNEXT
                      
                          ; Change paper color is disabled. So we can ignore the
                          ; parameter, and move ahead.
                      
4579                  TEXTATBMPAPERDISABLED
4579  3121                    LEAY 1,Y
457B  5A                      DECB
457C  7E45FE                  JMP TEXTATBMNEXT
                      
                          ; This routine will move the current cursor position on a relative
                          ; position.
                      
457F                  TEXTATBMCMOVEPREPARE
                      
                          ; Load and store the delta on abscissa.
                      
457F  A6A0                    LDA ,Y +
4581  5A                      DECB
4582  B7004B                  STA CLINEX
                      
                          ; Load and store the delta on ordinate.
                              
4585  A6A0                    LDA ,Y +
4587  5A                      DECB
4588  B7004C                  STA CLINEY
                      
                          ; This routine will move the current cursor position
                          ; on an absolute position.
                      
458B                  TEXTATBMCMOVE
                      
                          ; To calculate the absolute position we are going to
                          ; add the delta to the current horizontal position.
                      
458B  1CFE                    ANDCC #$FE
458D  B6004B                  LDA CLINEX
4590  BB00D3                  ADDA XCURSYS
                      
                          ; If the calculated horizontal position is negative,
                          ; we have nothing to do.
                      
4593  8100                    CMPA #$0
4595  2D08                    BLT TEXTATBMCMOVESKIPX
                      
                          ; If the calculated horizontal position is over
                          ; the lenght of the line, we have nothing to do.
                      
4597  B1313D                  CMPA CURRENTTILESWIDTH
459A  2C03                    BGE TEXTATBMCMOVESKIPX
                      
                          ; Store the new horizontal position.
                      
459C  B700D3                  STA XCURSYS
                      
                          ; Update the address by delta.
                      
459F                  TEXTATBMCMOVESKIPX
                      
                          ; To calculate the absolute position we are going to
                          ; add the delta to the current vertical position.
                      
459F  1CFE                    ANDCC #$FE
45A1  B6004C                  LDA CLINEY
45A4  BB00D6                  ADDA YCURSYS
                      
                          ; If the calculated vertical position is negative,
                          ; we have nothing to do.
                      
45A7  8100                    CMPA #$0
45A9  2D08                    BLT TEXTATBMCMOVESKIPY
                      
                          ; If the calculated vertical position is over
                          ; the lenght of the screen, we have nothing to do.
                      
45AB  B1313F                  CMPA CURRENTTILESHEIGHT
45AE  2C03                    BGE TEXTATBMCMOVESKIPY
                      
                          ; Store the new vertical position.
                      
45B0  B700D6                  STA YCURSYS
                      
                          ; Update the address by delta.
                      
45B3                  TEXTATBMCMOVESKIPY
                      
                          ; Move to the next character to print.
                      
45B3  7E45FE                  JMP TEXTATBMNEXT
                      
                          ; This routine will prepare the delta to move the cursor
                          ; to an absolute position, to print.
                      
45B6                  TEXTATBMAT
                      
                          ; The horizontal delta is calculated started from
                          ; the current position.
                      
45B6  A6A0                    LDA ,Y +
45B8  5A                      DECB
45B9  1C01                    ANDCC #$01
45BB  B000D3                  SUBA XCURSYS
45BE  B7004B                  STA CLINEX
                      
                          ; The vertical delta is calculated started from
                          ; the current position.
                      
45C1  A6A0                    LDA ,Y +
45C3  5A                      DECB
45C4  1C01                    ANDCC #$01
45C6  B000D6                  SUBA YCURSYS
45C9  B7004C                  STA CLINEY
                      
                          ; Change the position like a CMOVE.
                      
45CC  7E458B                  JMP TEXTATBMCMOVE
                      
                          ; Print the character on the screen.
                      
45CF                  TEXTATBMSP0
                      
45CF  BD4355                  JSR TEXTATBMDRAWCHAR
                      
45D2  7E45DB                  JMP TEXTATBMINCX
                      
                          ; If the program reach this point, it means that must skip
                          ; the character in order to move the cursor ahead by one
                          ; character, to move to the next tab marker.
                      
45D5                  TEXTATBMSKIPTAB
45D5  7A0004                  DEC TABSTODRAW
45D8  7E45DB                  JMP TEXTATBMINCX
                      
                          ; Go ahead by one character.
                      
45DB                  TEXTATBMINCX
                      
                          ; Increment the current horizontal position.
                      
45DB  7C00D3                  INC XCURSYS
                      
                          ; If the current horizontal position is at the end
                          ; of the line, we must increment the vertical position.
                      
45DE  B600D3                  LDA XCURSYS
45E1  B1313D                  CMPA CURRENTTILESWIDTH
45E4  2703                    BEQ TEXTATBMNEXT2
                      
                          ; Move to the next character to print.
                      
45E6  7E45FE                  JMP TEXTATBMNEXT
                      
45E9                  TEXTATBMNEXT2
                      
                          ; Put 0 as horizontal position.
                      
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
45E9  4F                      CLRA
45EA  B700D3                  STA XCURSYS
                      
                          ; Increment the vertical position.
                      
45ED  7C00D6                  INC YCURSYS
                      
                          ; If the current vertical position is at the end
                          ; of the screen, we must scroll the screen.
                      
45F0  B600D6                  LDA YCURSYS
45F3  B1313F                  CMPA CURRENTTILESHEIGHT
45F6  2703                    BEQ TEXTATBMNEXT3
                      
                          ; Move to the next character to print.
                      
45F8  7E45FE                  JMP TEXTATBMNEXT
                      
45FB                  TEXTATBMNEXT3
                      
                          ; Let's scroll vertically
                      
                          ; LDA #$FE
                          ; STA DIRECTION
                          ; JSR VSCROLLG
                      
                          ; Decrement the current vertical position, since
                          ; now the last line is not last anymore.
                      
45FB  7A00D6                  DEC YCURSYS
                      
                          ; Manage for the next character to print.
                      
45FE                  TEXTATBMNEXT
                      
                          ; If there are characters to skip to reach
                          ; tabs marker, move ahead and loop.
                      
45FE  B60004                  LDA TABSTODRAW
4601  1026FED7                LBNE TEXTATBMLOOP2
                      
                          ; If there are still characters to print,
                          ; loop again.
                              
4605  C100                    CMPB #0
4607  1026FED1                LBNE TEXTATBMLOOP2
                              
460B  39                      RTS
                      
460C                  TEXTATFLIP
460C  0008040C020A060E         fcb $0, $8, $4, $c, $2, $a, $6, $e
4614  0109050D030B070F         fcb $1, $9, $5, $d, $3, $b, $7, $f
461C                  textEncodedAtGraphic_after
461C  BD44BC                  JSR TEXTATBITMAPMODE
                              ; P:391
                              ; L:50
461F  C601                    LDB #$01
4621  F7E026                  STB _Ttmp2
4624  F6E071                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4627  C47F                    ANDB #$7f
4629  F700D3                  STB XCURSYS
462C  F6E026                  LDB _Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
462F  C47F                    ANDB #$7f
4631  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:51
4634  F6E194                  LDB _Ttmp236
4637  BD31C7                  JSR DSFREE
463A  108E57D4                LDY #_Tstr234
463E  BD31B5                  JSR DSDEFINE
4641  F7E194                  STB _Ttmp236
4644  F6E196                  LDB _Ttmp237
4647  BD31C7                  JSR DSFREE
464A  108E57D4                LDY #_Tstr234
464E  BD31B5                  JSR DSDEFINE
4651  F7E196                  STB _Ttmp237
4654  F6E196                  LDB _Ttmp237
4657  BD321B                  JSR DSDESCRIPTOR
465A  EC01                    LDD 1,X 
465C  FDE033                  STD _Ttmp9
465F  A684                    LDA ,X 
4661  B7E03C                  STA _Ttmp12
4664  F6E072                  LDB _batt
4667  BD321B                  JSR DSDESCRIPTOR
466A  EC01                    LDD 1,X 
466C  FDE039                  STD _Ttmp11
466F  A684                    LDA ,X 
4671  B7E089                  STA _Ttmp78
4674  F6E03C                  LDB _Ttmp12
4677  FBE089                  ADDB _Ttmp78
467A  F7E093                  STB _Ttmp85
467D  F6E198                  LDB _Ttmp238
4680  BD31C7                  JSR DSFREE
4683  B6E093                  LDA _Ttmp85
4686  BD327C                  JSR DSALLOC
4689  F7E198                  STB _Ttmp238
468C  F6E198                  LDB _Ttmp238
468F  BD321B                  JSR DSDESCRIPTOR
4692  EC01                    LDD 1,X 
4694  FDE19B                  STD _Ttmp239
4697  A684                    LDA ,X 
4699  B7E093                  STA _Ttmp85
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
469C  4F                      CLRA
469D  F6E03C                  LDB _Ttmp12
46A0  10BEE033                LDY _Ttmp9
46A4  BEE19B                  LDX _Ttmp239
46A7  BD32D6                  JSR DUFFDEVICE
46AA  BEE19B                  LDX _Ttmp239
46AD  F6E03C                  LDB _Ttmp12
46B0  3A                      ABX
46B1  BFE19B                  STX _Ttmp239
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
46B4  4F                      CLRA
46B5  F6E089                  LDB _Ttmp78
46B8  10BEE039                LDY _Ttmp11
46BC  BEE19B                  LDX _Ttmp239
46BF  BD32D6                  JSR DUFFDEVICE
46C2  F6E198                  LDB _Ttmp238
46C5  BD321B                  JSR DSDESCRIPTOR
46C8  EC01                    LDD 1,X 
46CA  FDE19F                  STD _Ttmp241
46CD  A684                    LDA ,X 
46CF  B7E09D                  STA _Ttmp88
46D2  10BEE19F                LDY _Ttmp241
46D6  10BF0001                STY TEXTPTR
46DA  B6E09D                  LDA _Ttmp88
46DD  B70003                  STA TEXTSIZE
46E0  BD44BC                  JSR TEXTATBITMAPMODE
46E3  4F                      CLRA
46E4  B700D3                  STA XCURSYS
46E7  7C00D6                  INC YCURSYS
46EA  F6313F                  LDB CURRENTTILESHEIGHT
46ED  F7E0F4                  STB _Ttmp125
46F0  F6E0F4                  LDB _Ttmp125
46F3  C47F                    ANDB #$7f
46F5  F7E0F4                  STB _Ttmp125
46F8  5F                      CLRB
46F9  B600D6                  LDA YCURSYS
46FC  B1E0F4                  CMPA _Ttmp125
46FF  2D01                    BLT _label245
4701  5A                      DECB
4702                  _label245
4702  F7E0FC                  STB _Ttmp131
4705  F6E0FC                  LDB _Ttmp131
                              IF (((128+_label243scroll-(*+2))|(127-_label243scroll+(*+2)))&0x8000)
                              LBNE _label243scroll
                              ELSE
4708  2603                    BNE _label243scroll
                              ENDIF
                              IF (((128+_label243end-(*+2))|(127-_label243end+(*+2)))&0x8000)
470A  7E47ED                  JMP _label243end
                              ELSE
                              BRA _label243end
                              ENDIF
470D                  _label243scroll
                              IF (((128+vScrollText_after-(*+2))|(127-vScrollText_after+(*+2)))&0x8000)
470D  7E47DC                  JMP vScrollText_after
                              ELSE
                              BRA vScrollText_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          VERTICAL SCROLL ON GIME                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
4710                  VSCROLLT
4710  B6311B                  LDA CURRENTTILEMODE
4713  2601                    BNE VSCROLLTX
4715  39                      RTS
4716                  VSCROLLTX
4716  3476                    PSHS A,B,X,Y,U
                          ; The VSCROLL command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
4718  BD2DFD                  JSR GIMEBANKVIDEO
471B  F6E000                  LDB _PEN
471E  BD2F59                  JSR GIMESELECTPALETTEPEN
4721  48                      LSLA
4722  48                      LSLA
4723  48                      LSLA
4724  B70045                  STA PLOTC
4727  F6E001                  LDB _PAPER
472A  BD2F64                  JSR GIMESELECTPALETTEPAPER
472D  BA0045                  ORA PLOTC
4730  B70045                  STA PLOTC
4733  B6004A                  LDA DIRECTION
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
4736  2E4C                    BGT VSCROLLTDOWN
4738                  VSCROLLTUP
4738  B6313D                  LDA CURRENTTILESWIDTH
473B  BE3146                  LDX TEXTADDRESS
473E  10BE3146                LDY TEXTADDRESS
4742  31A6                    LEAY A,Y 
4744  31A6                    LEAY A,Y 
4746  B6313D                  LDA CURRENTTILESWIDTH
4749  F6313F                  LDB CURRENTTILESHEIGHT
474C  3D                      MUL
474D  58                      LSLB
474E  49                      ROLA
474F  1F03                    TFR D,U 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4751  4F                      CLRA
4752  F6313D                  LDB CURRENTTILESWIDTH
4755  40                      NEGA
4756  50                      NEGB
4757  8200                    SBCA #0
4759  33CB                    LEAU D,U 
475B  33CB                    LEAU D,U 
475D                  VSCROLLTUPYSCR1
475D  A6A0                    LDA ,Y+
475F  A780                    STA ,X+
4761  335F                    LEAU -1,U 
4763  11830000                CMPU #0
4767  26F4                    BNE VSCROLLTUPYSCR1
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4769  4F                      CLRA
476A  F6313D                  LDB CURRENTTILESWIDTH
476D  1F03                    TFR D,U 
476F  B62C12                  LDA EMPTYTILE
4772  F60045                  LDB PLOTC
4775                  VSCROLLTUPYSCR2
4775  ED84                    STD ,X
4777  3002                    LEAX 2,X
4779  335F                    LEAU -1,U 
477B  11830000                CMPU #0
477F  26F4                    BNE VSCROLLTUPYSCR2
4781  7E47D6                  JMP VSCROLLTE
4784                  VSCROLLTDOWN
4784  B6313D                  LDA CURRENTTILESWIDTH
4787  F6313F                  LDB CURRENTTILESHEIGHT
478A  3D                      MUL
478B  58                      LSLB
478C  49                      ROLA
478D  1F03                    TFR D,U 
478F  BE3146                  LDX TEXTADDRESS
4792  10BE3146                LDY TEXTADDRESS
4796  31AB                    LEAY D,Y 
4798  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
479A  4F                      CLRA
479B  F6313D                  LDB CURRENTTILESWIDTH
479E  58                      LSLB
479F  49                      ROLA
47A0  40                      NEGA
47A1  50                      NEGB
47A2  8200                    SBCA #0
47A4  31AB                    LEAY D,Y 
47A6  C30002                  ADDD #2
47A9  33CB                    LEAU D,U 
47AB                  VSCROLLTDOWNSCR1
47AB  ECA4                    LDD ,Y
47AD  ED84                    STD ,X
47AF  301E                    LEAX -2,X 
47B1  313E                    LEAY -2,Y 
47B3  335E                    LEAU -2,U 
47B5  11830000                CMPU #0
47B9  26F0                    BNE VSCROLLTDOWNSCR1
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
47BB  4F                      CLRA
47BC  F6313D                  LDB CURRENTTILESWIDTH
47BF  1F03                    TFR D,U 
47C1  B62C12                  LDA EMPTYTILE
47C4  F60045                  LDB PLOTC
47C7                  VSCROLLTDOWNSCR2
47C7  EDA4                    STD ,Y 
47C9  3122                    LEAY 2,Y 
47CB  335F                    LEAU -1,U 
47CD  11830000                CMPU #0
47D1  26F4                    BNE VSCROLLTDOWNSCR2
47D3  7E47D6                  JMP VSCROLLTE
47D6                  VSCROLLTE
                          ; The VSCROLL command do not need to switch from one bank to another 
                          ; during video RAM operation. This routine can simply bank in video 
                          ; memory at the beginning of execution and bank out at the end.
47D6  BD2E0B                  JSR GIMEBANKROM
47D9  3576                    PULS A,B,X,Y,U
47DB  39                      RTS
47DC                  vScrollText_after
47DC  86FF                    LDA #$ff
47DE  B7004A                  STA DIRECTION
47E1  BD4710                  JSR VSCROLLT
47E4  F6313F                  LDB CURRENTTILESHEIGHT
47E7  F700D6                  STB YCURSYS
47EA  7A00D6                  DEC YCURSYS
47ED                  _label243end
                              ; P:203
                              ; L:52
47ED  C602                    LDB #$02
47EF  F7E026                  STB _Ttmp2
47F2  F6E071                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
47F5  C47F                    ANDB #$7f
47F7  F700D3                  STB XCURSYS
47FA  F6E026                  LDB _Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
47FD  C47F                    ANDB #$7f
47FF  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:53
                              ; P:0
                              ; L:54
4802  C620                    LDB #$20
4804  F7E07C                  STB _Ttmp74
4807  F6E07C                  LDB _Ttmp74
480A  F7E000                  STB _PEN
                              ; P:4
                              ; L:55
                              ; P:0
                              ; L:56
480D  F6E1A2                  LDB _Ttmp250
4810  BD31C7                  JSR DSFREE
4813  108E57C8                LDY #_Tstr246
4817  BD31B5                  JSR DSDEFINE
481A  F7E1A2                  STB _Ttmp250
481D  F6E1A4                  LDB _Ttmp251
4820  BD31C7                  JSR DSFREE
4823  108E57C4                LDY #_Tstr248
4827  BD31B5                  JSR DSDEFINE
482A  F7E1A4                  STB _Ttmp251
482D  F6E1A6                  LDB _Ttmp252
4830  BD31C7                  JSR DSFREE
4833  108E57C8                LDY #_Tstr246
4837  BD31B5                  JSR DSDEFINE
483A  F7E1A6                  STB _Ttmp252
483D  F6E1A8                  LDB _Ttmp253
4840  BD31C7                  JSR DSFREE
4843  108E57C4                LDY #_Tstr248
4847  BD31B5                  JSR DSDEFINE
484A  F7E1A8                  STB _Ttmp253
484D  F6E1A6                  LDB _Ttmp252
4850  BD321B                  JSR DSDESCRIPTOR
4853  EC01                    LDD 1,X 
4855  FDE033                  STD _Ttmp9
4858  A684                    LDA ,X 
485A  B7E093                  STA _Ttmp85
485D  F6E1A8                  LDB _Ttmp253
4860  BD321B                  JSR DSDESCRIPTOR
4863  EC01                    LDD 1,X 
4865  FDE039                  STD _Ttmp11
4868  A684                    LDA ,X 
486A  B7E09D                  STA _Ttmp88
486D  F6E093                  LDB _Ttmp85
4870  FBE09D                  ADDB _Ttmp88
4873  F7E09F                  STB _Ttmp89
4876  F6E1AA                  LDB _Ttmp254
4879  BD31C7                  JSR DSFREE
487C  B6E09F                  LDA _Ttmp89
487F  BD327C                  JSR DSALLOC
4882  F7E1AA                  STB _Ttmp254
4885  F6E1AA                  LDB _Ttmp254
4888  BD321B                  JSR DSDESCRIPTOR
488B  EC01                    LDD 1,X 
488D  FDE19B                  STD _Ttmp239
4890  A684                    LDA ,X 
4892  B7E09F                  STA _Ttmp89
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4895  4F                      CLRA
4896  F6E093                  LDB _Ttmp85
4899  10BEE033                LDY _Ttmp9
489D  BEE19B                  LDX _Ttmp239
48A0  BD32D6                  JSR DUFFDEVICE
48A3  BEE19B                  LDX _Ttmp239
48A6  F6E093                  LDB _Ttmp85
48A9  3A                      ABX
48AA  BFE19B                  STX _Ttmp239
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
48AD  4F                      CLRA
48AE  F6E09D                  LDB _Ttmp88
48B1  10BEE039                LDY _Ttmp11
48B5  BEE19B                  LDX _Ttmp239
48B8  BD32D6                  JSR DUFFDEVICE
48BB  F6E1AA                  LDB _Ttmp254
48BE  BD321B                  JSR DSDESCRIPTOR
48C1  EC01                    LDD 1,X 
48C3  FDE19F                  STD _Ttmp241
48C6  A684                    LDA ,X 
48C8  B7E0A1                  STA _Ttmp91
48CB  10BEE19F                LDY _Ttmp241
48CF  10BF0001                STY TEXTPTR
48D3  B6E0A1                  LDA _Ttmp91
48D6  B70003                  STA TEXTSIZE
48D9  BD44BC                  JSR TEXTATBITMAPMODE
48DC  4F                      CLRA
48DD  B700D3                  STA XCURSYS
48E0  7C00D6                  INC YCURSYS
48E3  F6313F                  LDB CURRENTTILESHEIGHT
48E6  F7E0F4                  STB _Ttmp125
48E9  F6E0F4                  LDB _Ttmp125
48EC  C47F                    ANDB #$7f
48EE  F7E0F4                  STB _Ttmp125
48F1  5F                      CLRB
48F2  B600D6                  LDA YCURSYS
48F5  B1E0F4                  CMPA _Ttmp125
48F8  2D01                    BLT _label259
48FA  5A                      DECB
48FB                  _label259
48FB  F7E0FC                  STB _Ttmp131
48FE  F6E0FC                  LDB _Ttmp131
                              IF (((128+_label257scroll-(*+2))|(127-_label257scroll+(*+2)))&0x8000)
                              LBNE _label257scroll
                              ELSE
4901  2602                    BNE _label257scroll
                              ENDIF
                              IF (((128+_label257end-(*+2))|(127-_label257end+(*+2)))&0x8000)
                              JMP _label257end
                              ELSE
4903  2011                    BRA _label257end
                              ENDIF
4905                  _label257scroll
4905  86FF                    LDA #$ff
4907  B7004A                  STA DIRECTION
490A  BD4710                  JSR VSCROLLT
490D  F6313F                  LDB CURRENTTILESHEIGHT
4910  F700D6                  STB YCURSYS
4913  7A00D6                  DEC YCURSYS
4916                  _label257end
                              ; P:105
                              ; L:57
4916  C610                    LDB #$10
4918  F7E026                  STB _Ttmp2
491B  F6E026                  LDB _Ttmp2
491E  F7E000                  STB _PEN
                              ; P:4
                              ; L:58
4921  4F                      CLRA
4922  B7E026                  STA _Ttmp2
4925  C60D                    LDB #$0d
4927  F7E036                  STB _Ttmp10
492A  F6E026                  LDB _Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
492D  C47F                    ANDB #$7f
492F  F700D3                  STB XCURSYS
4932  F6E036                  LDB _Ttmp10
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
4935  C47F                    ANDB #$7f
4937  F700D6                  STB YCURSYS
                              ; P:14
                              ; L:59
493A  F657B4                  LDB _Tstr260
493D  F7E026                  STB _Ttmp2
4940  CC57B4                  LDD #_Tstr260
4943  FDE033                  STD _Ttmp9
4946  7CE034                  INC _Ttmp9+1
4949  2603                    BNE _label263
494B  7CE033                  INC _Ttmp9
494E                  _label263
494E  10BEE033                LDY _Ttmp9
4952  10BF0001                STY TEXTPTR
4956  B6E026                  LDA _Ttmp2
4959  B70003                  STA TEXTSIZE
495C  BD44BC                  JSR TEXTATBITMAPMODE
                              ; P:13
                              ; L:60
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$0d
495F  CC000D                  LDD #$000d
4962  B7E026                  STA _Ttmp2
4965  B7E093                  STA _Ttmp85
4968  F7E1AF                  STB _Ttmp267
                      ;       CLRA
496B  C608                    LDB #$08
496D  F7E1B7                  STB _Ttmp271
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$20
                      ; peephole(2): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0020
4970  C620                    LDB #$20
4972  F7E1B3                  STB _Ttmp269
                      ;       CLRA
4975  C62C                    LDB #$2c
4977  F7E1B1                  STB _Ttmp268
497A  C620                    LDB #$20
497C  F7E03C                  STB _Ttmp12
497F  C68F                    LDB #$8f
4981  F7E1B5                  STB _Ttmp270
4984  C68F                    LDB #$8f
4986  F7E036                  STB _Ttmp10
4989  C601                    LDB #$01
498B  F72C13                  STB KBDRATE
498E  F6E1AD                  LDB _Ttmp266
4991  BD31C7                  JSR DSFREE
4994  B6E03C                  LDA _Ttmp12
4997  BD327C                  JSR DSALLOC
499A  F7E1AD                  STB _Ttmp266
499D  F6E1AD                  LDB _Ttmp266
49A0  BD321B                  JSR DSDESCRIPTOR
49A3  EC01                    LDD 1,X 
49A5  FDE033                  STD _Ttmp9
49A8  A684                    LDA ,X 
49AA  B7E089                  STA _Ttmp78
49AD                  _label265repeat
49AD  7AE036                  DEC _Ttmp10
49B0  F6E036                  LDB _Ttmp10
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;       CMPB #$00
                              IF (((128+_label265skipcc-(*+2))|(127-_label265skipcc+(*+2)))&0x8000)
                              LBNE _label265skipcc
                              ELSE
49B3  263B                    BNE _label265skipcc
                              ENDIF
49B5  F6E1B5                  LDB _Ttmp270
49B8  CB10                    ADDB #$10
49BA  F7E1B5                  STB _Ttmp270
49BD  5F                      CLRB
49BE  B6E1B5                  LDA _Ttmp270
49C1  818F                    CMPA #$008f
49C3  2401                    BHS _label275
49C5  5A                      DECB
49C6                  _label275
49C6  F7E0F4                  STB _Ttmp125
49C9  F6E0F4                  LDB _Ttmp125
                              IF (((128+_label273g-(*+2))|(127-_label273g+(*+2)))&0x8000)
                              LBEQ _label273g
                              ELSE
49CC  2707                    BEQ _label273g
                              ENDIF
49CE  C6E0                    LDB #$e0
49D0  F7E1B5                  STB _Ttmp270
                              IF (((128+_label273e-(*+2))|(127-_label273e+(*+2)))&0x8000)
                              JMP _label273e
                              ELSE
49D3  2016                    BRA _label273e
                              ENDIF
49D5                  _label273g
49D5  5F                      CLRB
49D6  B6E1B5                  LDA _Ttmp270
49D9  81E0                    CMPA #$00e0
49DB  2201                    BHI _label277
49DD  5A                      DECB
49DE                  _label277
49DE  F7E0FC                  STB _Ttmp131
49E1  F6E0FC                  LDB _Ttmp131
                              IF (((128+_label273e-(*+2))|(127-_label273e+(*+2)))&0x8000)
                              LBNE _label273e
                              ELSE
49E4  2605                    BNE _label273e
                              ENDIF
49E6  C68F                    LDB #$8f
49E8  F7E1B5                  STB _Ttmp270
49EB                  _label273e
49EB  C680                    LDB #$80
49ED  F7E036                  STB _Ttmp10
49F0                  _label265skipcc
49F0  CCE1B5                  LDD #_Ttmp270
49F3  FDE039                  STD _Ttmp11
49F6  C601                    LDB #$01
49F8  F7E09D                  STB _Ttmp88
49FB  10BEE039                LDY _Ttmp11
49FF  10BF0001                STY TEXTPTR
4A03  B6E09D                  LDA _Ttmp88
4A06  B70003                  STA TEXTSIZE
4A09  BD44BC                  JSR TEXTATBITMAPMODE
4A0C  4F                      CLRA
4A0D  B7E09F                  STA _Ttmp89
4A10  C6FF                    LDB #$ffffffff
4A12  F7E11C                  STB _Ttmp148
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp148
4A15  FB00D3                  ADDB XCURSYS
4A18  F700D3                  STB XCURSYS
4A1B  F6E09F                  LDB _Ttmp89
4A1E  F7E11E                  STB _Ttmp152
4A21  F6E11E                  LDB _Ttmp152
4A24  C47F                    ANDB #$7f
4A26  F7E11E                  STB _Ttmp152
4A29  5F                      CLRB
4A2A  B600D3                  LDA XCURSYS
4A2D  B1E11E                  CMPA _Ttmp152
4A30  2C01                    BGE _label282
4A32  5A                      DECB
4A33                  _label282
4A33  F7E126                  STB _Ttmp159
4A36  F6E126                  LDB _Ttmp159
                              IF (((128+_label280g-(*+2))|(127-_label280g+(*+2)))&0x8000)
                              LBEQ _label280g
                              ELSE
4A39  270A                    BEQ _label280g
                              ENDIF
4A3B  F6313D                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4A3E  C47F                    ANDB #$7f
4A40  F700D3                  STB XCURSYS
                              IF (((128+_label280e-(*+2))|(127-_label280e+(*+2)))&0x8000)
                              JMP _label280e
                              ELSE
4A43  2028                    BRA _label280e
                              ENDIF
4A45                  _label280g
4A45  F6313D                  LDB CURRENTTILESWIDTH
4A48  F7E128                  STB _Ttmp161
4A4B  F6E128                  LDB _Ttmp161
4A4E  C47F                    ANDB #$7f
4A50  F7E128                  STB _Ttmp161
4A53  5F                      CLRB
4A54  B600D3                  LDA XCURSYS
4A57  B1E128                  CMPA _Ttmp161
4A5A  2F01                    BLE _label284
4A5C  5A                      DECB
4A5D                  _label284
4A5D  F7E12C                  STB _Ttmp164
4A60  F6E12C                  LDB _Ttmp164
                              IF (((128+_label280e-(*+2))|(127-_label280e+(*+2)))&0x8000)
                              LBEQ _label280e
                              ELSE
4A63  2708                    BEQ _label280e
                              ENDIF
4A65  F6E09F                  LDB _Ttmp89
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4A68  C47F                    ANDB #$7f
4A6A  F700D3                  STB XCURSYS
4A6D                  _label280e
                              IF (((128+scancode_after-(*+2))|(127-scancode_after+(*+2)))&0x8000)
4A6D  7E4AEF                  JMP scancode_after
                              ELSE
                              BRA scancode_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      KEYBOARD MATRIX DETECTION ON TRS-80 COLOR COMPUTER 3   *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
4A70                  SCANCODE
                          ; CLR $FF01
                          ; CLR $FF00
                          ; CLR $FF03
4A70  86FF                    LDA #$FF
4A72  B7FF02                  STA $FF02
4A75  8E4AAF                  LDX #SCANCODEMATRIX
4A78  86FE                    LDA #$FE
4A7A                  SCANCODE0
4A7A  B7FF02                  STA $FF02
4A7D  F6FF00                  LDB $FF00
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORB #$FF
4A80  53                      COMB
4A81  C47F                    ANDB #$7F
4A83  C100                    CMPB #$0
4A85  271C                    BEQ SCANCODENEXT
4A87  1F98                    TFR B, A
4A89                  SCANCODENEXT2A
4A89  1F89                    TFR A, B
4A8B  8401                    ANDA #1
4A8D  8101                    CMPA #1
4A8F  2605                    BNE SCANCODENEXT2
4A91  A684                    LDA ,X 
4A93  7E4AAE                  JMP SCANCODEE
4A96                  SCANCODENEXT2
4A96  1F98                    TFR B, A
4A98  44                      LSRA
4A99  3001                    LEAX 1,X 
4A9B  8100                    CMPA #0
4A9D  26EA                    BNE SCANCODENEXT2A
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4A9F  4F                      CLRA
4AA0  7E4AAE                  JMP SCANCODEE
4AA3                  SCANCODENEXT
4AA3  1A01                    ORCC #$01
4AA5  49                      ROLA
4AA6  3008                    LEAX 8,X 
4AA8  8C4AE7                  CMPX #SCANCODEMATRIXE
4AAB  23CD                    BLS SCANCODE0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
4AAD  4F                      CLRA
4AAE                  SCANCODEE
4AAE  39                      RTS
4AAF                  SCANCODEMATRIX
4AAF  4048505830380DE3         fcb '@','H','P','X','0','8',$0d,$E3     ; // UNUSED
4AB7  414951593139F9E4         fcb 'A','I','Q','Y','1','9',$F9,$E4     ; // CLR, UNUSED
4ABF  424A525A323AD5E5         fcb 'B','J','R','Z','2',':',$D5,$E5     ; // BRK, UNUSED
4AC7  434B53FA333BD6E6         fcb 'C','K','S',$FA,'3',';',$D6,$E6     ; // UP $FA, UNUSED, UNUSED
4ACF  444C54FB342CD7E7         fcb 'D','L','T',$FB,'4',',',$D7,$E7     ; // DOWN $FB, UNUSED, UNUSED
4AD7  454D5508352DD8E8         fcb 'E','M','U',8,'5','-',$D8,$E8     ; // ?? $FC, .., LEFT, UNUSED, UNUSED
4ADF  464E56FD362ED9E9         fcb 'F','N','V',$FD,'6','.',$D9,$E9     ; // RIGHT $FD, UNUSED, UNUSED
4AE7                  SCANCODEMATRIXE
4AE7  474F5720372FF0FE         fcb 'G','O','W',' ','7','/',$F0,$FE     ; // UNUSED, SHIFT
4AEF                  scancode_after
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4AEF  4F                      CLRA
4AF0  B7E089                  STA _Ttmp78
4AF3  B7E1B9                  STA _Ttmp272
4AF6  BD4A70                  JSR SCANCODE
4AF9  8100                    CMPA #0
4AFB  2708                    BEQ _label286nokey
4AFD  B7E1B9                  STA _Ttmp272
4B00  86FF                    LDA #$FF
4B02  B7E089                  STA _Ttmp78
4B05                  _label286nokey
4B05  B6E089                  LDA _Ttmp78
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;       CMPA #0
4B08  2734                    BEQ _label285skip
4B0A  B6E1B9                  LDA _Ttmp272
4B0D  8480                    ANDA #$80
4B0F  8100                    CMPA #0
4B11  261A                    BNE _label285noascii
4B13  B6E1B9                  LDA _Ttmp272
4B16  B1011D                  CMPA $011d
4B19  2619                    BNE _label285different
4B1B  7A011F                  DEC $011f
4B1E  F6011F                  LDB $011f
4B21  F12C13                  CMPB KBDRATE
4B24  2711                    BEQ _label285ascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4B26  4F                      CLRA
4B27  B7E089                  STA _Ttmp78
4B2A  7E4B42                  JMP _label285done
4B2D                  _label285noascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4B2D  4F                      CLRA
4B2E  B7E1B9                  STA _Ttmp272
4B31  7E4B42                  JMP _label285done
4B34                  _label285different
4B34  B7011D                  STA $011d
4B37                  _label285ascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #0
4B37  5F                      CLRB
4B38  F7011F                  STB $011f
4B3B  7E4B42                  JMP _label285done
4B3E                  _label285skip
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4B3E  4F                      CLRA
4B3F  B7011D                  STA $011d
4B42                  _label285done
4B42  F6E089                  LDB _Ttmp78
                              IF (((128+_label265repeat-(*+2))|(127-_label265repeat+(*+2)))&0x8000)
4B45  1027FE64                LBEQ _label265repeat
                              ELSE
                              BEQ _label265repeat
                              ENDIF
4B49  F6E1B9                  LDB _Ttmp272
                              IF (((128+_label265repeat-(*+2))|(127-_label265repeat+(*+2)))&0x8000)
4B4C  1027FE5D                LBEQ _label265repeat
                              ELSE
                              BEQ _label265repeat
                              ENDIF
4B50  5F                      CLRB
4B51  B6E1B9                  LDA _Ttmp272
4B54  B1E1B7                  CMPA _Ttmp271
4B57  2601                    BNE _label287
4B59  5A                      DECB
4B5A                  _label287
4B5A  F7E089                  STB _Ttmp78
4B5D  F6E089                  LDB _Ttmp78
                              IF (((128+_label265backspace-(*+2))|(127-_label265backspace+(*+2)))&0x8000)
                              LBNE _label265backspace
                              ELSE
4B60  266A                    BNE _label265backspace
                              ENDIF
4B62  5F                      CLRB
4B63  B6E1B9                  LDA _Ttmp272
4B66  B1E1B1                  CMPA _Ttmp268
4B69  2601                    BNE _label288
4B6B  5A                      DECB
4B6C                  _label288
4B6C  F7E089                  STB _Ttmp78
4B6F  F6E089                  LDB _Ttmp78
                              IF (((128+_label265finished-(*+2))|(127-_label265finished+(*+2)))&0x8000)
4B72  10260167                LBNE _label265finished
                              ELSE
                              BNE _label265finished
                              ENDIF
4B76  5F                      CLRB
4B77  B6E1B9                  LDA _Ttmp272
4B7A  B1E1AF                  CMPA _Ttmp267
4B7D  2601                    BNE _label289
4B7F  5A                      DECB
4B80                  _label289
4B80  F7E089                  STB _Ttmp78
4B83  F6E089                  LDB _Ttmp78
                              IF (((128+_label265finished-(*+2))|(127-_label265finished+(*+2)))&0x8000)
4B86  10260153                LBNE _label265finished
                              ELSE
                              BNE _label265finished
                              ENDIF
4B8A  CCE1B9                  LDD #_Ttmp272
4B8D  FDE19B                  STD _Ttmp239
4B90  C601                    LDB #$01
4B92  F7E0A9                  STB _Ttmp97
4B95  10BEE19B                LDY _Ttmp239
4B99  10BF0001                STY TEXTPTR
4B9D  B6E0A9                  LDA _Ttmp97
4BA0  B70003                  STA TEXTSIZE
4BA3  BD44BC                  JSR TEXTATBITMAPMODE
4BA6  B6E1B9                  LDA _Ttmp272
4BA9  BEE033                  LDX _Ttmp9
4BAC  F6E026                  LDB _Ttmp2
4BAF  3A                      ABX
4BB0  A784                    STA ,X
4BB2  7CE026                  INC _Ttmp2
4BB5  5F                      CLRB
4BB6  B6E026                  LDA _Ttmp2
4BB9  B1E03C                  CMPA _Ttmp12
4BBC  2601                    BNE _label293
4BBE  5A                      DECB
4BBF                  _label293
4BBF  F7E089                  STB _Ttmp78
4BC2  F6E089                  LDB _Ttmp78
                              IF (((128+_label265repeat-(*+2))|(127-_label265repeat+(*+2)))&0x8000)
4BC5  1027FDE4                LBEQ _label265repeat
                              ELSE
                              BEQ _label265repeat
                              ENDIF
                              IF (((128+_label265finished-(*+2))|(127-_label265finished+(*+2)))&0x8000)
4BC9  7E4CDD                  JMP _label265finished
                              ELSE
                              BRA _label265finished
                              ENDIF
4BCC                  _label265backspace
4BCC  5F                      CLRB
4BCD  B6E026                  LDA _Ttmp2
4BD0  B1E093                  CMPA _Ttmp85
4BD3  2601                    BNE _label294
4BD5  5A                      DECB
4BD6                  _label294
4BD6  F7E089                  STB _Ttmp78
4BD9  F6E089                  LDB _Ttmp78
                              IF (((128+_label265repeat-(*+2))|(127-_label265repeat+(*+2)))&0x8000)
4BDC  1026FDCD                LBNE _label265repeat
                              ELSE
                              BNE _label265repeat
                              ENDIF
4BE0  7AE026                  DEC _Ttmp2
4BE3  CCE1B3                  LDD #_Ttmp269
4BE6  FDE19F                  STD _Ttmp241
4BE9  C601                    LDB #$01
4BEB  F7E0E4                  STB _Ttmp118
4BEE  10BEE19F                LDY _Ttmp241
4BF2  10BF0001                STY TEXTPTR
4BF6  B6E0E4                  LDA _Ttmp118
4BF9  B70003                  STA TEXTSIZE
4BFC  BD44BC                  JSR TEXTATBITMAPMODE
4BFF  4F                      CLRA
4C00  B7E0E6                  STA _Ttmp119
4C03  C6FE                    LDB #$fffffffe
4C05  F7E14C                  STB _Ttmp182
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp182
4C08  FB00D3                  ADDB XCURSYS
4C0B  F700D3                  STB XCURSYS
4C0E  F6E0E6                  LDB _Ttmp119
4C11  F7E154                  STB _Ttmp189
4C14  F6E154                  LDB _Ttmp189
4C17  C47F                    ANDB #$7f
4C19  F7E154                  STB _Ttmp189
4C1C  5F                      CLRB
4C1D  B600D3                  LDA XCURSYS
4C20  B1E154                  CMPA _Ttmp189
4C23  2C01                    BGE _label299
4C25  5A                      DECB
4C26                  _label299
4C26  F7E156                  STB _Ttmp191
4C29  F6E156                  LDB _Ttmp191
                              IF (((128+_label297g-(*+2))|(127-_label297g+(*+2)))&0x8000)
                              LBEQ _label297g
                              ELSE
4C2C  270A                    BEQ _label297g
                              ENDIF
4C2E  F6313D                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4C31  C47F                    ANDB #$7f
4C33  F700D3                  STB XCURSYS
                              IF (((128+_label297e-(*+2))|(127-_label297e+(*+2)))&0x8000)
                              JMP _label297e
                              ELSE
4C36  2028                    BRA _label297e
                              ENDIF
4C38                  _label297g
4C38  F6313D                  LDB CURRENTTILESWIDTH
4C3B  F7E158                  STB _Ttmp193
4C3E  F6E158                  LDB _Ttmp193
4C41  C47F                    ANDB #$7f
4C43  F7E158                  STB _Ttmp193
4C46  5F                      CLRB
4C47  B600D3                  LDA XCURSYS
4C4A  B1E158                  CMPA _Ttmp193
4C4D  2F01                    BLE _label301
4C4F  5A                      DECB
4C50                  _label301
4C50  F7E182                  STB _Ttmp214
4C53  F6E182                  LDB _Ttmp214
                              IF (((128+_label297e-(*+2))|(127-_label297e+(*+2)))&0x8000)
                              LBEQ _label297e
                              ELSE
4C56  2708                    BEQ _label297e
                              ENDIF
4C58  F6E0E6                  LDB _Ttmp119
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4C5B  C47F                    ANDB #$7f
4C5D  F700D3                  STB XCURSYS
4C60                  _label297e
4C60  CCE1B3                  LDD #_Ttmp269
4C63  FDE1BC                  STD _Ttmp303
4C66  C601                    LDB #$01
4C68  F7E114                  STB _Ttmp139
4C6B  10BEE1BC                LDY _Ttmp303
4C6F  10BF0001                STY TEXTPTR
4C73  B6E114                  LDA _Ttmp139
4C76  B70003                  STA TEXTSIZE
4C79  BD44BC                  JSR TEXTATBITMAPMODE
4C7C  4F                      CLRA
4C7D  B7E116                  STA _Ttmp140
4C80  C6FF                    LDB #$ffffffff
                      ; peephole(5): unread1
                      ;       STB _Ttmp305
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp305
4C82  FB00D3                  ADDB XCURSYS
4C85  F700D3                  STB XCURSYS
4C88  F6E116                  LDB _Ttmp140
4C8B  F7E1C1                  STB _Ttmp308
4C8E  F6E1C1                  LDB _Ttmp308
4C91  C47F                    ANDB #$7f
4C93  F7E1C1                  STB _Ttmp308
4C96  5F                      CLRB
4C97  B600D3                  LDA XCURSYS
4C9A  B1E1C1                  CMPA _Ttmp308
4C9D  2C01                    BGE _label310
4C9F  5A                      DECB
4CA0                  _label310
4CA0  F7E1C3                  STB _Ttmp309
4CA3  F6E1C3                  LDB _Ttmp309
                              IF (((128+_label306g-(*+2))|(127-_label306g+(*+2)))&0x8000)
                              LBEQ _label306g
                              ELSE
4CA6  270A                    BEQ _label306g
                              ENDIF
4CA8  F6313D                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4CAB  C47F                    ANDB #$7f
4CAD  F700D3                  STB XCURSYS
                              IF (((128+_label306e-(*+2))|(127-_label306e+(*+2)))&0x8000)
                              JMP _label306e
                              ELSE
4CB0  2028                    BRA _label306e
                              ENDIF
4CB2                  _label306g
4CB2  F6313D                  LDB CURRENTTILESWIDTH
4CB5  F7E1C5                  STB _Ttmp312
4CB8  F6E1C5                  LDB _Ttmp312
4CBB  C47F                    ANDB #$7f
4CBD  F7E1C5                  STB _Ttmp312
4CC0  5F                      CLRB
4CC1  B600D3                  LDA XCURSYS
4CC4  B1E1C5                  CMPA _Ttmp312
4CC7  2F01                    BLE _label314
4CC9  5A                      DECB
4CCA                  _label314
4CCA  F7E1C7                  STB _Ttmp313
4CCD  F6E1C7                  LDB _Ttmp313
                              IF (((128+_label306e-(*+2))|(127-_label306e+(*+2)))&0x8000)
                              LBEQ _label306e
                              ELSE
4CD0  2708                    BEQ _label306e
                              ENDIF
4CD2  F6E116                  LDB _Ttmp140
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4CD5  C47F                    ANDB #$7f
4CD7  F700D3                  STB XCURSYS
4CDA                  _label306e
                              IF (((128+_label265repeat-(*+2))|(127-_label265repeat+(*+2)))&0x8000)
4CDA  7E49AD                  JMP _label265repeat
                              ELSE
                              BRA _label265repeat
                              ENDIF
4CDD                  _label265finished
4CDD  CCE1B3                  LDD #_Ttmp269
4CE0  FDE1CA                  STD _Ttmp316
4CE3  C601                    LDB #$01
4CE5  F7E12E                  STB _Ttmp167
4CE8  10BEE1CA                LDY _Ttmp316
4CEC  10BF0001                STY TEXTPTR
4CF0  B6E12E                  LDA _Ttmp167
4CF3  B70003                  STA TEXTSIZE
4CF6  BD44BC                  JSR TEXTATBITMAPMODE
4CF9  4F                      CLRA
4CFA  B7E134                  STA _Ttmp169
4CFD  C6FF                    LDB #$ffffffff
                      ; peephole(5): unread1
                      ;       STB _Ttmp318
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp318
4CFF  FB00D3                  ADDB XCURSYS
4D02  F700D3                  STB XCURSYS
4D05  F6E134                  LDB _Ttmp169
4D08  F7E1CF                  STB _Ttmp321
4D0B  F6E1CF                  LDB _Ttmp321
4D0E  C47F                    ANDB #$7f
4D10  F7E1CF                  STB _Ttmp321
4D13  5F                      CLRB
4D14  B600D3                  LDA XCURSYS
4D17  B1E1CF                  CMPA _Ttmp321
4D1A  2C01                    BGE _label323
4D1C  5A                      DECB
4D1D                  _label323
4D1D  F7E1D1                  STB _Ttmp322
4D20  F6E1D1                  LDB _Ttmp322
                              IF (((128+_label319g-(*+2))|(127-_label319g+(*+2)))&0x8000)
                              LBEQ _label319g
                              ELSE
4D23  270A                    BEQ _label319g
                              ENDIF
4D25  F6313D                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4D28  C47F                    ANDB #$7f
4D2A  F700D3                  STB XCURSYS
                              IF (((128+_label319e-(*+2))|(127-_label319e+(*+2)))&0x8000)
                              JMP _label319e
                              ELSE
4D2D  2028                    BRA _label319e
                              ENDIF
4D2F                  _label319g
4D2F  F6313D                  LDB CURRENTTILESWIDTH
4D32  F7E1D3                  STB _Ttmp325
4D35  F6E1D3                  LDB _Ttmp325
4D38  C47F                    ANDB #$7f
4D3A  F7E1D3                  STB _Ttmp325
4D3D  5F                      CLRB
4D3E  B600D3                  LDA XCURSYS
4D41  B1E1D3                  CMPA _Ttmp325
4D44  2F01                    BLE _label327
4D46  5A                      DECB
4D47                  _label327
4D47  F7E1D5                  STB _Ttmp326
4D4A  F6E1D5                  LDB _Ttmp326
                              IF (((128+_label319e-(*+2))|(127-_label319e+(*+2)))&0x8000)
                              LBEQ _label319e
                              ELSE
4D4D  2708                    BEQ _label319e
                              ENDIF
4D4F  F6E134                  LDB _Ttmp169
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4D52  C47F                    ANDB #$7f
4D54  F700D3                  STB XCURSYS
4D57                  _label319e
4D57  B6E026                  LDA _Ttmp2
4D5A  F6E1AD                  LDB _Ttmp266
4D5D  BD31F9                  JSR DSRESIZE
4D60  F6E1AD                  LDB _Ttmp266
4D63  BD321B                  JSR DSDESCRIPTOR
4D66  EC01                    LDD 1,X 
4D68  FDE1D8                  STD _Ttmp328
4D6B  A684                    LDA ,X 
4D6D  B7E14A                  STA _Ttmp180
4D70  F6E1AB                  LDB _sentence
4D73  BD31C7                  JSR DSFREE
4D76  B6E14A                  LDA _Ttmp180
4D79  BD327C                  JSR DSALLOC
4D7C  F7E1AB                  STB _sentence
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _sentence
4D7F  BD321B                  JSR DSDESCRIPTOR
4D82  EC01                    LDD 1,X 
4D84  FDE1DC                  STD _Ttmp329
4D87  A684                    LDA ,X 
                      ; peephole(5): unread1
                      ;       STA _Ttmp186
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4D89  4F                      CLRA
4D8A  F6E14A                  LDB _Ttmp180
4D8D  10BEE1D8                LDY _Ttmp328
4D91  BEE1DC                  LDX _Ttmp329
4D94  BD32D6                  JSR DUFFDEVICE
4D97  4F                      CLRA
4D98  B700D3                  STA XCURSYS
4D9B  7C00D6                  INC YCURSYS
4D9E  F6313F                  LDB CURRENTTILESHEIGHT
4DA1  F7E1DF                  STB _Ttmp332
4DA4  F6E1DF                  LDB _Ttmp332
4DA7  C47F                    ANDB #$7f
4DA9  F7E1DF                  STB _Ttmp332
4DAC  5F                      CLRB
4DAD  B600D6                  LDA YCURSYS
4DB0  B1E1DF                  CMPA _Ttmp332
4DB3  2D01                    BLT _label334
4DB5  5A                      DECB
4DB6                  _label334
4DB6  F7E1E1                  STB _Ttmp333
4DB9  F6E1E1                  LDB _Ttmp333
                              IF (((128+_label330scroll-(*+2))|(127-_label330scroll+(*+2)))&0x8000)
                              LBNE _label330scroll
                              ELSE
4DBC  2602                    BNE _label330scroll
                              ENDIF
                              IF (((128+_label330end-(*+2))|(127-_label330end+(*+2)))&0x8000)
                              JMP _label330end
                              ELSE
4DBE  2011                    BRA _label330end
                              ENDIF
4DC0                  _label330scroll
4DC0  86FF                    LDA #$ff
4DC2  B7004A                  STA DIRECTION
4DC5  BD4710                  JSR VSCROLLT
4DC8  F6313F                  LDB CURRENTTILESHEIGHT
4DCB  F700D6                  STB YCURSYS
4DCE  7A00D6                  DEC YCURSYS
4DD1                  _label330end
                              ; P:617
                              ; L:61
                              ; P:0
                              ; L:62
                              ; P:0
                              ; L:63
                              ; P:0
                              ; L:64
4DD1  F6E1AB                  LDB _sentence
4DD4  BD321B                  JSR DSDESCRIPTOR
4DD7  EC01                    LDD 1,X 
4DD9  FDE033                  STD _Ttmp9
4DDC  A684                    LDA ,X 
4DDE  B7E036                  STA _Ttmp10
4DE1  F657B2                  LDB _Tstr335
4DE4  F7E03C                  STB _Ttmp12
4DE7  CC57B2                  LDD #_Tstr335
4DEA  FDE039                  STD _Ttmp11
4DED  7CE03A                  INC _Ttmp11+1
4DF0  2603                    BNE _label337
4DF2  7CE039                  INC _Ttmp11
4DF5                  _label337
4DF5  4F                      CLRA
4DF6  B7E026                  STA _Ttmp2
4DF9                  _label338rep
4DF9  5F                      CLRB
4DFA  B6E026                  LDA _Ttmp2
4DFD  B1E036                  CMPA _Ttmp10
4E00  2601                    BNE _label339
4E02  5A                      DECB
4E03                  _label339
4E03  F7E089                  STB _Ttmp78
4E06  F6E089                  LDB _Ttmp78
                              IF (((128+_label338nfnd-(*+2))|(127-_label338nfnd+(*+2)))&0x8000)
                              LBNE _label338nfnd
                              ELSE
4E09  265C                    BNE _label338nfnd
                              ENDIF
4E0B  B6E03C                  LDA _Ttmp12
4E0E  2739                    BEQ _label340equal
4E10  10BEE033                LDY _Ttmp9
4E14  BEE039                  LDX _Ttmp11
4E17  B6E03C                  LDA _Ttmp12
4E1A  8480                    ANDA #$80
4E1C  2717                    BEQ _label340second
4E1E                  _label340first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4E1E  4F                      CLRA
4E1F                  _label340loop
4E1F  E686                    LDB A,X
4E21  E1A6                    CMPB A,Y
4E23  262C                    BNE _label340diff
4E25  8B01                    ADDA #1
4E27  817F                    CMPA #$7F
4E29  26F4                    BNE _label340loop
4E2B  31A87F                  LEAY 127,Y
4E2E  30887F                  LEAX 127,X
4E31  3121                    LEAY 1,Y
4E33  3001                    LEAX 1,X
4E35                  _label340second
4E35  B6E03C                  LDA _Ttmp12
4E38  847F                    ANDA #$7f
4E3A  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4E3C  4F                      CLRA
4E3D                  _label340loop2
4E3D  E686                    LDB A,X
4E3F  E1A6                    CMPB A,Y
4E41  260E                    BNE _label340diff
4E43  8B01                    ADDA #1
4E45  9114                    CMPA <MATHPTR0
4E47  26F4                    BNE _label340loop2
4E49                  _label340equal
4E49  86FF                    LDA #$ff
4E4B  B7E089                  STA _Ttmp78
4E4E  7E4E55                  JMP _label340final
4E51                  _label340diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
4E51  4F                      CLRA
4E52  B7E089                  STA _Ttmp78
4E55                  _label340final
4E55  7CE034                  INC _Ttmp9+1
4E58  2603                    BNE _label341
4E5A  7CE033                  INC _Ttmp9
4E5D                  _label341
4E5D  7CE026                  INC _Ttmp2
4E60  F6E089                  LDB _Ttmp78
                              IF (((128+_label338fnd-(*+2))|(127-_label338fnd+(*+2)))&0x8000)
                              LBNE _label338fnd
                              ELSE
4E63  2606                    BNE _label338fnd
                              ENDIF
                              IF (((128+_label338rep-(*+2))|(127-_label338rep+(*+2)))&0x8000)
                              JMP _label338rep
                              ELSE
4E65  2092                    BRA _label338rep
                              ENDIF
4E67                  _label338nfnd
4E67  4F                      CLRA
4E68  B7E026                  STA _Ttmp2
4E6B                  _label338fnd
4E6B  F6E026                  LDB _Ttmp2
                              IF (((128+_label342e0-(*+2))|(127-_label342e0+(*+2)))&0x8000)
4E6E  1027026C                LBEQ _label342e0
                              ELSE
                              BEQ _label342e0
                              ENDIF
4E72                  _label342t
                              ; P:97
                              ; L:65
4E72  F6E1AB                  LDB _sentence
4E75  BD321B                  JSR DSDESCRIPTOR
4E78  EC01                    LDD 1,X 
4E7A  FDE033                  STD _Ttmp9
4E7D  A684                    LDA ,X 
4E7F  B7E03C                  STA _Ttmp12
4E82  F657B2                  LDB _Tstr343
4E85  F7E089                  STB _Ttmp78
4E88  CC57B2                  LDD #_Tstr343
4E8B  FDE039                  STD _Ttmp11
4E8E  7CE03A                  INC _Ttmp11+1
4E91  2603                    BNE _label344
4E93  7CE039                  INC _Ttmp11
4E96                  _label344
4E96  4F                      CLRA
4E97  B7E036                  STA _Ttmp10
4E9A                  _label345rep
4E9A  5F                      CLRB
4E9B  B6E036                  LDA _Ttmp10
4E9E  B1E03C                  CMPA _Ttmp12
4EA1  2601                    BNE _label346
4EA3  5A                      DECB
4EA4                  _label346
4EA4  F7E093                  STB _Ttmp85
4EA7  F6E093                  LDB _Ttmp85
                              IF (((128+_label345nfnd-(*+2))|(127-_label345nfnd+(*+2)))&0x8000)
                              LBNE _label345nfnd
                              ELSE
4EAA  265C                    BNE _label345nfnd
                              ENDIF
4EAC  B6E089                  LDA _Ttmp78
4EAF  2739                    BEQ _label347equal
4EB1  10BEE033                LDY _Ttmp9
4EB5  BEE039                  LDX _Ttmp11
4EB8  B6E089                  LDA _Ttmp78
4EBB  8480                    ANDA #$80
4EBD  2717                    BEQ _label347second
4EBF                  _label347first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4EBF  4F                      CLRA
4EC0                  _label347loop
4EC0  E686                    LDB A,X
4EC2  E1A6                    CMPB A,Y
4EC4  262C                    BNE _label347diff
4EC6  8B01                    ADDA #1
4EC8  817F                    CMPA #$7F
4ECA  26F4                    BNE _label347loop
4ECC  31A87F                  LEAY 127,Y
4ECF  30887F                  LEAX 127,X
4ED2  3121                    LEAY 1,Y
4ED4  3001                    LEAX 1,X
4ED6                  _label347second
4ED6  B6E089                  LDA _Ttmp78
4ED9  847F                    ANDA #$7f
4EDB  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4EDD  4F                      CLRA
4EDE                  _label347loop2
4EDE  E686                    LDB A,X
4EE0  E1A6                    CMPB A,Y
4EE2  260E                    BNE _label347diff
4EE4  8B01                    ADDA #1
4EE6  9114                    CMPA <MATHPTR0
4EE8  26F4                    BNE _label347loop2
4EEA                  _label347equal
4EEA  86FF                    LDA #$ff
4EEC  B7E093                  STA _Ttmp85
4EEF  7E4EF6                  JMP _label347final
4EF2                  _label347diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
4EF2  4F                      CLRA
4EF3  B7E093                  STA _Ttmp85
4EF6                  _label347final
4EF6  7CE034                  INC _Ttmp9+1
4EF9  2603                    BNE _label348
4EFB  7CE033                  INC _Ttmp9
4EFE                  _label348
4EFE  7CE036                  INC _Ttmp10
4F01  F6E093                  LDB _Ttmp85
                              IF (((128+_label345fnd-(*+2))|(127-_label345fnd+(*+2)))&0x8000)
                              LBNE _label345fnd
                              ELSE
4F04  2606                    BNE _label345fnd
                              ENDIF
                              IF (((128+_label345rep-(*+2))|(127-_label345rep+(*+2)))&0x8000)
                              JMP _label345rep
                              ELSE
4F06  2092                    BRA _label345rep
                              ENDIF
4F08                  _label345nfnd
4F08  4F                      CLRA
4F09  B7E036                  STA _Ttmp10
4F0C                  _label345fnd
4F0C  C601                    LDB #$01
4F0E  F7E09D                  STB _Ttmp88
4F11  F6E036                  LDB _Ttmp10
4F14  F0E09D                  SUBB _Ttmp88
4F17  F7E09F                  STB _Ttmp89
4F1A  F6E1E3                  LDB _Ttmp349
4F1D  BD31C7                  JSR DSFREE
4F20  B6E09F                  LDA _Ttmp89
4F23  BD327C                  JSR DSALLOC
4F26  F7E1E3                  STB _Ttmp349
4F29  F6E1E3                  LDB _Ttmp349
4F2C  BD321B                  JSR DSDESCRIPTOR
4F2F  EC01                    LDD 1,X 
4F31  FDE19B                  STD _Ttmp239
4F34  A684                    LDA ,X 
4F36  B7E0A1                  STA _Ttmp91
4F39  F6E1AB                  LDB _sentence
4F3C  BD321B                  JSR DSDESCRIPTOR
4F3F  EC01                    LDD 1,X 
4F41  FDE19F                  STD _Ttmp241
4F44  A684                    LDA ,X 
4F46  B7E0A3                  STA _Ttmp93
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4F49  4F                      CLRA
4F4A  F6E0A1                  LDB _Ttmp91
4F4D  10BEE19F                LDY _Ttmp241
4F51  BEE19B                  LDX _Ttmp239
4F54  BD32D6                  JSR DUFFDEVICE
4F57  F6E1E3                  LDB _Ttmp349
4F5A  BD321B                  JSR DSDESCRIPTOR
4F5D  EC01                    LDD 1,X 
4F5F  FDE1BC                  STD _Ttmp303
4F62  A684                    LDA ,X 
4F64  B7E0A7                  STA _Ttmp96
4F67  F6E1E4                  LDB _word1
4F6A  BD31C7                  JSR DSFREE
4F6D  B6E0A7                  LDA _Ttmp96
4F70  BD327C                  JSR DSALLOC
4F73  F7E1E4                  STB _word1
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word1
4F76  BD321B                  JSR DSDESCRIPTOR
4F79  EC01                    LDD 1,X 
4F7B  FDE1CA                  STD _Ttmp316
4F7E  A684                    LDA ,X 
4F80  B7E0A9                  STA _Ttmp97
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4F83  4F                      CLRA
4F84  F6E0A7                  LDB _Ttmp96
4F87  10BEE1BC                LDY _Ttmp303
4F8B  BEE1CA                  LDX _Ttmp316
4F8E  BD32D6                  JSR DUFFDEVICE
                              ; L:65
4F91  F6E1AB                  LDB _sentence
4F94  BD321B                  JSR DSDESCRIPTOR
4F97  EC01                    LDD 1,X 
4F99  FDE033                  STD _Ttmp9
4F9C  A684                    LDA ,X 
4F9E  B7E03C                  STA _Ttmp12
4FA1  F6E03C                  LDB _Ttmp12
4FA4  F7E036                  STB _Ttmp10
4FA7  F6E1AB                  LDB _sentence
4FAA  BD321B                  JSR DSDESCRIPTOR
4FAD  EC01                    LDD 1,X 
4FAF  FDE039                  STD _Ttmp11
4FB2  A684                    LDA ,X 
4FB4  B7E093                  STA _Ttmp85
4FB7  F657B2                  LDB _Tstr350
4FBA  F7E09D                  STB _Ttmp88
4FBD  CC57B2                  LDD #_Tstr350
4FC0  FDE19B                  STD _Ttmp239
4FC3  7CE19C                  INC _Ttmp239+1
4FC6  2603                    BNE _label351
4FC8  7CE19B                  INC _Ttmp239
4FCB                  _label351
4FCB  4F                      CLRA
4FCC  B7E089                  STA _Ttmp78
4FCF                  _label352rep
4FCF  5F                      CLRB
4FD0  B6E089                  LDA _Ttmp78
4FD3  B1E093                  CMPA _Ttmp85
4FD6  2601                    BNE _label353
4FD8  5A                      DECB
4FD9                  _label353
4FD9  F7E09F                  STB _Ttmp89
4FDC  F6E09F                  LDB _Ttmp89
                              IF (((128+_label352nfnd-(*+2))|(127-_label352nfnd+(*+2)))&0x8000)
                              LBNE _label352nfnd
                              ELSE
4FDF  265C                    BNE _label352nfnd
                              ENDIF
4FE1  B6E09D                  LDA _Ttmp88
4FE4  2739                    BEQ _label354equal
4FE6  10BEE039                LDY _Ttmp11
4FEA  BEE19B                  LDX _Ttmp239
4FED  B6E09D                  LDA _Ttmp88
4FF0  8480                    ANDA #$80
4FF2  2717                    BEQ _label354second
4FF4                  _label354first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4FF4  4F                      CLRA
4FF5                  _label354loop
4FF5  E686                    LDB A,X
4FF7  E1A6                    CMPB A,Y
4FF9  262C                    BNE _label354diff
4FFB  8B01                    ADDA #1
4FFD  817F                    CMPA #$7F
4FFF  26F4                    BNE _label354loop
5001  31A87F                  LEAY 127,Y
5004  30887F                  LEAX 127,X
5007  3121                    LEAY 1,Y
5009  3001                    LEAX 1,X
500B                  _label354second
500B  B6E09D                  LDA _Ttmp88
500E  847F                    ANDA #$7f
5010  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
5012  4F                      CLRA
5013                  _label354loop2
5013  E686                    LDB A,X
5015  E1A6                    CMPB A,Y
5017  260E                    BNE _label354diff
5019  8B01                    ADDA #1
501B  9114                    CMPA <MATHPTR0
501D  26F4                    BNE _label354loop2
501F                  _label354equal
501F  86FF                    LDA #$ff
5021  B7E09F                  STA _Ttmp89
5024  7E502B                  JMP _label354final
5027                  _label354diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
5027  4F                      CLRA
5028  B7E09F                  STA _Ttmp89
502B                  _label354final
502B  7CE03A                  INC _Ttmp11+1
502E  2603                    BNE _label355
5030  7CE039                  INC _Ttmp11
5033                  _label355
5033  7CE089                  INC _Ttmp78
5036  F6E09F                  LDB _Ttmp89
                              IF (((128+_label352fnd-(*+2))|(127-_label352fnd+(*+2)))&0x8000)
                              LBNE _label352fnd
                              ELSE
5039  2606                    BNE _label352fnd
                              ENDIF
                              IF (((128+_label352rep-(*+2))|(127-_label352rep+(*+2)))&0x8000)
                              JMP _label352rep
                              ELSE
503B  2092                    BRA _label352rep
                              ENDIF
503D                  _label352nfnd
503D  4F                      CLRA
503E  B7E089                  STA _Ttmp78
5041                  _label352fnd
5041  F6E036                  LDB _Ttmp10
5044  F0E089                  SUBB _Ttmp78
5047  F7E0A1                  STB _Ttmp91
504A  F6E1AB                  LDB _sentence
504D  BD321B                  JSR DSDESCRIPTOR
5050  EC01                    LDD 1,X 
5052  FDE19F                  STD _Ttmp241
5055  A684                    LDA ,X 
5057  B7E0A3                  STA _Ttmp93
505A  F6E0A1                  LDB _Ttmp91
505D  F7E0A5                  STB _Ttmp94
5060  F6E1E6                  LDB _Ttmp356
5063  BD31C7                  JSR DSFREE
5066  B6E0A5                  LDA _Ttmp94
5069  BD327C                  JSR DSALLOC
506C  F7E1E6                  STB _Ttmp356
506F  F6E1E6                  LDB _Ttmp356
5072  BD321B                  JSR DSDESCRIPTOR
5075  EC01                    LDD 1,X 
5077  FDE1BC                  STD _Ttmp303
507A  A684                    LDA ,X 
507C  B7E0A5                  STA _Ttmp94
507F  BEE19F                  LDX _Ttmp241
5082  F6E0A3                  LDB _Ttmp93
5085  3A                      ABX
5086  BFE19F                  STX _Ttmp241
5089  FCE19F                  LDD _Ttmp241
508C  F0E0A1                  SUBB _Ttmp91
508F  8200                    SBCA #0
5091  FDE19F                  STD _Ttmp241
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
5094  4F                      CLRA
5095  F6E0A5                  LDB _Ttmp94
5098  10BEE19F                LDY _Ttmp241
509C  BEE1BC                  LDX _Ttmp303
509F  BD32D6                  JSR DUFFDEVICE
50A2  F6E1E6                  LDB _Ttmp356
50A5  BD321B                  JSR DSDESCRIPTOR
50A8  EC01                    LDD 1,X 
50AA  FDE1CA                  STD _Ttmp316
50AD  A684                    LDA ,X 
50AF  B7E0A9                  STA _Ttmp97
50B2  F6E1E7                  LDB _word2
50B5  BD31C7                  JSR DSFREE
50B8  B6E0A9                  LDA _Ttmp97
50BB  BD327C                  JSR DSALLOC
50BE  F7E1E7                  STB _word2
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word2
50C1  BD321B                  JSR DSDESCRIPTOR
50C4  EC01                    LDD 1,X 
50C6  FDE1D8                  STD _Ttmp328
50C9  A684                    LDA ,X 
50CB  B7E0E4                  STA _Ttmp118
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
50CE  4F                      CLRA
50CF  F6E0A9                  LDB _Ttmp97
50D2  10BEE1CA                LDY _Ttmp316
50D6  BEE1D8                  LDX _Ttmp328
50D9  BD32D6                  JSR DUFFDEVICE
                              ; P:294
                              ; L:66
                              IF (((128+_label342f-(*+2))|(127-_label342f+(*+2)))&0x8000)
                              JMP _label342f
                              ELSE
50DC  204F                    BRA _label342f
                              ENDIF
50DE                  _label342e0
50DE  F6E026                  LDB _Ttmp2
                              IF (((128+_label342f-(*+2))|(127-_label342f+(*+2)))&0x8000)
                              LBNE _label342f
                              ELSE
50E1  264A                    BNE _label342f
                              ENDIF
                              ; P:12
                              ; L:67
                              ; P:0
                              ; L:68
50E3  F6E1AB                  LDB _sentence
50E6  BD321B                  JSR DSDESCRIPTOR
50E9  EC01                    LDD 1,X 
50EB  FDE033                  STD _Ttmp9
50EE  A684                    LDA ,X 
50F0  B7E03C                  STA _Ttmp12
50F3  F6E1E4                  LDB _word1
50F6  BD31C7                  JSR DSFREE
50F9  B6E03C                  LDA _Ttmp12
50FC  BD327C                  JSR DSALLOC
50FF  F7E1E4                  STB _word1
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word1
5102  BD321B                  JSR DSDESCRIPTOR
5105  EC01                    LDD 1,X 
5107  FDE039                  STD _Ttmp11
510A  A684                    LDA ,X 
510C  B7E089                  STA _Ttmp78
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
510F  4F                      CLRA
5110  F6E03C                  LDB _Ttmp12
5113  10BEE033                LDY _Ttmp9
5117  BEE039                  LDX _Ttmp11
511A  BD32D6                  JSR DUFFDEVICE
                              ; L:68
511D  F6E1E7                  LDB _word2
5120  BD31C7                  JSR DSFREE
5123  108E57B1                LDY #_Tstr357
5127  BD31B5                  JSR DSDEFINE
512A  F7E1E7                  STB _word2
                              ; P:27
                              ; L:69
512D                  _label342f
512D                  _label342e1
                              ; P:2
                              ; L:70
                              ; P:0
                              ; L:71
                              ; P:0
                              ; L:72
                              ; P:0
                              ; L:73
                              ; P:0
                              ; L:74
512D  C6FF                    LDB #$ff
512F  F7E026                  STB _Ttmp2
5132  F6E026                  LDB _Ttmp2
5135  F7E1E8                  STB _action
                              ; P:4
                              ; L:75
5138  C6FF                    LDB #$ff
513A  F7E026                  STB _Ttmp2
513D  F6E026                  LDB _Ttmp2
5140  F7E1E9                  STB _subject
                              ; P:4
                              ; L:76
                              ; P:0
                              ; L:77
5143  4F                      CLRA
5144  B7E026                  STA _Ttmp2
5147  C604                    LDB #$04
5149  F7E036                  STB _Ttmp10
                              ; _TRtmp359 <-> (step 1) (resident)
                              ; _TRtmp360 <-> (resident to) (resident)
514C  F6E036                  LDB _Ttmp10
514F  F7E1EC                  STB _TRtmp360
5152  C601                    LDB #$01
5154  F7E1EA                  STB _TRtmp359
5157  F6E026                  LDB _Ttmp2
515A  F7E1EB                  STB _x
515D                  _label361bf
515D  5F                      CLRB
515E  B6E1EB                  LDA _x
5161  B1E1EC                  CMPA _TRtmp360
5164  2301                    BLS _label363
5166  5A                      DECB
5167                  _label363
5167  F7E0F4                  STB _Ttmp125
516A  F6E0F4                  LDB _Ttmp125
                              IF (((128+_label361bis-(*+2))|(127-_label361bis+(*+2)))&0x8000)
516D  10260226                LBNE _label361bis
                              ELSE
                              BNE _label361bis
                              ENDIF
                              ; P:24
                              ; L:78
5171  C603                    LDB #$03
5173  F7E026                  STB _Ttmp2
5176  F6E1EE                  LDB _Ttmp364
5179  BD31C7                  JSR DSFREE
517C  B6E026                  LDA _Ttmp2
517F  BD327C                  JSR DSALLOC
5182  F7E1EE                  STB _Ttmp364
5185  F6E1EE                  LDB _Ttmp364
5188  BD321B                  JSR DSDESCRIPTOR
518B  EC01                    LDD 1,X 
518D  FDE033                  STD _Ttmp9
5190  A684                    LDA ,X 
5192  B7E036                  STA _Ttmp10
5195  F6E1E4                  LDB _word1
5198  BD321B                  JSR DSDESCRIPTOR
519B  EC01                    LDD 1,X 
519D  FDE039                  STD _Ttmp11
51A0  A684                    LDA ,X 
51A2  B7E03C                  STA _Ttmp12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
51A5  4F                      CLRA
51A6  F6E036                  LDB _Ttmp10
51A9  10BEE039                LDY _Ttmp11
51AD  BEE033                  LDX _Ttmp9
51B0  BD32D6                  JSR DUFFDEVICE
51B3  CC0000                  LDD #$0000
51B6  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
51B9  FDE1F3                  STD _Ttmp367
51BC  F6E1EB                  LDB _x
51BF  F7E1F4                  STB _Ttmp367+1
51C2  FCE1F3                  LDD _Ttmp367
51C5  F3E02D                  ADDD _Ttmp6
51C8  FDE02D                  STD _Ttmp6
51CB  FCE02D                  LDD _Ttmp6
51CE  C354F8                  ADDD #_verb
51D1  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
51D4  1F01                    TFR D,X
51D6  E684                    LDB ,X
51D8  F7E1F6                  STB _Ttmp369
51DB  F6E1F6                  LDB _Ttmp369
51DE  BD321B                  JSR DSDESCRIPTOR
51E1  EC01                    LDD 1,X 
51E3  FDE19B                  STD _Ttmp239
51E6  A684                    LDA ,X 
51E8  B7E09D                  STA _Ttmp88
51EB  F6E1F0                  LDB _Ttmp366
51EE  BD31C7                  JSR DSFREE
51F1  B6E09D                  LDA _Ttmp88
51F4  BD327C                  JSR DSALLOC
51F7  F7E1F0                  STB _Ttmp366
51FA  F6E1F0                  LDB _Ttmp366
51FD  BD321B                  JSR DSDESCRIPTOR
5200  EC01                    LDD 1,X 
5202  FDE19F                  STD _Ttmp241
5205  A684                    LDA ,X 
5207  B7E09F                  STA _Ttmp89
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
520A  4F                      CLRA
520B  F6E09D                  LDB _Ttmp88
520E  10BEE19B                LDY _Ttmp239
5212  BEE19F                  LDX _Ttmp241
5215  BD32D6                  JSR DUFFDEVICE
5218  C603                    LDB #$03
521A  F7E0A1                  STB _Ttmp91
521D  F6E1F8                  LDB _Ttmp371
5220  BD31C7                  JSR DSFREE
5223  B6E0A1                  LDA _Ttmp91
5226  BD327C                  JSR DSALLOC
5229  F7E1F8                  STB _Ttmp371
522C  F6E1F8                  LDB _Ttmp371
522F  BD321B                  JSR DSDESCRIPTOR
5232  EC01                    LDD 1,X 
5234  FDE1BC                  STD _Ttmp303
5237  A684                    LDA ,X 
5239  B7E0A3                  STA _Ttmp93
523C  F6E1F0                  LDB _Ttmp366
523F  BD321B                  JSR DSDESCRIPTOR
5242  EC01                    LDD 1,X 
5244  FDE1CA                  STD _Ttmp316
5247  A684                    LDA ,X 
5249  B7E0A5                  STA _Ttmp94
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
524C  4F                      CLRA
524D  F6E0A3                  LDB _Ttmp93
5250  10BEE1CA                LDY _Ttmp316
5254  BEE1BC                  LDX _Ttmp303
5257  BD32D6                  JSR DUFFDEVICE
525A  F6E1EE                  LDB _Ttmp364
525D  BD321B                  JSR DSDESCRIPTOR
5260  EC01                    LDD 1,X 
5262  FDE1D8                  STD _Ttmp328
5265  A684                    LDA ,X 
5267  B7E0A7                  STA _Ttmp96
526A  F6E1F8                  LDB _Ttmp371
526D  BD321B                  JSR DSDESCRIPTOR
5270  EC01                    LDD 1,X 
5272  FDE1DC                  STD _Ttmp329
5275  A684                    LDA ,X 
5277  B7E0A9                  STA _Ttmp97
527A  5F                      CLRB
527B  B6E0A7                  LDA _Ttmp96
527E  B1E0A9                  CMPA _Ttmp97
5281  2601                    BNE _label373
5283  5A                      DECB
5284                  _label373
5284  F7E0F4                  STB _Ttmp125
5287  F6E0F4                  LDB _Ttmp125
                              IF (((128+_label372-(*+2))|(127-_label372+(*+2)))&0x8000)
                              LBEQ _label372
                              ELSE
528A  274A                    BEQ _label372
                              ENDIF
528C  B6E0A7                  LDA _Ttmp96
528F  2739                    BEQ _label374equal
5291  10BEE1D8                LDY _Ttmp328
5295  BEE1DC                  LDX _Ttmp329
5298  B6E0A7                  LDA _Ttmp96
529B  8480                    ANDA #$80
529D  2717                    BEQ _label374second
529F                  _label374first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
529F  4F                      CLRA
52A0                  _label374loop
52A0  E686                    LDB A,X
52A2  E1A6                    CMPB A,Y
52A4  262C                    BNE _label374diff
52A6  8B01                    ADDA #1
52A8  817F                    CMPA #$7F
52AA  26F4                    BNE _label374loop
52AC  31A87F                  LEAY 127,Y
52AF  30887F                  LEAX 127,X
52B2  3121                    LEAY 1,Y
52B4  3001                    LEAX 1,X
52B6                  _label374second
52B6  B6E0A7                  LDA _Ttmp96
52B9  847F                    ANDA #$7f
52BB  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
52BD  4F                      CLRA
52BE                  _label374loop2
52BE  E686                    LDB A,X
52C0  E1A6                    CMPB A,Y
52C2  260E                    BNE _label374diff
52C4  8B01                    ADDA #1
52C6  9114                    CMPA <MATHPTR0
52C8  26F4                    BNE _label374loop2
52CA                  _label374equal
52CA  86FF                    LDA #$ff
52CC  B7E0F4                  STA _Ttmp125
52CF  7E52D6                  JMP _label374final
52D2                  _label374diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
52D2  4F                      CLRA
52D3  B7E0F4                  STA _Ttmp125
52D6                  _label374final
52D6                  _label372
52D6  F6E0F4                  LDB _Ttmp125
                              IF (((128+_label375e0-(*+2))|(127-_label375e0+(*+2)))&0x8000)
52D9  102700A7                LBEQ _label375e0
                              ELSE
                              BEQ _label375e0
                              ENDIF
52DD                  _label375t
                              ; P:157
                              ; L:79
52DD  F6E1EB                  LDB _x
52E0  F7E1E8                  STB _action
                              ; L:79
52E3  CC0000                  LDD #$0000
52E6  FDE02D                  STD _Ttmp6
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
52E9  FDE1F3                  STD _Ttmp367
52EC  F6E1EB                  LDB _x
52EF  F7E1F4                  STB _Ttmp367+1
52F2  FCE1F3                  LDD _Ttmp367
52F5  F3E02D                  ADDD _Ttmp6
52F8  FDE02D                  STD _Ttmp6
52FB  FCE02D                  LDD _Ttmp6
52FE  C354F8                  ADDD #_verb
5301  FDE02D                  STD _Ttmp6
                      ; peephole(1): r537 (STD,LDD[])->(TDX,LOAD*X)
                      ;       LDB [_Ttmp6]
5304  1F01                    TFR D,X
5306  E684                    LDB ,X
5308  F7E1FC                  STB _Ttmp379
530B  F6E1FC                  LDB _Ttmp379
530E  BD321B                  JSR DSDESCRIPTOR
5311  EC01                    LDD 1,X 
5313  FDE033                  STD _Ttmp9
5316  A684                    LDA ,X 
5318  B7E03C                  STA _Ttmp12
531B  F6E1FA                  LDB _Ttmp377
531E  BD31C7                  JSR DSFREE
5321  B6E03C                  LDA _Ttmp12
5324  BD327C                  JSR DSALLOC
5327  F7E1FA                  STB _Ttmp377
532A  F6E1FA                  LDB _Ttmp377
532D  BD321B                  JSR DSDESCRIPTOR
5330  EC01                    LDD 1,X 
5332  FDE039                  STD _Ttmp11
5335  A684                    LDA ,X 
5337  B7E089                  STA _Ttmp78
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
533A  4F                      CLRA
533B  F6E03C                  LDB _Ttmp12
533E  10BEE033                LDY _Ttmp9
5342  BEE039                  LDX _Ttmp11
5345  BD32D6                  JSR DUFFDEVICE
5348  F6E1FA                  LDB _Ttmp377
534B  BD321B                  JSR DSDESCRIPTOR
534E  EC01                    LDD 1,X 
5350  FDE19B                  STD _Ttmp239
5353  A684                    LDA ,X 
5355  B7E09D                  STA _Ttmp88
5358  F6E1FD                  LDB _myverb
535B  BD31C7                  JSR DSFREE
535E  B6E09D                  LDA _Ttmp88
5361  BD327C                  JSR DSALLOC
5364  F7E1FD                  STB _myverb
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _myverb
5367  BD321B                  JSR DSDESCRIPTOR
536A  EC01                    LDD 1,X 
536C  FDE19F                  STD _Ttmp241
536F  A684                    LDA ,X 
5371  B7E09F                  STA _Ttmp89
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
5374  4F                      CLRA
5375  F6E09D                  LDB _Ttmp88
5378  10BEE19B                LDY _Ttmp239
537C  BEE19F                  LDX _Ttmp241
537F  BD32D6                  JSR DUFFDEVICE
                              ; P:60
                              ; L:80
                              IF (((128+_label375f-(*+2))|(127-_label375f+(*+2)))&0x8000)
                              JMP _label375f
                              ELSE
5382  2005                    BRA _label375f
                              ENDIF
5384                  _label375e0
5384  F6E0F4                  LDB _Ttmp125
                              IF (((128+_label375f-(*+2))|(127-_label375f+(*+2)))&0x8000)
                              LBNE _label375f
                              ELSE
5387  2600                    BNE _label375f
                              ENDIF
                              ; P:12
                              ; L:81
                              ; P:0
                              ; L:82
5389                  _label375f
5389                  _label375e1
                              ; P:2
                              ; L:83
5389  F6E1EB                  LDB _x
538C  FBE1EA                  ADDB _TRtmp359
538F  F7E1EB                  STB _x
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _x
                      ; peephole(2): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;       CMPB #$00
                              IF (((128+_label361bis-(*+2))|(127-_label361bis+(*+2)))&0x8000)
                              LBEQ _label361bis
                              ELSE
5392  2703                    BEQ _label361bis
                              ENDIF
                              IF (((128+_label361bf-(*+2))|(127-_label361bf+(*+2)))&0x8000)
5394  7E515D                  JMP _label361bf
                              ELSE
                              BRA _label361bf
                              ENDIF
5397                  _label361bis
                              ; P:16
                              ; L:84
                              ; P:0
                              ; L:85
                              ; P:0
                              ; L:86
                              ; P:0
                              ; L:87
                              ; P:0
                              ; L:88
                              ; P:0
                              ; L:89
                              ; P:0
                              ; L:90
                              ; P:0
                              ; L:91
                              ; P:0
                              ; L:92
                              ; P:0
                              ; L:93
                              ; P:0
                              ; L:94
                              ; P:0
                              ; L:95
5397  C6FF                    LDB #$ff
5399  F7E026                  STB _Ttmp2
539C  5F                      CLRB
539D  B6E1E8                  LDA _action
53A0  B1E026                  CMPA _Ttmp2
53A3  2601                    BNE _label383
53A5  5A                      DECB
53A6                  _label383
53A6  F7E0F4                  STB _Ttmp125
53A9  F6E0F4                  LDB _Ttmp125
53AC  53                      COMB
53AD  F7E0FC                  STB _Ttmp131
53B0  F6E0FC                  LDB _Ttmp131
                              IF (((128+_label384e0-(*+2))|(127-_label384e0+(*+2)))&0x8000)
                              LBEQ _label384e0
                              ELSE
53B3  275B                    BEQ _label384e0
                              ENDIF
53B5                  _label384t
                              ; P:19
                              ; L:96
53B5  F6E1FD                  LDB _myverb
53B8  BD321B                  JSR DSDESCRIPTOR
53BB  EC01                    LDD 1,X 
53BD  FDE033                  STD _Ttmp9
53C0  A684                    LDA ,X 
53C2  B7E026                  STA _Ttmp2
53C5  10BEE033                LDY _Ttmp9
53C9  10BF0001                STY TEXTPTR
53CD  B6E026                  LDA _Ttmp2
53D0  B70003                  STA TEXTSIZE
53D3  BD44BC                  JSR TEXTATBITMAPMODE
53D6  4F                      CLRA
53D7  B700D3                  STA XCURSYS
53DA  7C00D6                  INC YCURSYS
53DD  F6313F                  LDB CURRENTTILESHEIGHT
53E0  F7E0F4                  STB _Ttmp125
53E3  F6E0F4                  LDB _Ttmp125
53E6  C47F                    ANDB #$7f
53E8  F7E0F4                  STB _Ttmp125
53EB  5F                      CLRB
53EC  B600D6                  LDA YCURSYS
53EF  B1E0F4                  CMPA _Ttmp125
53F2  2D01                    BLT _label389
53F4  5A                      DECB
53F5                  _label389
53F5  F7E11C                  STB _Ttmp148
53F8  F6E11C                  LDB _Ttmp148
                              IF (((128+_label387scroll-(*+2))|(127-_label387scroll+(*+2)))&0x8000)
                              LBNE _label387scroll
                              ELSE
53FB  2602                    BNE _label387scroll
                              ENDIF
                              IF (((128+_label387end-(*+2))|(127-_label387end+(*+2)))&0x8000)
                              JMP _label387end
                              ELSE
53FD  2011                    BRA _label387end
                              ENDIF
53FF                  _label387scroll
53FF  86FF                    LDA #$ff
5401  B7004A                  STA DIRECTION
5404  BD4710                  JSR VSCROLLT
5407  F6313F                  LDB CURRENTTILESHEIGHT
540A  F700D6                  STB YCURSYS
540D  7A00D6                  DEC YCURSYS
5410                  _label387end
                              ; P:45
                              ; L:97
5410                  _label384f
5410                  _label384e0
                              ; P:2
                              ; L:98
                              ; P:0
                              ; L:99
5410  C6FF                    LDB #$ff
5412  F7E026                  STB _Ttmp2
5415  5F                      CLRB
5416  B6E1E9                  LDA _subject
5419  B1E026                  CMPA _Ttmp2
541C  2601                    BNE _label391
541E  5A                      DECB
541F                  _label391
541F  F7E0F4                  STB _Ttmp125
5422  F6E0F4                  LDB _Ttmp125
5425  53                      COMB
5426  F7E0FC                  STB _Ttmp131
5429  F6E0FC                  LDB _Ttmp131
                              IF (((128+_label392e0-(*+2))|(127-_label392e0+(*+2)))&0x8000)
                              LBEQ _label392e0
                              ELSE
542C  275B                    BEQ _label392e0
                              ENDIF
542E                  _label392t
                              ; P:19
                              ; L:100
542E  F6E1FE                  LDB _mynoun
5431  BD321B                  JSR DSDESCRIPTOR
5434  EC01                    LDD 1,X 
5436  FDE033                  STD _Ttmp9
5439  A684                    LDA ,X 
543B  B7E026                  STA _Ttmp2
543E  10BEE033                LDY _Ttmp9
5442  10BF0001                STY TEXTPTR
5446  B6E026                  LDA _Ttmp2
5449  B70003                  STA TEXTSIZE
544C  BD44BC                  JSR TEXTATBITMAPMODE
544F  4F                      CLRA
5450  B700D3                  STA XCURSYS
5453  7C00D6                  INC YCURSYS
5456  F6313F                  LDB CURRENTTILESHEIGHT
5459  F7E0F4                  STB _Ttmp125
545C  F6E0F4                  LDB _Ttmp125
545F  C47F                    ANDB #$7f
5461  F7E0F4                  STB _Ttmp125
5464  5F                      CLRB
5465  B600D6                  LDA YCURSYS
5468  B1E0F4                  CMPA _Ttmp125
546B  2D01                    BLT _label397
546D  5A                      DECB
546E                  _label397
546E  F7E11C                  STB _Ttmp148
5471  F6E11C                  LDB _Ttmp148
                              IF (((128+_label395scroll-(*+2))|(127-_label395scroll+(*+2)))&0x8000)
                              LBNE _label395scroll
                              ELSE
5474  2602                    BNE _label395scroll
                              ENDIF
                              IF (((128+_label395end-(*+2))|(127-_label395end+(*+2)))&0x8000)
                              JMP _label395end
                              ELSE
5476  2011                    BRA _label395end
                              ENDIF
5478                  _label395scroll
5478  86FF                    LDA #$ff
547A  B7004A                  STA DIRECTION
547D  BD4710                  JSR VSCROLLT
5480  F6313F                  LDB CURRENTTILESHEIGHT
5483  F700D6                  STB YCURSYS
5486  7A00D6                  DEC YCURSYS
5489                  _label395end
                              ; P:45
                              ; L:101
5489                  _label392f
5489                  _label392e0
                              ; P:2
                              ; L:102
                              ; P:0
                              ; L:103
                              ; P:0
                              ; L:104
                              ; P:0
                              ; L:105
                              ; P:0
                              ; L:106
                              ; P:0
                              ; L:107
                              ; P:0
                              ; L:108
                              ; P:0
                              ; L:109
                              ; P:0
                              ; L:110
                              ; P:0
                              ; L:111
                              ; P:0
                              ; L:112
                              ; P:0
                              ; L:113
5489  CC03E8                  LDD #$03e8
548C  FDE029                  STD _Ttmp5
548F  CC0000                  LDD #$0000
5492  FDE02D                  STD _Ttmp6
5495  FCE029                  LDD _Ttmp5
5498  FDE1F3                  STD _Ttmp367
549B  FCE1F3                  LDD _Ttmp367
549E  8E0004                  LDX #$04
54A1                  _label399loop
54A1  1CFE                    ANDCC #$FE
54A3  47                      ASRA
54A4  56                      RORB
54A5  301F                    LEAX -1,X 
54A7  8C0000                  CMPX #0
54AA  26F5                    BNE _label399loop
54AC  FDE1F3                  STD _Ttmp367
54AF  5F                      CLRB
54B0  BEE1F3                  LDX _Ttmp367
54B3  BCE02D                  CMPX _Ttmp6
54B6  2601                    BNE _label401
54B8  5A                      DECB
54B9                  _label401
54B9  F7E0F4                  STB _Ttmp125
54BC  F6E0F4                  LDB _Ttmp125
54BF  53                      COMB
54C0  F7E0FC                  STB _Ttmp131
54C3  F6E0FC                  LDB _Ttmp131
                              IF (((128+_label402e0-(*+2))|(127-_label402e0+(*+2)))&0x8000)
                              LBEQ _label402e0
                              ELSE
54C6  270D                    BEQ _label402e0
                              ENDIF
54C8                  _label402t
54C8  FCE1F3                  LDD _Ttmp367
54CB  BE0112                  LDX $0112
54CE  308B                    LEAX D,X 
54D0                  _label403first
54D0  BC0112                  CMPX $0112
54D3  2EFB                    BGT _label403first
54D5                  _label402f
54D5                  _label402e0
                              ; P:41
                              ; L:114
                              ; P:0
                              ; L:115
                              IF (((128+_label82-(*+2))|(127-_label82+(*+2)))&0x8000)
54D5  7E39D6                  JMP _label82
                              ELSE
                              BRA _label82
                              ENDIF
54D8                  _label82bis
                              ; P:6
                              ; L:116
                              ; P:0
                              ; L:117
                              ; P:0
                              ; L:118
                              ; P:0
                              ; L:119
                              ; P:0
                              ; L:120
                              ; P:0
                              ; L:121
                              ; P:0
                              ; L:122
                              ; P:0
                              ; L:123
                              ; P:0
                              ; L:124
                              ; P:0
                              ; L:125
                              ; P:0
54D8                  _label404
                              IF (((128+_label404-(*+2))|(127-_label404+(*+2)))&0x8000)
                              JMP _label404
                              ELSE
54D8  20FE                    BRA _label404
                              ENDIF
E000                  _PEN equ $e000
E001                  _PAPER equ $e001
E002                  _windowE equ $e002
E003                  _windowS equ $e003
E004                  _windowW equ $e004
5822                  _TAB equ cstring1
E005                  _windowMX equ $e005
E006                  _windowMY equ $e006
54DA  000000000000000000000000000000000000000000000000000000000000 _noun rzb 30
54F8  000000000000000000000000000000000000000000000000000000000000 _verb rzb 30
E071                  _xloc equ $e071
E072                  _batt equ $e072
E077                  _w equ $e077
E079                  _h equ $e079
E07D                  _c equ $e07d
E086                  _mid1 equ $e086
E08A                  _mid2 equ $e08a
keyimage rzb 307
E08C                  _finished equ $e08c
E0B2                  _draw__x0 equ $e0b2
E0B4                  _draw__y0 equ $e0b4
E0B6                  _draw__x1 equ $e0b6
E0B8                  _draw__y1 equ $e0b8
E0BA                  _draw__c equ $e0ba
E1AB                  _sentence equ $e1ab
E1E4                  _word1 equ $e1e4
E1E7                  _word2 equ $e1e7
E1E8                  _action equ $e1e8
E1E9                  _subject equ $e1e9
E1EB                  _x equ $e1eb
E1FD                  _myverb equ $e1fd
E1FE                  _mynoun equ $e1fe
5649  00                      fcb 0
0200                  max_free_string equ $0200
E026                  _Ttmp2 equ $e026
581C                  _Tstr3 equ cstring4
E029                  _Ttmp5 equ $e029
E02D                  _Ttmp6 equ $e02d
E030                  _Ttmp7 equ $e030
E033                  _Ttmp9 equ $e033
E036                  _Ttmp10 equ $e036
E039                  _Ttmp11 equ $e039
E03C                  _Ttmp12 equ $e03c
5816                  _Tstr14 equ cstring15
E03E                  _Ttmp16 equ $e03e
5811                  _Tstr19 equ cstring20
E040                  _Ttmp21 equ $e040
580C                  _Tstr24 equ cstring25
E042                  _Ttmp26 equ $e042
5809                  _Tstr29 equ cstring30
E044                  _Ttmp31 equ $e044
5804                  _Tstr34 equ cstring35
E046                  _Ttmp36 equ $e046
57FD                  _Tstr39 equ cstring40
E048                  _Ttmp41 equ $e048
57FA                  _Tstr44 equ cstring45
E068                  _Ttmp46 equ $e068
57F6                  _Tstr49 equ cstring50
E06A                  _Ttmp51 equ $e06a
57F1                  _Tstr54 equ cstring55
E06C                  _Ttmp56 equ $e06c
57EB                  _Tstr59 equ cstring60
E06E                  _Ttmp61 equ $e06e
57E5                  _Tstr64 equ cstring65
E070                  _Ttmp66 equ $e070
57E0                  _Tstr69 equ cstring70
E075                  _Ttmp71 equ $e075
E07C                  _Ttmp74 equ $e07c
E080                  _Ttmp76 equ $e080
E084                  _Ttmp77 equ $e084
E089                  _Ttmp78 equ $e089
564A                  _Timg80 rzb 0
564A  00181800000000000000000000000000 _Timg81 fcb 0,24,24,0,0,0,0,0,0,0,0,0,0,0,0,    0
565A  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
566A  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
567A  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
568A  00111111000000000000000001111111         fcb 0,17,17,17,0,0,0,0,0,0,0,0,1,17,17, 17
569A  10000000000000001111111111000000         fcb 16,0,0,0,0,0,0,0,17,17,17,17,17,0,0,        0
56AA  00000001111111111110000000000011         fcb 0,0,0,1,17,17,17,17,17,16,0,0,0,0,0,        17
56BA  11110011111100000000001111100001         fcb 17,17,0,17,17,17,0,0,0,0,0,17,17,16,0,      1
56CA  11111111111111111100000011111111         fcb 17,17,17,17,17,17,17,17,17,0,0,0,17,17,17,  17
56DA  11111111110000001111111111111111         fcb 17,17,17,17,17,0,0,0,17,17,17,17,17,17,17,  17
56EA  11100001111111111111111111110011         fcb 17,16,0,1,17,17,17,17,17,17,17,17,17,17,0,  17
56FA  11110000111100011111111111100000         fcb 17,17,0,0,17,17,0,1,17,17,17,17,17,16,0,    0
570A  11110000111111111100000011110000         fcb 17,17,0,0,17,17,17,17,17,0,0,0,17,17,0,     0
571A  01111111100000000000000000111111         fcb 1,17,17,17,16,0,0,0,0,0,0,0,0,17,17,        17
572A  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
573A  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
574A  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
575A  00000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      0
576A  000000003FFFFFFFFFFFFFFFFFFFFFFF         fcb 0,0,0,0,63,255,255,255,255,255,255,255,255,255,255, 255
577A  FFFFFF                  fcb 255,255,255
E090                  _Ttmp83 equ $e090
E093                  _Ttmp85 equ $e093
E096                  _Ttmp86 equ $e096
E09A                  _Ttmp87 equ $e09a
E09D                  _Ttmp88 equ $e09d
E09F                  _Ttmp89 equ $e09f
E0A1                  _Ttmp91 equ $e0a1
E0A3                  _Ttmp93 equ $e0a3
E0A5                  _Ttmp94 equ $e0a5
E0A7                  _Ttmp96 equ $e0a7
E0A9                  _Ttmp97 equ $e0a9
E0AC                  _Ttmp105 equ $e0ac
E0B0                  _Ttmp106 equ $e0b0
E0BD                  _Ttmp108 equ $e0bd
E0C1                  _Ttmp109 equ $e0c1
E0C5                  _Ttmp110 equ $e0c5
E0C9                  _Ttmp111 equ $e0c9
E0CD                  _Ttmp112 equ $e0cd
E0D1                  _Ttmp113 equ $e0d1
E0D5                  _Ttmp114 equ $e0d5
E0D9                  _Ttmp115 equ $e0d9
E0DD                  _Ttmp116 equ $e0dd
E0E1                  _Ttmp117 equ $e0e1
E0E4                  _Ttmp118 equ $e0e4
E0E6                  _Ttmp119 equ $e0e6
E0E9                  _Ttmp120 equ $e0e9
E0EC                  _Ttmp121 equ $e0ec
E0EF                  _Ttmp122 equ $e0ef
E0F2                  _Ttmp123 equ $e0f2
E0F4                  _Ttmp125 equ $e0f4
E0F7                  _Ttmp128 equ $e0f7
E0FA                  _Ttmp129 equ $e0fa
E0FC                  _Ttmp131 equ $e0fc
E0FF                  _Ttmp134 equ $e0ff
E102                  _Ttmp135 equ $e102
E105                  _Ttmp136 equ $e105
E109                  _Ttmp137 equ $e109
E10F                  _Ttmp138 equ $e10f
E114                  _Ttmp139 equ $e114
E116                  _Ttmp140 equ $e116
E118                  _Ttmp142 equ $e118
E11A                  _Ttmp146 equ $e11a
E11C                  _Ttmp148 equ $e11c
E11E                  _Ttmp152 equ $e11e
E121                  _Ttmp155 equ $e121
E124                  _Ttmp156 equ $e124
E126                  _Ttmp159 equ $e126
E128                  _Ttmp161 equ $e128
E12A                  _Ttmp162 equ $e12a
E12C                  _Ttmp164 equ $e12c
E12E                  _Ttmp167 equ $e12e
E131                  _Ttmp168 equ $e131
E134                  _Ttmp169 equ $e134
E137                  _Ttmp170 equ $e137
E13A                  _Ttmp171 equ $e13a
E13F                  _Ttmp172 equ $e13f
E144                  _Ttmp173 equ $e144
E146                  _Ttmp174 equ $e146
E148                  _Ttmp176 equ $e148
E14A                  _Ttmp180 equ $e14a
E14C                  _Ttmp182 equ $e14c
E14F                  _Ttmp185 equ $e14f
E152                  _Ttmp186 equ $e152
E154                  _Ttmp189 equ $e154
E156                  _Ttmp191 equ $e156
E158                  _Ttmp193 equ $e158
E15B                  _Ttmp196 equ $e15b
E15E                  _Ttmp197 equ $e15e
E161                  _Ttmp198 equ $e161
E164                  _Ttmp199 equ $e164
E167                  _Ttmp200 equ $e167
E16A                  _Ttmp201 equ $e16a
E16D                  _Ttmp202 equ $e16d
E170                  _Ttmp203 equ $e170
E175                  _Ttmp204 equ $e175
E17A                  _Ttmp205 equ $e17a
E17C                  _Ttmp206 equ $e17c
E17E                  _Ttmp208 equ $e17e
E180                  _Ttmp212 equ $e180
E182                  _Ttmp214 equ $e182
E184                  _Ttmp217 equ $e184
E186                  _Ttmp218 equ $e186
E188                  _Ttmp219 equ $e188
E18A                  _Ttmp220 equ $e18a
E18C                  _Ttmp221 equ $e18c
E18E                  _Ttmp222 equ $e18e
E190                  _Ttmp223 equ $e190
E192                  _Ttmp224 equ $e192
57FD                  _Tstr230 equ cstring40
57D4                  _Tstr234 equ cstring235
E194                  _Ttmp236 equ $e194
E196                  _Ttmp237 equ $e196
E198                  _Ttmp238 equ $e198
E19B                  _Ttmp239 equ $e19b
E19F                  _Ttmp241 equ $e19f
57C8                  _Tstr246 equ cstring247
57C4                  _Tstr248 equ cstring249
E1A2                  _Ttmp250 equ $e1a2
E1A4                  _Ttmp251 equ $e1a4
E1A6                  _Ttmp252 equ $e1a6
E1A8                  _Ttmp253 equ $e1a8
E1AA                  _Ttmp254 equ $e1aa
57B4                  _Tstr260 equ cstring261
E1AD                  _Ttmp266 equ $e1ad
E1AF                  _Ttmp267 equ $e1af
E1B1                  _Ttmp268 equ $e1b1
E1B3                  _Ttmp269 equ $e1b3
E1B5                  _Ttmp270 equ $e1b5
E1B7                  _Ttmp271 equ $e1b7
E1B9                  _Ttmp272 equ $e1b9
E1BC                  _Ttmp303 equ $e1bc
E1BF                  _Ttmp305 equ $e1bf
E1C1                  _Ttmp308 equ $e1c1
E1C3                  _Ttmp309 equ $e1c3
E1C5                  _Ttmp312 equ $e1c5
E1C7                  _Ttmp313 equ $e1c7
E1CA                  _Ttmp316 equ $e1ca
E1CD                  _Ttmp318 equ $e1cd
E1CF                  _Ttmp321 equ $e1cf
E1D1                  _Ttmp322 equ $e1d1
E1D3                  _Ttmp325 equ $e1d3
E1D5                  _Ttmp326 equ $e1d5
E1D8                  _Ttmp328 equ $e1d8
E1DC                  _Ttmp329 equ $e1dc
E1DF                  _Ttmp332 equ $e1df
E1E1                  _Ttmp333 equ $e1e1
57B2                  _Tstr335 equ cstring336
57B2                  _Tstr343 equ cstring336
E1E3                  _Ttmp349 equ $e1e3
57B2                  _Tstr350 equ cstring336
E1E6                  _Ttmp356 equ $e1e6
57B1                  _Tstr357 equ cstring358
E1EE                  _Ttmp364 equ $e1ee
E1F0                  _Ttmp366 equ $e1f0
E1F3                  _Ttmp367 equ $e1f3
E1F6                  _Ttmp369 equ $e1f6
E1F8                  _Ttmp371 equ $e1f8
E1FA                  _Ttmp377 equ $e1fa
E1FC                  _Ttmp379 equ $e1fc
577D  00                      fcb 0
E1EA                  _TRtmp359 equ $e1ea
E1EC                  _TRtmp360 equ $e1ec
577E  00                      fcb 0
577F                  VARINIT
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$38
577F  CC0038                  LDD #$0038
5782  B7E001                  STA _PAPER
                      ; peephole(5): unread1
                      ;       STA _windowE
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _windowS
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _windowW
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _windowMX
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _windowMY
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
5785  B7E071                  STA _xloc
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
5788  F7E000                  STB _PEN
                      ;       CLRA
                      ; peephole(2): r738 [A=0](CLRA)->()
                      ;       CLRA
578B  5F                      CLRB
578C  FDE077                  STD _w
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
578F  FDE079                  STD _h
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(5): unread1
                      ;       STA _c
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
5792  FDE086                  STD _mid1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
                      ; peephole(5): unread1
                      ;       STD _mid2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
5795  FDE08C                  STD _finished
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
5798  FDE0B2                  STD _draw__x0
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
579B  FDE0B4                  STD _draw__y0
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
579E  FDE0B6                  STD _draw__x1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
57A1  FDE0B8                  STD _draw__y1
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
57A4  B7E0BA                  STA _draw__c
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
57A7  B7E1E8                  STA _action
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
57AA  B7E1E9                  STA _subject
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
57AD  B7E1EB                  STA _x
57B0  39                      RTS
57B1  00              cstring358 fcb 0
57B2  01              cstring336 fcb 1
57B3  20                      fcc " "
57B4  0F              cstring261 fcb 15
57B5  436F6D6D616E6420456E7472793A20         fcc "Command Entry: "
57C4  03              cstring249 fcb 3
57C5  524544                  fcc "RED"
57C8  0B              cstring247 fcb 11
57C9  416C657274204C766C3A20         fcc "Alert Lvl: "
57D4  0B              cstring235 fcb 11
57D5  426174742E204C766C3A20         fcc "Batt. Lvl: "
57E0  04              cstring70 fcb 4
57E1  31303025                fcc "100%"
57E5  05              cstring65 fcb 5
57E6  53544F5245              fcc "STORE"
57EB  05              cstring60 fcb 5
57EC  4341525259              fcc "CARRY"
57F1  04              cstring55 fcb 4
57F2  4C4F4F4B                fcc "LOOK"
57F6  03              cstring50 fcb 3
57F7  474554                  fcc "GET"
57FA  02              cstring45 fcb 2
57FB  474F                    fcc "GO"
57FD  06              cstring40 fcb 6
57FE  535441545553            fcc "STATUS"
5804  04              cstring35 fcb 4
5805  444F574E                fcc "DOWN"
5809  02              cstring30 fcb 2
580A  5550                    fcc "UP"
580C  04              cstring25 fcb 4
580D  57455354                fcc "WEST"
5811  04              cstring20 fcb 4
5812  45415354                fcc "EAST"
5816  05              cstring15 fcb 5
5817  534F555448              fcc "SOUTH"
581C  05              cstring4 fcb 5
581D  4E4F525448              fcc "NORTH"
5822  01              cstring1 fcb 1
5823  09                      fcc $09
5824                  UDCCHAR
                              ; $00 
5824  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $01 
582C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $02 
5834  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $03 
583C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $04 
5844  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $05 
584C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $06 
5854  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $07 
585C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $08 
5864  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $09 
586C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0a 
5874  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0b 
587C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0c 
5884  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0d 
588C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0e 
5894  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $0f 
589C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $10 
58A4  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $11 
58AC  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $12 
58B4  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $13 
58BC  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $14 
58C4  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $15 
58CC  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $16 
58D4  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $17 
58DC  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $18 
58E4  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $19 
58EC  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1a 
58F4  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1b 
58FC  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1c 
5904  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1d 
590C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1e 
5914  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $1f 
591C  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $20 
5924  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $21 
592C  1818181800001800         fcb $18,$18,$18,$18,$00,$00,$18,        $00
                              ; $22 
5934  6666660000000000         fcb $66,$66,$66,$00,$00,$00,$00,        $00
                              ; $23 
593C  6666FF66FF666600         fcb $66,$66,$ff,$66,$ff,$66,$66,        $00
                              ; $24 
5944  183E603C067C1800         fcb $18,$3e,$60,$3c,$06,$7c,$18,        $00
                              ; $25 
594C  62660C1830664600         fcb $62,$66,$0c,$18,$30,$66,$46,        $00
                              ; $26 
5954  3C663C3867663F00         fcb $3c,$66,$3c,$38,$67,$66,$3f,        $00
                              ; $27 
595C  060C180000000000         fcb $06,$0c,$18,$00,$00,$00,$00,        $00
                              ; $28 
5964  0C18303030180C00         fcb $0c,$18,$30,$30,$30,$18,$0c,        $00
                              ; $29 
596C  30180C0C0C183000         fcb $30,$18,$0c,$0c,$0c,$18,$30,        $00
                              ; $2a 
5974  00663CFF3C660000         fcb $00,$66,$3c,$ff,$3c,$66,$00,        $00
                              ; $2b 
597C  0018187E18180000         fcb $00,$18,$18,$7e,$18,$18,$00,        $00
                              ; $2c 
5984  0000000000181830         fcb $00,$00,$00,$00,$00,$18,$18,        $30
                              ; $2d 
598C  0000007E00000000         fcb $00,$00,$00,$7e,$00,$00,$00,        $00
                              ; $2e 
5994  0000000000181800         fcb $00,$00,$00,$00,$00,$18,$18,        $00
                              ; $2f 
599C  0003060C18306000         fcb $00,$03,$06,$0c,$18,$30,$60,        $00
                              ; $30 
59A4  3C666E7666663C00         fcb $3c,$66,$6e,$76,$66,$66,$3c,        $00
                              ; $31 
59AC  1818381818187E00         fcb $18,$18,$38,$18,$18,$18,$7e,        $00
                              ; $32 
59B4  3C66060C30607E00         fcb $3c,$66,$06,$0c,$30,$60,$7e,        $00
                              ; $33 
59BC  3C66061C06663C00         fcb $3c,$66,$06,$1c,$06,$66,$3c,        $00
                              ; $34 
59C4  060E1E667F060600         fcb $06,$0e,$1e,$66,$7f,$06,$06,        $00
                              ; $35 
59CC  7E607C0606663C00         fcb $7e,$60,$7c,$06,$06,$66,$3c,        $00
                              ; $36 
59D4  3C66607C66663C00         fcb $3c,$66,$60,$7c,$66,$66,$3c,        $00
                              ; $37 
59DC  7E660C1818181800         fcb $7e,$66,$0c,$18,$18,$18,$18,        $00
                              ; $38 
59E4  3C66663C66663C00         fcb $3c,$66,$66,$3c,$66,$66,$3c,        $00
                              ; $39 
59EC  3C66663E06663C00         fcb $3c,$66,$66,$3e,$06,$66,$3c,        $00
                              ; $3a 
59F4  0000180000180000         fcb $00,$00,$18,$00,$00,$18,$00,        $00
                              ; $3b 
59FC  0000180000181830         fcb $00,$00,$18,$00,$00,$18,$18,        $30
                              ; $3c 
5A04  0E18306030180E00         fcb $0e,$18,$30,$60,$30,$18,$0e,        $00
                              ; $3d 
5A0C  00007E007E000000         fcb $00,$00,$7e,$00,$7e,$00,$00,        $00
                              ; $3e 
5A14  70180C060C187000         fcb $70,$18,$0c,$06,$0c,$18,$70,        $00
                              ; $3f 
5A1C  3C66060C18001800         fcb $3c,$66,$06,$0c,$18,$00,$18,        $00
                              ; $40 
5A24  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $41 
5A2C  183C667E66666600         fcb $18,$3c,$66,$7e,$66,$66,$66,        $00
                              ; $42 
5A34  7C66667C66667C00         fcb $7c,$66,$66,$7c,$66,$66,$7c,        $00
                              ; $43 
5A3C  3C66606060663C00         fcb $3c,$66,$60,$60,$60,$66,$3c,        $00
                              ; $44 
5A44  786C6666666C7800         fcb $78,$6c,$66,$66,$66,$6c,$78,        $00
                              ; $45 
5A4C  7E60607860607E00         fcb $7e,$60,$60,$78,$60,$60,$7e,        $00
                              ; $46 
5A54  7E60607860606000         fcb $7e,$60,$60,$78,$60,$60,$60,        $00
                              ; $47 
5A5C  3C66606E66663C00         fcb $3c,$66,$60,$6e,$66,$66,$3c,        $00
                              ; $48 
5A64  6666667E66666600         fcb $66,$66,$66,$7e,$66,$66,$66,        $00
                              ; $49 
5A6C  3C18181818183C00         fcb $3c,$18,$18,$18,$18,$18,$3c,        $00
                              ; $4a 
5A74  1E0C0C0C0C6C3800         fcb $1e,$0c,$0c,$0c,$0c,$6c,$38,        $00
                              ; $4b 
5A7C  666C7870786C6600         fcb $66,$6c,$78,$70,$78,$6c,$66,        $00
                              ; $4c 
5A84  6060606060607E00         fcb $60,$60,$60,$60,$60,$60,$7e,        $00
                              ; $4d 
5A8C  63777F6B63636300         fcb $63,$77,$7f,$6b,$63,$63,$63,        $00
                              ; $4e 
5A94  66767E7E6E666600         fcb $66,$76,$7e,$7e,$6e,$66,$66,        $00
                              ; $4f 
5A9C  3C66666666663C00         fcb $3c,$66,$66,$66,$66,$66,$3c,        $00
                              ; $50 
5AA4  7C66667C60606000         fcb $7c,$66,$66,$7c,$60,$60,$60,        $00
                              ; $51 
5AAC  3C666666663C0E00         fcb $3c,$66,$66,$66,$66,$3c,$0e,        $00
                              ; $52 
5AB4  7C66667C786C6600         fcb $7c,$66,$66,$7c,$78,$6c,$66,        $00
                              ; $53 
5ABC  3C66603C06663C00         fcb $3c,$66,$60,$3c,$06,$66,$3c,        $00
                              ; $54 
5AC4  7E18181818181800         fcb $7e,$18,$18,$18,$18,$18,$18,        $00
                              ; $55 
5ACC  6666666666663C00         fcb $66,$66,$66,$66,$66,$66,$3c,        $00
                              ; $56 
5AD4  66666666663C1800         fcb $66,$66,$66,$66,$66,$3c,$18,        $00
                              ; $57 
5ADC  6363636B7F776300         fcb $63,$63,$63,$6b,$7f,$77,$63,        $00
                              ; $58 
5AE4  66663C183C666600         fcb $66,$66,$3c,$18,$3c,$66,$66,        $00
                              ; $59 
5AEC  6666663C18181800         fcb $66,$66,$66,$3c,$18,$18,$18,        $00
                              ; $5a 
5AF4  7E060C1830607E00         fcb $7e,$06,$0c,$18,$30,$60,$7e,        $00
                              ; $5b 
5AFC  3C30303030303C00         fcb $3c,$30,$30,$30,$30,$30,$3c,        $00
                              ; $5c 
5B04  0C12307C3062FC00         fcb $0c,$12,$30,$7c,$30,$62,$fc,        $00
                              ; $5d 
5B0C  3C0C0C0C0C0C3C00         fcb $3c,$0c,$0c,$0c,$0c,$0c,$3c,        $00
                              ; $5e 
5B14  00183C7E18181818         fcb $00,$18,$3c,$7e,$18,$18,$18,        $18
                              ; $5f 
5B1C  0010307F7F301000         fcb $00,$10,$30,$7f,$7f,$30,$10,        $00
                              ; $60 
5B24  000000FFFF000000         fcb $00,$00,$00,$ff,$ff,$00,$00,        $00
                              ; $61 
5B2C  00003C063E663E00         fcb $00,$00,$3c,$06,$3e,$66,$3e,        $00
                              ; $62 
5B34  0060607C66667C00         fcb $00,$60,$60,$7c,$66,$66,$7c,        $00
                              ; $63 
5B3C  00003C6060603C00         fcb $00,$00,$3c,$60,$60,$60,$3c,        $00
                              ; $64 
5B44  0006063E66663E00         fcb $00,$06,$06,$3e,$66,$66,$3e,        $00
                              ; $65 
5B4C  00003C667E603C00         fcb $00,$00,$3c,$66,$7e,$60,$3c,        $00
                              ; $66 
5B54  000E183E18181800         fcb $00,$0e,$18,$3e,$18,$18,$18,        $00
                              ; $67 
5B5C  00003E66663E067C         fcb $00,$00,$3e,$66,$66,$3e,$06,        $7c
                              ; $68 
5B64  0060607C66666600         fcb $00,$60,$60,$7c,$66,$66,$66,        $00
                              ; $69 
5B6C  0018003818183C00         fcb $00,$18,$00,$38,$18,$18,$3c,        $00
                              ; $6a 
5B74  000600060606063C         fcb $00,$06,$00,$06,$06,$06,$06,        $3c
                              ; $6b 
5B7C  0060606C786C6600         fcb $00,$60,$60,$6c,$78,$6c,$66,        $00
                              ; $6c 
5B84  0038181818183C00         fcb $00,$38,$18,$18,$18,$18,$3c,        $00
                              ; $6d 
5B8C  0000667F7F6B6300         fcb $00,$00,$66,$7f,$7f,$6b,$63,        $00
                              ; $6e 
5B94  00007C6666666600         fcb $00,$00,$7c,$66,$66,$66,$66,        $00
                              ; $6f 
5B9C  00003C6666663C00         fcb $00,$00,$3c,$66,$66,$66,$3c,        $00
                              ; $70 
5BA4  00007C66667C6060         fcb $00,$00,$7c,$66,$66,$7c,$60,        $60
                              ; $71 
5BAC  00003E66663E0606         fcb $00,$00,$3e,$66,$66,$3e,$06,        $06
                              ; $72 
5BB4  00007C6660606000         fcb $00,$00,$7c,$66,$60,$60,$60,        $00
                              ; $73 
5BBC  00003E603C067C00         fcb $00,$00,$3e,$60,$3c,$06,$7c,        $00
                              ; $74 
5BC4  00187E1818180E00         fcb $00,$18,$7e,$18,$18,$18,$0e,        $00
                              ; $75 
5BCC  0000666666663E00         fcb $00,$00,$66,$66,$66,$66,$3e,        $00
                              ; $76 
5BD4  00006666663C1800         fcb $00,$00,$66,$66,$66,$3c,$18,        $00
                              ; $77 
5BDC  0000636B7F3E3600         fcb $00,$00,$63,$6b,$7f,$3e,$36,        $00
                              ; $78 
5BE4  0000663C183C6600         fcb $00,$00,$66,$3c,$18,$3c,$66,        $00
                              ; $79 
5BEC  00006666663E0C78         fcb $00,$00,$66,$66,$66,$3e,$0c,        $78
                              ; $7a 
5BF4  00007E0C18307E00         fcb $00,$00,$7e,$0c,$18,$30,$7e,        $00
                              ; $7b 
5BFC  181818FFFF181818         fcb $18,$18,$18,$ff,$ff,$18,$18,        $18
                              ; $7c 
5C04  C0C03030C0C03030         fcb $c0,$c0,$30,$30,$c0,$c0,$30,        $30
                              ; $7d 
5C0C  1818181818181818         fcb $18,$18,$18,$18,$18,$18,$18,        $18
                              ; $7e 
5C14  3333CCCC3333CCCC         fcb $33,$33,$cc,$cc,$33,$33,$cc,        $cc
                              ; $7f 
5C1C  3399CC663399CC66         fcb $33,$99,$cc,$66,$33,$99,$cc,        $66
                              ; $80 
5C24  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $81 
5C2C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $82 
5C34  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $83 
5C3C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $84 
5C44  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $85 
5C4C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $86 
5C54  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $87 
5C5C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $88 
5C64  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $89 
5C6C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8a 
5C74  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8b 
5C7C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8c 
5C84  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8d 
5C8C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8e 
5C94  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $8f 
5C9C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $90 
5CA4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $91 
5CAC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $92 
5CB4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $93 
5CBC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $94 
5CC4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $95 
5CCC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $96 
5CD4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $97 
5CDC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $98 
5CE4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $99 
5CEC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9a 
5CF4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9b 
5CFC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9c 
5D04  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9d 
5D0C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9e 
5D14  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $9f 
5D1C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a0 
5D24  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a1 
5D2C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a2 
5D34  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a3 
5D3C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a4 
5D44  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a5 
5D4C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a6 
5D54  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a7 
5D5C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a8 
5D64  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $a9 
5D6C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $aa 
5D74  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ab 
5D7C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ac 
5D84  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ad 
5D8C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ae 
5D94  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $af 
5D9C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b0 
5DA4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b1 
5DAC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b2 
5DB4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b3 
5DBC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b4 
5DC4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b5 
5DCC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b6 
5DD4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b7 
5DDC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b8 
5DE4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $b9 
5DEC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ba 
5DF4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $bb 
5DFC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $bc 
5E04  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $bd 
5E0C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $be 
5E14  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $bf 
5E1C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c0 
5E24  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c1 
5E2C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c2 
5E34  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c3 
5E3C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c4 
5E44  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c5 
5E4C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c6 
5E54  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c7 
5E5C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c8 
5E64  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $c9 
5E6C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ca 
5E74  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $cb 
5E7C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $cc 
5E84  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $cd 
5E8C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ce 
5E94  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $cf 
5E9C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d0 
5EA4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d1 
5EAC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d2 
5EB4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d3 
5EBC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d4 
5EC4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d5 
5ECC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d6 
5ED4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d7 
5EDC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d8 
5EE4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $d9 
5EEC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $da 
5EF4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $db 
5EFC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $dc 
5F04  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $dd 
5F0C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $de 
5F14  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $df 
5F1C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e0 
5F24  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e1 
5F2C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e2 
5F34  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e3 
5F3C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e4 
5F44  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e5 
5F4C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e6 
5F54  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e7 
5F5C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e8 
5F64  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $e9 
5F6C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ea 
5F74  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $eb 
5F7C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ec 
5F84  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ed 
5F8C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ee 
5F94  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $ef 
5F9C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f0 
5FA4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f1 
5FAC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f2 
5FB4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f3 
5FBC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f4 
5FC4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f5 
5FCC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f6 
5FD4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f7 
5FDC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f8 
5FE4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $f9 
5FEC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fa 
5FF4  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fb 
5FFC  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fc 
6004  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fd 
600C  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $fe 
6014  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
0020                  MAXSTRINGS                    equ 32
601C  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 DESCRIPTORS                   rzb 128
rzb 512
rzb 512
649C  0200            FREE_STRING                   fdb 512
                      ; peephole: pass 1, 213 changes.
                      ; peephole: pass 2, 53 changes.
                      ; peephole: pass 3, 19 changes.
                      ; peephole: pass 4, 0 change.
                      ; peephole: pass 5, 7 vars removed.
                      ; peephole: pass 6, 8 changes.
                      ; peephole: pass 7, 0 change.
                      ; peephole: pass 8, 0 var removed.
                      ; peephole: pass 9, 2 vars moved to dp, 13 vars inlined.
