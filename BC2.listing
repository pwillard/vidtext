2A00                          ORG $2A00
2A00  7E2C03                  JMP CODESTART
rzb 512
2C03                  CODESTART
2C03  10CE2A03                LDS #IRQSTACK
2C07  B7FFDF                  STA $FFDF
                              IF (((128+vars_after-(*+2))|(127-vars_after+(*+2)))&0x8000)
                              JMP vars_after
                              ELSE
2C0A  200E                    BRA vars_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      INTERNAL VARIABLES FOR TRS-80 COLOR COMPUTER           *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; peephole(13): inlined3
                      ;TEXTADDRESS         fdb     $0400
2C0C  0C00            BITMAPADDRESS       fdb     $0c00
2C0E  A000            COLORMAPADDRESS     fdb     $a000
                      ; peephole(13): inlined3
                      ;CURRENTMODE         fcb     $2
                      ; peephole(6): unread2
                      ;CURRENTTILEMODE     fcb     1
2C10  00              EVERYSTATUS        fcb     0
2C11  04              TABCOUNT            fcb     4
                      ; peephole(6): unread2
                      ;XCURS               fcb     0
                      ; peephole(6): unread2
                      ;YCURS               fcb     0
2C12  20              EMPTYTILE           fcb     32
2C13  10              KBDRATE             fcb     16
2C14  0000            COCOTIMER           fdb     $0
2C16  0000            COCOTIMER2           fdb     $0
2C18  00              TICKSPERSECOND       fcb     $0
0010                  TMPPTR equ $10    ; $23
0012                  TMPPTR2 equ $12    ; $25
0014                  MATHPTR0 equ $14
0015                  MATHPTR1 equ $15
0016                  MATHPTR2 equ $16
0017                  MATHPTR3 equ $17
0018                  MATHPTR4 equ $18
0019                  MATHPTR5 equ $19
0020                  MATHPTR6 equ $20
0021                  MATHPTR7 equ $21
0022                  MATHPTR8 equ $22
0023                  MATHPTRB0 equ $23
0024                  MATHPTRB1 equ $24
0025                  MATHPTRB2 equ $25
0026                  MATHPTRB3 equ $26
0027                  MATHPTRB4 equ $27
0028                  MATHPTRB5 equ $28
0029                  MATHPTRB6 equ $29
002A                  MATHPTRB7 equ $2a
002B                  MATHPTRB8 equ $2b
003B                  DSSTATUS equ $3b
003C                  DSSIZE equ $3c
003D                  DSADDRLO equ $3d
003E                  DSADDRHI equ $3e
003F                  DSBANKLO equ $3f
0040                  DSBANKHI equ $40
0041                  COPYOFTEXTADDRESS equ $41
0043                  COPYOFBITMAPADDRESS equ $43
0045                  COPYOFCOLORMAPADDRESS equ $45
0047                  COPYOFTEXTADDRESS2 equ $47
0049                  COPYOFCOLORMAPADDRESS2 equ $49
004A                  DIRECTION equ $4a
004A                  PATTERN equ $4a
004A                  CHARACTERS equ $4a
004B                  CLINEX equ $4b
004C                  CLINEY equ $4c
004A                  BITSTOCONVERT equ $4a
00D3                  XCURSYS equ $D3
00D6                  YCURSYS equ $D6
2C19  00              BANKSHADOW fcb  0
2C1A                  vars_after
                              IF (((128+startup_after-(*+2))|(127-startup_after+(*+2)))&0x8000)
2C1A  7E2D09                  JMP startup_after
                              ELSE
                              BRA startup_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          STARTUP ROUTINE ON TRS-80 COLOR COMPUTER           *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
2C1D                  IRQSVC
2C1D  3406                    PSHS D
2C1F  3410                    PSHS X
2C21  3420                    PSHS Y
2C23  3440                    PSHS U
2C25  3408                    PSHS DP
2C27  3401                    PSHS CC
2C29                  IRQSVC2
2C29  12                      NOP
2C2A  12                      NOP
2C2B  12                      NOP
2C2C  3501                    PULS CC
2C2E  3508                    PULS DP
2C30  3540                    PULS U
2C32  3520                    PULS Y
2C34  3510                    PULS X
2C36  3506                    PULS D
2C38  39                      RTS
                              
2C39                  OLDISVC
2C39  0000                    fdb $0
2C3B                  OLDISVC2
2C3B  0000                    fdb $0
2C3D                  OLDNMIISVC
2C3D  0000                    fdb $0
2C3F                  OLDNMIISVC2
2C3F  0000                    fdb $0
2C41                  OLDCC
2C41  00                      fcb $0
2C42                  ISVCIRQ
2C42  BD2C1D                  JSR IRQSVC
                          ; PSHS CC
2C45  3406                    PSHS D
2C47  1FA8                    TFR CC, A
2C49  84EF                    ANDA #$EF
2C4B  B72C41                  STA OLDCC
2C4E  FC2C14                  LDD COCOTIMER
2C51  C30001                  ADDD #$1
2C54  FD2C14                  STD COCOTIMER
2C57  3410                    PSHS X
2C59  CC0000                  LDD #0
2C5C  FD00E3                  STD $00e3
2C5F  B7FFDE                  STA $FFDE
2C62  1F41                    TFR S,X 
2C64  300E                    LEAX +14,X
2C66  EC84                    LDD ,X
2C68  FD2C3B                  STD OLDISVC2
2C6B  CC2C78                  LDD #ISVCIRQ2
2C6E  ED84                    STD ,X
2C70  3510                    PULS X
2C72  3506                    PULS D
2C74  6E9F2C39                JMP [OLDISVC]
2C78                  ISVCIRQ2
2C78  B7FFDF                  STA $FFDF
                          ; PULS CC
                          ; PULS A
2C7B  3406                    PSHS D
2C7D  B62C41                  LDA OLDCC
2C80  1F8A                    TFR A, CC
2C82  3506                    PULS D
2C84  6E9F2C3B                JMP [OLDISVC2]
2C88                  NMIISVCIRQ
2C88  3406                    PSHS D
2C8A  3410                    PSHS X
2C8C  FC2C14                  LDD COCOTIMER
2C8F  C30001                  ADDD #$1
2C92  FD2C14                  STD COCOTIMER
2C95  CC0000                  LDD #0
2C98  FD00E3                  STD $00e3
2C9B  B7FFDE                  STA $FFDE
2C9E  1F41                    TFR S,X 
2CA0  300E                    LEAX +14,X
2CA2  EC84                    LDD ,X
2CA4  FD2C3F                  STD OLDNMIISVC2
2CA7  CC2CB4                  LDD #NMIISVCIRQ2
2CAA  ED84                    STD ,X
2CAC  3510                    PULS X
2CAE  3506                    PULS D
2CB0  6E9F2C3D                JMP [OLDNMIISVC]
2CB4                  NMIISVCIRQ2
2CB4  B7FFDF                  STA $FFDF
2CB7  6E9F2C3F                JMP [OLDNMIISVC2]
2CBB                  COCOSTARTUP
2CBB  FC010D                  LDD $010D
2CBE  FD2C39                  STD OLDISVC
2CC1  CC2C42                  LDD #ISVCIRQ
2CC4  FD010D                  STD $010D
2CC7  FC010A                  LDD $010A
2CCA  FD2C3D                  STD OLDNMIISVC
2CCD  CC2C88                  LDD #NMIISVCIRQ
2CD0  FD010A                  STD $010A
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
2CD3  4F                      CLRA
2CD4  B7011F                  STA $011f
2CD7  CC0000                  LDD #$0
2CDA                  COCOSTARTUPL1
2CDA  F30001                  ADDD 1
2CDD  FD0014                  STD MATHPTR0
2CE0  10833100                CMPD #$3100
2CE4  26F4                    BNE COCOSTARTUPL1
2CE6  B62C15                  LDA COCOTIMER+1
2CE9  8105                    CMPA #5
2CEB  2E08                    BGT COCONTSC
2CED                  COCOPAL
2CED  8632                    LDA #50
2CEF  B72C18                  STA TICKSPERSECOND
2CF2  7E2CFD                  JMP COCOSTARTUPDONE
2CF5                  COCONTSC
2CF5  863C                    LDA #60
2CF7  B72C18                  STA TICKSPERSECOND
2CFA  7E2CFD                  JMP COCOSTARTUPDONE
2CFD                  COCOSTARTUPDONE
2CFD                  SYSCALLDONE
2CFD  B7FFDF                  STA $FFDF
2D00  39                      RTS
2D01                  SYSCALL
2D01  B7FFDE                  STA $FFDE
2D04                  SYSCALL0
2D04  BD0000                  JSR $0000
2D07  20F4                    BRA SYSCALLDONE
                              
2D09                  startup_after
2D09  BD2CBB                  JSR COCOSTARTUP
2D0C  4F                      CLRA
2D0D  B700D3                  STA XCURSYS
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
2D10  B700D6                  STA YCURSYS
                              IF (((128+c6847vars_after-(*+2))|(127-c6847vars_after+(*+2)))&0x8000)
                              JMP c6847vars_after
                              ELSE
2D13  200C                    BRA c6847vars_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       INTERNAL VARIABLES FOR 6847 HARDWARE                  *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
000B                  PLOTDEST equ $0b ; $29
000D                  PLOTCDEST equ $0d ; $27
000F                  PLOTC2DEST equ $0f ; $25
2D15  0000            XGR    fdb 0
                      ; peephole(6): unread2
                      ;YGR    fdb 0
2D17  FFFF            LINE   fcb $ff, $ff
2D19  0000            ORIGINX    fdb 0
2D1B  0000            ORIGINY    fdb 0
2D1D  0000            RESOLUTIONX    fdb 0
2D1F  0000            RESOLUTIONY    fdb 0
                      ; peephole(13): inlined3
                      ;CLIPX1    fdb 0
                      ; peephole(13): inlined3
                      ;CLIPY1    fdb 0
                      ; peephole(13): inlined3
                      ;CLIPX2    fdb 319
                      ; peephole(13): inlined3
                      ;CLIPY2    fdb 199
                      ; peephole(6): unread2
                      ;LASTCOLOR fcb 0
                      ; peephole(13): inlined3
                      ;CURRENTWIDTH      fdb 32
                      ; peephole(13): inlined3
                      ;CURRENTHEIGHT      fdb 16
                      ; peephole(13): inlined3
                      ;CURRENTTILESWIDTH      fcb 32
                      ; peephole(13): inlined3
                      ;CURRENTTILESHEIGHT      fcb 16
                      ; peephole(6): unread2
                      ;CURRENTTILES            fcb 128
                      ; peephole(13): inlined3
                      ;CURRENTFRAMESIZE   fdb 32*16
                      ; peephole(13): inlined3
                      ;CURRENTSL          fcb 32
                      ; peephole(13): inlined3
                      ;TEXTWW      fcb 3
                      ; peephole(6): unread2
                      ;FONTWIDTH       fcb 8
                      ; peephole(6): unread2
                      ;FONTHEIGHT      fcb 8
0041                  IMAGEX EQU $41 ; $42
0043                  IMAGEY EQU $43 ; $44
0045                  IMAGEW EQU $45
0046                  IMAGEH EQU $46
0047                  IMAGEH2 EQU $47
0048                  IMAGET EQU $48
0049                  IMAGEF EQU $49
0050                  BLITTMPPTR EQU $50 ; $51
0052                  BLITTMPPTR2 EQU $52 ; $53
0054                  BLITS0 EQU $54
0055                  BLITS1 EQU $55
0056                  BLITS2 EQU $56
0057                  BLITR0 EQU $57
0058                  BLITR1 EQU $58
0059                  BLITR2 EQU $59
0060                  BLITR3 EQU $60
                      ; ------------------------------------------------------------------------------
                      ; BITMAP MODE (MODE #2)
                      ; ------------------------------------------------------------------------------
                      ; PLOTVBASELO
                      ;     fcb <($A000+(0*320)),<($A000+(1*320)),<($A000+(2*320)),<($A000+(3*320))
                      ;     fcb <($A000+(4*320)),<($A000+(5*320)),<($A000+(6*320)),<($A000+(7*320))
                      ;     fcb <($A000+(8*320)),<($A000+(9*320)),<($A000+(10*320)),<($A000+(11*320))
                      ;     fcb <($A000+(12*320)),<($A000+(13*320)),<($A000+(14*320)),<($A000+(15*320))
                      ;     fcb <($A000+(16*320)),<($A000+(17*320)),<($A000+(18*320)),<($A000+(19*320))
                      ;     fcb <($A000+(20*320)),<($A000+(21*320)),<($A000+(22*320)),<($A000+(23*320))
                      ;     fcb <($A000+(24*320))
                      ; PLOTVBASEHI
                      ;     fcb >($A000+(0*320)),>($A000+(1*320)),>($A000+(2*320)),>($A000+(3*320))
                      ;     fcb >($A000+(4*320)),>($A000+(5*320)),>($A000+(6*320)),>($A000+(7*320))
                      ;     fcb >($A000+(8*320)),>($A000+(9*320)),>($A000+(10*320)),>($A000+(11*320))
                      ;     fcb >($A000+(12*320)),>($A000+(13*320)),>($A000+(14*320)),>($A000+(15*320))
                      ;     fcb >($A000+(16*320)),>($A000+(17*320)),>($A000+(18*320)),>($A000+(19*320))
                      ;     fcb >($A000+(20*320)),>($A000+(21*320)),>($A000+(22*320)),>($A000+(23*320))
                      ;     fcb >($A000+(24*320))
                      ; PLOT8LO
                      ;     fcb <(0*8),<(1*8),<(2*8),<(3*8),<(4*8),<(5*8),<(6*8),<(7*8),<(8*8),<(9*8)
                      ;     fcb <(10*8),<(11*8),<(12*8),<(13*8),<(14*8),<(15*8),<(16*8),<(17*8),<(18*8),<(19*8)
                      ;     fcb <(20*8),<(21*8),<(22*8),<(23*8),<(24*8),<(25*8),<(26*8),<(27*8),<(28*8),<(29*8)
                      ;     fcb <(30*8),<(31*8),<(32*8),<(33*8),<(34*8),<(35*8),<(36*8),<(37*8),<(38*8),<(39*8)
                      ; PLOT8HI
                      ;     fcb >(0*8),>(1*8),>(2*8),>(3*8),>(4*8),>(5*8),>(6*8),>(7*8),>(8*8),>(9*8)
                      ;     fcb >(10*8),>(11*8),>(12*8),>(13*8),>(14*8),>(15*8),>(16*8),>(17*8),>(18*8),>(19*8)
                      ;     fcb >(20*8),>(21*8),>(22*8),>(23*8),>(24*8),>(25*8),>(26*8),>(27*8),>(28*8),>(29*8)
                      ;     fcb >(30*8),>(31*8),>(32*8),>(33*8),>(34*8),>(35*8),>(36*8),>(37*8),>(38*8),>(39*8)
                      ; PLOTCVBASELO
                      ;     fcb <($8400+(0*40)),<($8400+(1*40)),<($8400+(2*40)),<($8400+(3*40))
                      ;     fcb <($8400+(4*40)),<($8400+(5*40)),<($8400+(6*40)),<($8400+(7*40))
                      ;     fcb <($8400+(8*40)),<($8400+(9*40)),<($8400+(10*40)),<($8400+(11*40))
                      ;     fcb <($8400+(12*40)),<($8400+(13*40)),<($8400+(14*40)),<($8400+(15*40))
                      ;     fcb <($8400+(16*40)),<($8400+(17*40)),<($8400+(18*40)),<($8400+(19*40))
                      ;     fcb <($8400+(20*40)),<($8400+(21*40)),<($8400+(22*40)),<($8400+(23*40))
                      ;     fcb <($8400+(24*40))
                      ; PLOTCVBASEHI
                      ;     fcb >($8400+(0*40)),>($8400+(1*40)),>($8400+(2*40)),>($8400+(3*40))
                      ;     fcb >($8400+(4*40)),>($8400+(5*40)),>($8400+(6*40)),>($8400+(7*40))
                      ;     fcb >($8400+(8*40)),>($8400+(9*40)),>($8400+(10*40)),>($8400+(11*40))
                      ;     fcb >($8400+(12*40)),>($8400+(13*40)),>($8400+(14*40)),>($8400+(15*40))
                      ;     fcb >($8400+(16*40)),>($8400+(17*40)),>($8400+(18*40)),>($8400+(19*40))
                      ;     fcb >($8400+(20*40)),>($8400+(21*40)),>($8400+(22*40)),>($8400+(23*40))
                      ;     fcb >($8400+(24*40))
                      ; PLOTC2VBASELO
                      ;     fcb <($D800+(0*40)),<($D800+(1*40)),<($D800+(2*40)),<($D800+(3*40))
                      ;     fcb <($D800+(4*40)),<($D800+(5*40)),<($D800+(6*40)),<($D800+(7*40))
                      ;     fcb <($D800+(8*40)),<($D800+(9*40)),<($D800+(10*40)),<($D800+(11*40))
                      ;     fcb <($D800+(12*40)),<($D800+(13*40)),<($D800+(14*40)),<($D800+(15*40))
                      ;     fcb <($D800+(16*40)),<($D800+(17*40)),<($D800+(18*40)),<($D800+(19*40))
                      ;     fcb <($D800+(20*40)),<($D800+(21*40)),<($D800+(22*40)),<($D800+(23*40))
                      ;     fcb <($D800+(24*40))
                      ; PLOTC2VBASEHI
                      ;     fcb >($D800+(0*40)),>($D800+(1*40)),>($D800+(2*40)),>($D800+(3*40))
                      ;     fcb >($D800+(4*40)),>($D800+(5*40)),>($D800+(6*40)),>($D800+(7*40))
                      ;     fcb >($D800+(8*40)),>($D800+(9*40)),>($D800+(10*40)),>($D800+(11*40))
                      ;     fcb >($D800+(12*40)),>($D800+(13*40)),>($D800+(14*40)),>($D800+(15*40))
                      ;     fcb >($D800+(16*40)),>($D800+(17*40)),>($D800+(18*40)),>($D800+(19*40))
                      ;     fcb >($D800+(20*40)),>($D800+(21*40)),>($D800+(22*40)),>($D800+(23*40))
                      ;     fcb >($D800+(24*40))
                      ; ------------------------------------------------------------------------------
                      ; MULTICOLOR MODE (MODE #3)
                      ; ------------------------------------------------------------------------------
                      ; PLOT4LO
                      ;     fcb <(0*4),<(1*4),<(2*4),<(3*4),<(4*4),<(5*4),<(6*4),<(7*4),<(8*4),<(9*4)
                      ;     fcb <(10*4),<(11*4),<(12*4),<(13*4),<(14*4),<(15*4),<(16*4),<(17*4),<(18*4),<(19*4)
                      ;     fcb <(20*4),<(21*4),<(22*4),<(23*4),<(24*4),<(25*4),<(26*4),<(27*4),<(28*4),<(29*4)
                      ;     fcb <(30*4),<(31*4),<(32*4),<(33*4),<(34*4),<(35*4),<(36*4),<(37*4),<(38*4),<(39*4)
                      ;     fcb <(40*4),<(41*4),<(42*4),<(43*4),<(44*4),<(45*4),<(46*4),<(47*4),<(48*4),<(49*4)
                      ;     fcb <(50*4),<(51*4),<(52*4),<(53*4),<(54*4),<(55*4),<(56*4),<(57*4),<(58*4),<(59*4)
                      ;     fcb <(60*4),<(61*4),<(62*4),<(63*4),<(64*4),<(65*4),<(66*4),<(67*4),<(68*4),<(69*4)
                      ;     fcb <(70*4),<(71*4),<(72*4),<(73*4),<(74*4),<(75*4),<(76*4),<(77*4),<(78*4),<(79*4)
                      ; PLOT4HI
                      ;     fcb >(0*4),>(1*4),>(2*4),>(3*4),>(4*4),>(5*4),>(6*4),>(7*4),>(8*4),>(9*4)
                      ;     fcb >(10*4),>(11*4),>(12*4),>(13*4),>(14*4),>(15*4),>(16*4),>(17*4),>(18*4),>(19*4)
                      ;     fcb >(20*4),>(21*4),>(22*4),>(23*4),>(24*4),>(25*4),>(26*4),>(27*4),>(28*4),>(29*4)
                      ;     fcb >(30*4),>(31*4),>(32*4),>(33*4),>(34*4),>(35*4),>(36*4),>(37*4),>(38*4),>(39*4)
                      ;     fcb >(40*4),>(41*4),>(42*4),>(43*4),>(44*4),>(45*4),>(46*4),>(47*4),>(48*4),>(49*4)
                      ;     fcb >(50*4),>(51*4),>(52*4),>(53*4),>(54*4),>(55*4),>(56*4),>(57*4),>(58*4),>(59*4)
                      ;     fcb >(60*4),>(61*4),>(62*4),>(63*4),>(64*4),>(65*4),>(66*4),>(67*4),>(68*4),>(69*4)
                      ;     fcb >(70*4),>(71*4),>(72*4),>(73*4),>(74*4),>(75*4),>(76*4),>(77*4),>(78*4),>(79*4)
2D21                  c6847vars_after
                              IF (((128+c6847startup_after-(*+2))|(127-c6847startup_after+(*+2)))&0x8000)
                              JMP c6847startup_after
                              ELSE
2D21  202B                    BRA c6847startup_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                            STARTUP ROUTINE FOR 6847                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
2D23                  CPUMEMMOVE
2D23  11830000                CMPU #0
2D27  270C                    BEQ CPUMEMMOVEDONE
2D29                  CPUMEMMOVEL1
2D29  A6A0                    LDA ,Y+
2D2B  A780                    STA ,X+
2D2D  335F                    LEAU -1,U
2D2F  11830000                CMPU #$0
2D33  26F4                    BNE CPUMEMMOVEL1
2D35                  CPUMEMMOVEDONE
2D35  39                      RTS
                              
2D36                  C6847STARTUP
                          ; (4) Default screen mode is semigraphic-4
2D36  B7FFC0                  STA $FFC0
2D39  B7FFC2                  STA $FFC2
2D3C  B7FFC4                  STA $FFC4
2D3F  B6FF22                  LDA $FF22
2D42  847F                    ANDA #$7F
2D44  B7FF22                  STA $FF22  
2D47  B60003                  LDA $03
2D4A  B7FF98                  STA $FF98
2D4D  39                      RTS
2D4E                  c6847startup_after
2D4E  BD2D36                  JSR C6847STARTUP
                              IF (((128+clsText_after-(*+2))|(127-clsText_after+(*+2)))&0x8000)
                              JMP clsText_after
                              ELSE
2D51  2046                    BRA clsText_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       CLEAR SCREEN ROUTINE FOR 6847                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
2D53                  CLST
                      ; peephole(13): inlined1
                      ;       LDA CURRENTMODE
2D53  8602                    LDA #$2
2D54                  CURRENTMODE equ *-1
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
2D55  2603                    BNE CLS0X
2D57  7E2D85                  JMP CLS0
2D5A                  CLS0X
2D5A  8101                    CMPA #1
2D5C  2603                    BNE CLS1X
2D5E  7E2D85                  JMP CLS1
2D61                  CLS1X
2D61  8102                    CMPA #2
2D63  2603                    BNE CLS2X
2D65  7E2D85                  JMP CLS2
2D68                  CLS2X
2D68  8103                    CMPA #3
2D6A  2603                    BNE CLS3X
2D6C  7E2D85                  JMP CLS3
2D6F                  CLS3X
2D6F  8104                    CMPA #4
2D71  2603                    BNE CLS4X
2D73  7E2D85                  JMP CLS4
2D76                  CLS4X
2D76  8105                    CMPA #5
2D78  2603                    BNE CLS5X
2D7A  7E2D85                  JMP CLS5
2D7D                  CLS5X
2D7D  8106                    CMPA #6
2D7F  2603                    BNE CLS6X
2D81  7E2D85                  JMP CLS6
2D84                  CLS6X
2D84  39                      RTS
2D85                  CLS0
2D85                  CLS1
2D85                  CLS2
2D85                  CLS3
2D85                  CLS4
2D85                  CLS5
2D85                  CLS6
2D85                  CLST2
                      ; peephole(13): inlined1
                      ;       LDY TEXTADDRESS
2D85  108E0400                LDY #$0400
2D87                  TEXTADDRESS equ *-2
                      ; peephole(13): inlined1
                      ;       LDX CURRENTFRAMESIZE
2D89  8E0200                  LDX #32*16
2D8A                  CURRENTFRAMESIZE equ *-2
2D8C  B62C12                  LDA EMPTYTILE
2D8F                  CLST3
2D8F  A7A0                    STA ,Y +
2D91  301F                    LEAX -1,X 
2D93  8C0000                  CMPX #0
2D96  26F7                    BNE CLST3
2D98  39                      RTS
2D99                  clsText_after
2D99  BD2D53                  JSR CLST
                              IF (((128+VARINIT-(*+2))|(127-VARINIT+(*+2)))&0x8000)
2D9C  BD4CB8                  JSR VARINIT
                              ELSE
                              BSR VARINIT
                              ENDIF
                              ; L:0
                              ; P:330
                              ; L:1
                              ; P:0
                              ; L:2
                              ; P:0
                              ; L:3
                              ; P:0
                              ; L:4
                              ; P:0
                              ; L:5
                              ; P:0
                              ; L:6
                              ; P:0
                              ; L:7
                              ; P:0
                              ; L:8
2D9F  C611                    LDB #$11
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
2DA1  D7F0                    STB <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
2DA3  D6F0                    LDB <_Ttmp1
2DA5  F74BBB                  STB _xloc
                              ; P:4
                              ; L:9
                              IF (((128+dstring_after-(*+2))|(127-dstring_after+(*+2)))&0x8000)
2DA8  7E2EAA                  JMP dstring_after
                              ELSE
                              BRA dstring_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                DINAMYC STRING MANAGEMENT WITH GARBAGE COLLECTION            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; DSDEFINE(Y) -> B
2DAB                  DSDEFINE
2DAB  8D4F                    BSR   DSFINDFREE
2DAD  8D62                    BSR   DSDESCRIPTOR
2DAF  A6A0                    LDA   ,Y+
2DB1  A784                    STA ,X 
2DB3  10AF01                  STY 1,X 
2DB6  86C0                    LDA #$C0
2DB8  A703                    STA 3,X 
2DBA  39                      RTS
2DBB                  OUT_OF_MEMORY
2DBB  20FE                    BRA   OUT_OF_MEMORY
                      ; DSFREE(B)
2DBD                  DSFREE
2DBD  8D52                    BSR   DSDESCRIPTOR
2DBF  4F                      CLRA
2DC0  A703                    STA 3,X 
2DC2  A784                    STA ,X 
2DC4  39                      RTS
                      ; DSWRITE(B)
2DC5                  DSWRITE
2DC5  8D4A                    BSR   DSDESCRIPTOR
2DC7  A603                    LDA 3,X 
2DC9  2A23                    BPL   DSWRITED
2DCB  847F                    ANDA #$7F
2DCD  A703                    STA 3,X 
2DCF  A684                    LDA ,X 
2DD1  8D46                    BSR   DSCHECKFREE
2DD3                  DSWRITEOK
2DD3  10AE01                  LDY 1,X 
2DD6  3420                    PSHS Y
2DD8  BD2E82                  JSR   DSUSINGALLOC
2DDB  3520                    PULS Y
2DDD  EE01                    LDU 1,X 
2DDF                  DSCOPY
2DDF  A684                    LDA ,X 
                              
2DE1                  DSWRITECOPY
2DE1  270B                    BEQ DSWRITED
2DE3  3404                    PSHS B
2DE5                  DSWRITECOPYL
2DE5  E6A0                    LDB   ,Y+
2DE7  E7C0                    STB   ,U+
2DE9  4A                      DECA
2DEA  26F9                    BNE DSWRITECOPYL 
2DEC  3584                    PULS  B,PC
2DEE                  DSWRITED
2DEE  39                      RTS
                      ; DSRESIZE(B,A)
2DEF                  DSRESIZE
2DEF  8D20                    BSR   DSDESCRIPTOR
2DF1  A784                    STA ,X 
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #$0
2DF3  2606                    BNE DSRESIZEDONE
2DF5  A603                    LDA 3,X
2DF7  8A80                    ORA #$80
2DF9  A703                    STA 3,X
2DFB                  DSRESIZEDONE
2DFB  39                      RTS
                      ; DSFINDFREE() -> B
2DFC                  DSFINDFREE
2DFC  3402                    PSHS  A
2DFE  C601                    LDB   #1; // fix denote 0 as "unused slot"
2E00                  DSFINDFREEL
2E00  8D0F                    BSR   DSDESCRIPTOR
2E02  A603                    LDA   3,X
2E04  8440                    ANDA  #$40
2E06  2707                    BEQ   DSFINDFREEN
2E08  5C                      INCB
2E09  C120                    CMPB  #MAXSTRINGS
2E0B  26F3                    BNE   DSFINDFREEL
2E0D  20AC                    BRA   OUT_OF_MEMORY   
2E0F                  DSFINDFREEN
2E0F  3582                    PULS  A,PC
                      ; DSDESCRIPTOR(B) -> X
2E11                  DSDESCRIPTOR
2E11  8E5526                  LDX   #DESCRIPTORS
2E14  3A                      ABX
2E15  3A                      ABX
2E16  3A                      ABX
2E17  3A                      ABX
2E18  39                      RTS
                      ; DSCHECKFREE()
2E19                  DSCHECKFREE
2E19  3406                    PSHS  A,B
2E1B  B72E24                  STA   DSCHECKFREE2x
2E1E                  DSCHECKFREE2
2E1E  FC59A6                  LDD   FREE_STRING
2E24                  DSCHECKFREE2x SET *+3
2E21  10830000                CMPD  #$0000
2E25  2C04                    BGE   DSCHECKFREEOK
2E27                  DSCHECKFREEKO
2E27  8D04                    BSR   DSGC
2E29  20F3                    BRA   DSCHECKFREE2
2E2B                  DSCHECKFREEOK
2E2B  3586                    PULS  A,B,PC
                      ; DSGC()
2E2D                  DSGC
2E2D  3410                    PSHS X
2E2F  CC01FF                  LDD #(max_free_string-1)
2E32  FD59A6                  STD FREE_STRING
2E35  B62EA9                  LDA USING
2E38  2605                    BNE   DSGW
2E3A  CE57A6                  LDU #TEMPORARY
2E3D  2003                    BRA   BSGCLOOP0
2E3F                  DSGW
2E3F  CE55A6                  LDU #WORKING
2E42                  BSGCLOOP0
2E42  C601                    LDB #1
2E44                  DSGCLOOP
2E44  3406                    PSHS A,B
2E46  8DC9                    BSR   DSDESCRIPTOR
2E48  A603                    LDA 3,X 
2E4A  2B1A                    BMI   DSGCLOOP2
2E4C  8440                    ANDA #$40
2E4E  2714                    BEQ DSGCLOOP1
2E50  A684                    LDA ,X 
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #$0
2E52  2712                    BEQ DSGCLOOP3
2E54  10AE01                  LDY 1,X 
2E57  A684                    LDA ,X 
2E59  8D27                    BSR   DSUSINGALLOC
2E5B  EE01                    LDU 1,X 
2E5D  A684                    LDA ,X 
2E5F  17FF7F                  LBSR  DSWRITECOPY
2E62  2002                    BRA   DSGCLOOP3
2E64                  DSGCLOOP1
                      ;    CLRA       (A already = 0 here)
2E64  A784                    STA ,X 
                      ;    BRA   DSGCLOOP3
2E66                  DSGCLOOP2
                          ; LDA #0
                          ; STA , X
2E66                  DSGCLOOP3
2E66  3506                    PULS A,B
2E68  5C                      INCB
2E69  C120                    CMPB #MAXSTRINGS
2E6B  26D7                    BNE DSGCLOOP
2E6D                  DSGCEND
2E6D  732EA9                  COM   USING
2E70  3590                    PULS  X,PC
                      ;OUT_OF_MEMORY2
                      ;    SYNC
                      ;    BRA OUT_OF_MEMORY
                      ; DSALLOC(A) -> B
2E72                  DSALLOC
2E72  3402                    PSHS A
2E74  8D86                    BSR   DSFINDFREE
2E76  8D99                    BSR   DSDESCRIPTOR
2E78  A603                    LDA 3,X 
2E7A  8A40                    ORA   #$40
2E7C  A703                    STA   3,X
2E7E  3502                    PULS A
2E80  8D97                    BSR   DSCHECKFREE
2E82                  DSALLOCOK
2E82                  DSUSINGALLOC
2E82  8D18                    BSR   DSUSING
                      ;    BRA   DSMALLOC
                      ; DSMALLOC(U,A,B)
2E84                  DSMALLOC
2E84  3440                    PSHS  U
2E86  8D89                    BSR   DSDESCRIPTOR
2E88  A784                    STA ,X 
2E8A  3406                    PSHS  D
2E8C  FC59A6                  LDD FREE_STRING
2E8F  E0E4                    SUBB  ,S
2E91  8200                    SBCA  #0
2E93  FD59A6                  STD   FREE_STRING
2E96  E362                    ADDD  2,S
2E98  ED01                    STD   1,X
                              
2E9A  35C6                    PULS  U,D,PC
                      ; DSUSING() -> U
2E9C                  DSUSING
2E9C  7D2EA9                  TST   USING
2E9F  2704                    BEQ DSUSINGW
2EA1  CE57A6                  LDU #TEMPORARY
2EA4  39                      RTS
2EA5                  DSUSINGW
2EA5  CE55A6                  LDU #WORKING
2EA8  39                      RTS
2EA9                  USING 
2EA9  00                      FCB   0
                              
2EAA                  dstring_after
                      ; peephole(13): inlined1
                      ;       LDB _batt
2EAA  C600                    LDB #1-1
2EAB                  _batt equ *-1
2EAC  BD2DBD                  JSR DSFREE
2EAF  108E4D27                LDY #_Tstr3
2EB3  BD2DAB                  JSR DSDEFINE
2EB6  B7FFC6                  STA $FFC6
2EB9  B7FFC8                  STA $FFC8
2EBC  B7FFCA                  STA $FFCA
2EBF  B7FFCC                  STA $FFCC
2EC2  B7FFCE                  STA $FFCE
2EC5  B7FFD0                  STA $FFD0
2EC8  B7FFD2                  STA $FFD2
2ECB  B7FFC9                  STA $FFC9
2ECE  B7FFCB                  STA $FFCB
2ED1  B6FF22                  LDA $FF22
2ED4  8A80                    ORA #$80
2ED6  B7FF22                  STA $FF22
2ED9  B7FFC5                  STA $FFC5
2EDC  B7FFC3                  STA $FFC3
2EDF  B7FFC0                  STA $FFC0
2EE2  B6FF22                  LDA $FF22
2EE5  8A40                    ORA #$40
                      ; peephole(3): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STA $FF22
                      ; peephole(2): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDA $FF22
2EE7  8A20                    ORA #$20
                      ; peephole(3): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STA $FF22
                      ; peephole(2): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDA $FF22
2EE9  8A10                    ORA #$10
2EEB  B7FF22                  STA $FF22
2EEE  F72EAB                  STB _batt
                              ; P:176
                              ; L:10
                              ; P:0
                              ; L:11
2EF1  CC0000                  LDD #$0000
2EF4  FD35F1                  STD CLIPX1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$00ff
                      ; peephole(2): r783 [B=0](LDB#ff)->(DECB)
                      ;       LDB #$ff
2EF7  5A                      DECB
2EF8  FD35E8                  STD CLIPX2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
2EFB  5F                      CLRB
2EFC  FD35DC                  STD CLIPY1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$00bf
2EFF  C6BF                    LDB #$bf
2F01  FD35D3                  STD CLIPY2
2F04  CC1800                  LDD #$1800
2F07  FD2D8A                  STD CURRENTFRAMESIZE
2F0A  C620                    LDB #$20
2F0C  F7331F                  STB CURRENTSL
2F0F  CC0000                  LDD #$0000
2F12  FD2D19                  STD ORIGINX
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
2F15  FD2D1B                  STD ORIGINY
                      ; peephole(3): r789 [B=0](LDB#xx00)->(LDA#xx)
                      ;       LDD #$0100
                      ; peephole(4): r744 [A=0](LDA#1)->(INCA)
                      ;       LDA #$01
2F18  4C                      INCA
2F19  FD2F23                  STD CURRENTWIDTH
2F1C  CC00C0                  LDD #$00c0
2F1F  FD2F29                  STD CURRENTHEIGHT
                      ; peephole(13): inlined1
                      ;       LDD CURRENTWIDTH
2F22  CC0020                  LDD #32
2F23                  CURRENTWIDTH equ *-2
2F25  FD2D1D                  STD RESOLUTIONX
                      ; peephole(13): inlined1
                      ;       LDD CURRENTHEIGHT
2F28  CC0010                  LDD #16
2F29                  CURRENTHEIGHT equ *-2
2F2B  FD2D1F                  STD RESOLUTIONY
                      ; peephole(7): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB #$80
                      ; peephole(6): unread1
                      ;       STB CURRENTTILES
2F2E  C620                    LDB #$20
2F30  F74008                  STB CURRENTTILESWIDTH
2F33  C618                    LDB #$18
2F35  F74021                  STB CURRENTTILESHEIGHT
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$0e
2F38  CC000E                  LDD #$000e
                      ; peephole(6): unread1
                      ;       STA CURRENTTILEMODE
                              ; P:58
                              ; L:12
2F3B  F72D54                  STB CURRENTMODE
                      ;       CLRA
2F3E  BE2F23                  LDX CURRENTWIDTH
                      ; peephole(13): direct-page1
                      ;       STX _Ttmp5
2F41  9FFE                    STX <_Ttmp5
                      ; peephole(13): direct-page1
                      ;       LDD _Ttmp5
2F43  DCFE                    LDD <_Ttmp5
2F45  FD3002                  STD _w
                              ; L:12
2F48  BE2F29                  LDX CURRENTHEIGHT
                      ; peephole(13): direct-page1
                      ;       STX _Ttmp5
2F4B  9FFE                    STX <_Ttmp5
                      ; peephole(13): direct-page1
                      ;       LDD _Ttmp5
2F4D  DCFE                    LDD <_Ttmp5
2F4F  FD3023                  STD _h
                              ; L:12
                      ; peephole(10): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB #$02
                      ; peephole(9): unread1
                      ;       STB _Ttmp8
                      ; peephole(7): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp8
                      ; peephole(6): unread1
                      ;       STB _c
                              ; P:12
                              ; L:13
                              ; P:0
                              ; L:14
2F52  C602                    LDB #$02
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
2F54  D7F0                    STB <_Ttmp1
2F56  CC0000                  LDD #$0000
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp5
2F59  DDFE                    STD <_Ttmp5
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
2F5B  D6F0                    LDB <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp5+1
2F5D  D7FF                    STB <_Ttmp5+1
                              IF (((128+cpu_math_div_16bit_to_16bit_after-(*+2))|(127-cpu_math_div_16bit_to_16bit_after+(*+2)))&0x8000)
2F5F  7E3001                  JMP cpu_math_div_16bit_to_16bit_after
                              ELSE
                              BRA cpu_math_div_16bit_to_16bit_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ; unsigned division
                      ; D=D/X X=D.mod.X
                      ; http://www.logicielsmoto.com/phpBB/viewtopic.php?p=1090#p1090
2F62                  CPUMATHDIV16BITTO16BIT_fast
2F62  3410                    PSHS  X
2F64  E7E4                    STB   ,S
2F66  E661                    LDB   1,S
2F68  5A                      DECB
2F69  C501                    BITB  #1
2F6B  2606                    BNE   CPUMATHDIV16BITTO16BIT_remainder
                              
2F6D  E6E4                    LDB   ,S
2F6F                  CPUMATHDIV16BITTO16BIT_slow
2F6F  EDE4                    STD   ,S
2F71  203F                    BRA   CPUMATHDIV16BITTO16BIT0  
2F73                  CPUMATHDIV16BITTO16BIT_remainder
2F73  E4E4                    ANDB  ,S
2F75  E761                    STB   1,S   
2F77  E6E4                    LDB   ,S
2F79  6FE4                    CLR   ,S
2F7B  6E992F89                JMP   [CPUMATHDIV16BITTO16BIT_tab-2,X]
2F7F                  CPUMATHDIV16BITTO16BIT_fast32
2F7F  44                      LSRA
2F80  56                      RORB
2F81                  CPUMATHDIV16BITTO16BIT_fast16    
2F81  44                      LSRA
2F82  56                      RORB
2F83                  CPUMATHDIV16BITTO16BIT_fast8    
2F83  44                      LSRA
2F84  56                      RORB
2F85                  CPUMATHDIV16BITTO16BIT_fast4    
2F85  44                      LSRA
2F86  56                      RORB
2F87                  CPUMATHDIV16BITTO16BIT_fast2    
2F87  44                      LSRA
2F88  56                      RORB
2F89  3590                    PULS  X,PC
2F8B                  CPUMATHDIV16BITTO16BIT_tab
2F8B  2F87                    FDB   CPUMATHDIV16BITTO16BIT_fast2
2F8D  2F85                    FDB   CPUMATHDIV16BITTO16BIT_fast4
2F8F  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2F91  2F83                    FDB   CPUMATHDIV16BITTO16BIT_fast8
2F93  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2F95  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2F97  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2F99  2F81                    FDB   CPUMATHDIV16BITTO16BIT_fast16
2F9B  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2F9D  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2F9F  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2FA1  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2FA3  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2FA5  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2FA7  2F6F                    FDB   CPUMATHDIV16BITTO16BIT_slow
2FA9  2F7F                    FDB   CPUMATHDIV16BITTO16BIT_fast32
                              
2FAB                  CPUMATHDIV16BITTO16BIT
2FAB  8C0020                  CMPX  #32
2FAE  23B2                    BLS   CPUMATHDIV16BITTO16BIT_fast
                              
2FB0  3406                    PSHS  D
2FB2                  CPUMATHDIV16BITTO16BIT0
2FB2  BF2FCC                  STX   CPUMATHDIV16BITTO16BITL2-2
2FB5  BF2FC7                  STX   CPUMATHDIV16BITTO16BITL2-7
2FB8  3161                    LEAY  1,S
2FBA  4F                      CLRA
2FBB  5F                      CLRB
2FBC  8E0010                  LDX   #16
2FBF                  CPUMATHDIV16BITTO16BITL1    
2FBF  69A4                    ROL   ,Y
2FC1  69E4                    ROL   ,S
2FC3  59                      ROLB
2FC4  49                      ROLA
2FC5  10835555                CMPD  #$5555
2FC9  2503                    BCS   CPUMATHDIV16BITTO16BITL2
2FCB  835555                  SUBD  #$5555
2FCE                  CPUMATHDIV16BITTO16BITL2
2FCE  301F                    LEAX  -1,X
2FD0  26ED                    BNE CPUMATHDIV16BITTO16BITL1
2FD2  1F01                    TFR   D,X
2FD4  3506                    PULS  D
2FD6  59                      ROLB
2FD7  49                      ROLA
2FD8  53                      COMB
2FD9  43                      COMA
2FDA  39                      RTS
2FDB                  CPUMATHDIV16BITTO16BIT_SIGNED
2FDB  DD14                    STD   <MATHPTR0
2FDD  9F16                    STX   <MATHPTR2
2FDF  9816                    EORA  <MATHPTR2 ; compute sign of result
2FE1  9719                    STA   <MATHPTR5 ; store it on stack
2FE3  CC0000                  LDD   #0        ; D=-X
2FE6  9316                    SUBD  <MATHPTR2 ; X < 0 ?
2FE8  2B02                    BMI   CPUMATHDIV16BITTO16BIT_SIGNED1
2FEA  DD16                    STD   <MATHPTR2 ; yes ==> repmace with -X
2FEC                  CPUMATHDIV16BITTO16BIT_SIGNED1
2FEC  9E16                    LDX   <MATHPTR2
2FEE  DC14                    LDD   <MATHPTR0 ; D < 0 ?
2FF0  2A04                    BPL   CPUMATHDIV16BITTO16BIT_SIGNED2
2FF2  40                      NEGA            ; yes => negate D
2FF3  50                      NEGB
2FF4  8200                    SBCA  #0
2FF6                  CPUMATHDIV16BITTO16BIT_SIGNED2    
2FF6  8DB3                    BSR   CPUMATHDIV16BITTO16BIT
2FF8  0D19                    TST   <MATHPTR5 ; get sign of result
2FFA  2A04                    BPL   CPUMATHDIV16BITTO16BIT_SIGNED3    
2FFC  40                      NEGA            ; negative ? 
2FFD  50                      NEGB            ; yes => negate D
2FFE  8200                    SBCA  #0
3000                  CPUMATHDIV16BITTO16BIT_SIGNED3
3000  39                      RTS
3001                  cpu_math_div_16bit_to_16bit_after
                      ; peephole(13): inlined1
                      ;       LDD _w
3001  CC0000                  LDD #1-1
3002                  _w equ *-2
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp5
3004  9EFE                    LDX <_Ttmp5
3006  BD2FDB                  JSR CPUMATHDIV16BITTO16BIT_SIGNED
3009  BF4C17                  STX _Ttmp12
300C  FD4C15                  STD _Ttmp11
300F  FC4C15                  LDD _Ttmp11
3012  FD4BBC                  STD _mid1
                              ; P:126
                              ; L:15
3015  C602                    LDB #$02
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
3017  D7F0                    STB <_Ttmp1
3019  CC0000                  LDD #$0000
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp5
301C  DDFE                    STD <_Ttmp5
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
301E  D6F0                    LDB <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp5+1
3020  D7FF                    STB <_Ttmp5+1
                      ; peephole(13): inlined1
                      ;       LDD _h
3022  CC0000                  LDD #1-1
3023                  _h equ *-2
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp5
3025  9EFE                    LDX <_Ttmp5
3027  BD2FDB                  JSR CPUMATHDIV16BITTO16BIT_SIGNED
302A  BF4C17                  STX _Ttmp12
302D  FD4C15                  STD _Ttmp11
3030  FC4C15                  LDD _Ttmp11
                      ; peephole(6): unread1
                      ;       STD _mid2
                              ; P:13
                              ; L:16
                              ; P:0
                              ; L:17
                              IF (((128+duff_after-(*+2))|(127-duff_after+(*+2)))&0x8000)
3033  7E30C5                  JMP duff_after
                              ELSE
                              BRA duff_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                               DUFF'S DEVICE                                 *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      
                          ; This is a special device that should transform the memory movement into
                          ; an optimized one. This is done by using some tricks and automodification
                          ; assembly code.
                      
3036                  DUFFDEVICE
                      
                          ; First of all, we avoid to do anything if the memory to copy is equal
                          ; to zero. It means that nothing is needed to do, so move to the end
                          ; of the routine.
                      
3036  10830000                CMPD #0
303A  10270085                LBEQ DUFFDEVICEDONE
                      
                          ; Then, we disable, at startup, the 16 byte copy loop, by assigning
                          ; a couple of "NOP" (opcode $12) at the place of the branching.
                      
303E  CE1212                  LDU #$1212
3041  FF30A8                  STU DUFFDEVICEL0C
                      
                          ; So, we must manage the fact that the size is odd: in this case,
                          ; the first byte will be copied directly. This is done by dividing
                          ; the size by 2 and taking apart the carry bit.
                      
3044  44                      LSRA
3045  56                      RORB
                      
                          ; CARRY CLEAR (BCC) -> Size was even
                          ; CARRY SET   (BCS) -> Size was odd
                      
3046  2410                    BCC DUFFDEVICELX
                      
                          ; The size was odd, so copy the first byte and move ahead
                          ; source (Y) and destination (X) address.
                      
3048  3406                    PSHS D
304A  A6A0                    LDA ,Y +
304C  A780                    STA ,X +
304E  3506                    PULS D
                      
                          ; Again, we avoid to do anything if the memory to copy is equal
                          ; to zero. It means that nothing is needed to do more, so move 
                          ; to the end of the routine.
                      
3050  10830000                CMPD #0
3054  1027006B                LBEQ DUFFDEVICEDONE
                      
                          ; We reach this point having the original size halved. So now we
                          ; have to "unroll" the copy. Unrolling is a process that try to
                          ; transform a "generic" size copy in a "modulus" size copy.
                          ; We use a modulus of 16 bytes (using a 2 byte register for 8 times).
                          ; If the size is multiple of 16 bytes, the process is complete as
                          ; described. Otherwise, we are going to calculate the "rest" 
                          ; (modulus) of the copy. In order to make the process efficient, 
                          ; we will first calculate the remaining part (the "modulus", in fact) 
                          ; and then we will proceed to copy the rest as quickly as possible,
                          ;  which will be a multiple of 16 bytes,
                      
3058                  DUFFDEVICELX
                      
                          ; Let's put up some numbers (we consider only even sizes):
                          ;
                          ; - (original) size:  2    (16 byte) blocks: 0     (rest) block size:  2 bytes
                          ; - "             ":  4    "              ": 0     "               ":  4 bytes
                          ; - "             ":  6    "              ": 0     "               ":  6 bytes
                          ; - "             ":  8    "              ": 0     "               ":  8 bytes
                          ; - "             ": 10    "              ": 0     "               ": 10 bytes
                          ; - "             ": 12    "              ": 0     "               ": 12 bytes
                          ; - "             ": 14    "              ": 0     "               ": 14 bytes
                          ; - "             ": 16    "              ": 1     "               ":  0 bytes
                          ; - "             ": 18    "              ": 1     "               ":  2 bytes
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ; - ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
                          ;
                          ; In D register we have the original size (divided by 2). So we have to 
                          ; calculate, first of all, the size of the rest block size.
                          ;
                          ; RBS = ( 2 * D ) MOD 16 = ( 2 * D ) MOD ( 2 * 8 ) = D MOD 8 = B AND #$7
                              
                          ; So we save the (halved) size to copy.
                      
3058  3406                    PSHS D
                      
                          ; and calculate the block size.
                      
305A  C407                    ANDB #7
305C  58                      LSLB
                      
                          ; If it is zero, it means that no (rest) block size has to be managed.
                      
305D  2718                    BEQ DUFFDEVICELXNR
                      
                          ; Othewise, we have to replace the standard block size (16 bytes) with
                          ; the rest block size. This is done by automodification technique.
                      
305F  F7309D                  STB DUFFDEVICEL0A + 2
3062  F730A0                  STB DUFFDEVICEL0B + 2
                      
                          ; Moreover, we must replace the subtraction terms for the loop counter.
                          ; Again, this is done by automodification technique. Note that the
                          ; loop counter thinks in terms of "2 bytes" so we must store the
                          ; half of the block size.
                      
3065  54                      LSRB
3066  F730A3                  STB DUFFDEVICEL0D + 2
                      
                          ; Finally, we must calculate the address (offset) of the first command 
                          ; needed to copy the memory from source to destination. In order to 
                          ; understand which is the offset, we must take in count of this
                          ; numbers:
                          ;
                          ; - (original) size:  2    (rest) block size:  2 bytes  offset:     28
                          ; - "             ":  4    "               ":  4 bytes              24
                          ; - "             ":  6    "               ":  6 bytes              20
                          ; - "             ":  8    "               ":  8 bytes              16
                          ; - "             ": 10    "               ": 10 bytes              12
                          ; - "             ": 12    "               ": 12 bytes              08
                          ; - "             ": 14    "               ": 14 bytes              04
                          ;
                          ; 00: LDU 14, Y
                          ; 02: STU 14, X
                          ; 04: LDU 12, Y
                          ; 06: STU 12, X
                          ; .....
                          ; 24: LDU 2, Y
                          ; 26: STU 2, X
                          ; 28: LDU , Y
                          ; 30: STU , X
                          ;
                          ; The formula is 32 - 4 * ( rest block size / 2 ) = 32 - 4 * B
                      
3069  8604                    LDA #4
306B  3D                      MUL
306C  F730C4                  STB DUFFDELTA
306F  C620                    LDB #32
3071  F030C4                  SUBB DUFFDELTA
3074  F7307A                  STB DUFFDEVICEL0+1
                      
                          ; If we reach this point, nothing has to be customized since the
                          ; memory to copy is multiple of 16 bytes.
                      
3077                  DUFFDEVICELXNR
                              
                          ; Restore the (halved) size to copy.
                      
3077  3506                    PULS D
                      
                          ; Move to the first command of the unrolled loop.
                          ; This address could be different if (rest) block size.
                      
3079                  DUFFDEVICEL0
3079  2000                    BRA DUFFDEVICEL1
                      
                          ; This is the unrolled loop to copy 16 bytes at each round.
                          ; If the memory to copy is not multiple of 16 bytes, the
                          ; first time we will jump "inside" the loop, in order to copy
                          ; only a part of the block (< 16 bytes).
                      
307B                  DUFFDEVICEL1
307B  EE2E                    LDU 14,Y 
307D  EF0E                    STU 14,X 
307F  EE2C                    LDU 12,Y 
3081  EF0C                    STU 12,X 
3083  EE2A                    LDU 10,Y 
3085  EF0A                    STU 10,X 
3087  EE28                    LDU 8,Y 
3089  EF08                    STU 8,X 
308B  EE26                    LDU 6,Y 
308D  EF06                    STU 6,X 
308F  EE24                    LDU 4,Y 
3091  EF04                    STU 4,X 
3093  EE22                    LDU 2,Y 
3095  EF02                    STU 2,X 
3097  EEA4                    LDU ,Y 
3099  EF84                    STU ,X 
                      
                          ; Move the destination address ahead of the *actual*
                          ; block size. Normally it is 16 but not in the first
                          ; block copied, that is equal to the (rest) block size.
                      
309B                  DUFFDEVICEL0A
309B  308810                  LEAX 16,X 
                      
                          ; Move the source address ahead of the *actual*
                          ; block size. Normally it is 16 but not in the first
                          ; block copied, that is equal to the (rest) block size.
                      
309E                  DUFFDEVICEL0B
309E  31A810                  LEAY 16,Y
                      
                          ; Decrement the counter of the size of the block. Normally
                          ; it is 8 (2x8 = 16 bytes) but it could be lesser in case
                          ; of the first loop for a movement that is not multiple
                          ; of 16 bytes.
                      
30A1                  DUFFDEVICEL0D
30A1  830008                  SUBD #$8
                      
                          ; Finally, if D <= 0 we can exit the copy process.
                          ; Actually, we could just check for D = 0 but I am not
                          ; sure that the algorithm is corrected.
                      
30A4  2B1D                    BMI DUFFDEVICEDONE
30A6  271B                    BEQ DUFFDEVICEDONE
                      
                          ; We can reach this point in two different moments: 
                          ; on the first run of the loop, or the n-th one.
                          ; If this is the first time we reach this label,
                          ; the BRA DUFFDEVICEL1 has been replaced by NOP NOP:
                          ; this means that the execution will continue to the
                          ; following istructions. Otherwise, this will move
                          ; to the next round.
                      
30A8                  DUFFDEVICEL0C
30A8  20D1                    BRA DUFFDEVICEL1
                      
                          ; If we reached this line, we have copied the very
                          ; first block, that could be smaller than 16 bytes.
                          ; At this point, we must replace the block size 
                          ; with the standard block size (16 bytes)
                          ; This is done by automodification technique.
                              
30AA  3406                    PSHS D
                      
                          ; Replace the displacement for each loop.
                      
30AC  C610                    LDB #16
30AE  F7309D                  STB DUFFDEVICEL0A+2
30B1  F730A0                  STB DUFFDEVICEL0B+2
                      
                          ; Replace the decrement for each loop.
                      
30B4  C608                    LDB #8
30B6  F730A3                  STB DUFFDEVICEL0D+2
                      
                          ; Replace the NOPs with a jump to the first
                          ; instruction of the unrolled loop.
                      
30B9  CC20D1                  LDD #$20D1
30BC  FD30A8                  STD DUFFDEVICEL0C
                      
30BF  3506                    PULS D
                      
                          ; Finally, jump to the first instruction
                          ; of the unrolled loop.
                      
30C1  20B8                    BRA DUFFDEVICEL1
                      
30C3                  DUFFDEVICEDONE
30C3  39                      RTS
                      
30C4                  DUFFDELTA
30C4  00                      FCB $0
30C5                  duff_after
                              IF (((128+cpu_mem_move_after-(*+2))|(127-cpu_mem_move_after+(*+2)))&0x8000)
                              JMP cpu_mem_move_after
                              ELSE
30C5  2000                    BRA cpu_mem_move_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ; CPUMEMMOVE
                      ;     CMPU #0
                      ;     BEQ CPUMEMMOVEDONE
                      ; CPUMEMMOVEL1
                      ;     LDA ,Y+
                      ;     STA ,X+
                      ;     LEAU -1,U
                      ;     CMPU #$0
                      ;     BNE CPUMEMMOVEL1
                      ; CPUMEMMOVEDONE
                      ;     RTS
30C7                  cpu_mem_move_after
30C7  CC004A                  LDD #$004a
30CA  108E4C19                LDY #_Timg16
30CE  8E4BBE                  LDX #_keyimage
30D1  BD3036                  JSR DUFFDEVICE
                              ; P:93
                              ; L:18
                              ; P:0
                              ; L:19
                              ; P:0
                              ; L:20
30D4                  _label17
                      ; peephole(13): inlined1
                      ;       LDD _finished
30D4  CC0000                  LDD #1-1
30D5                  _finished equ *-2
30D7  43                      COMA
30D8  53                      COMB
30D9  FD4C63                  STD _Ttmp18
                      ; peephole(1): r489 (STD,LDB+1)->()
                      ;       LDB _Ttmp18+1
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
30DC  D7F0                    STB <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
30DE  D6F0                    LDB <_Ttmp1
                              IF (((128+_label17bis-(*+2))|(127-_label17bis+(*+2)))&0x8000)
30E0  10271AD3                LBEQ _label17bis
                              ELSE
                              BEQ _label17bis
                              ENDIF
                              ; P:13
                              ; L:21
30E4  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp1
30E5  97F0                    STA <_Ttmp1
                      ; peephole(3): r756 [A=0](STA*,LDB*)->(CLRB)
                      ;       LDB _Ttmp1
30E7  5F                      CLRB
30E8  F74BBA                  STB _PAPER
                              IF (((128+clsGraphic_after-(*+2))|(127-clsGraphic_after+(*+2)))&0x8000)
                              JMP clsGraphic_after
                              ELSE
30EB  205C                    BRA clsGraphic_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                       CLEAR SCREEN ROUTINE FOR 6847                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
30ED                  CLSG
30ED  B62D54                  LDA CURRENTMODE
30F0  8107                    CMPA #7
30F2  2603                    BNE CLS7X
30F4  7E3129                  JMP CLS7
30F7                  CLS7X
30F7  8108                    CMPA #8
30F9  2603                    BNE CLS8X
30FB  7E3134                  JMP CLS8
30FE                  CLS8X
30FE  8109                    CMPA #9
3100  2603                    BNE CLS9X
3102  7E3129                  JMP CLS9
3105                  CLS9X
3105  810A                    CMPA #10
3107  2603                    BNE CLS10X
3109  7E3134                  JMP CLS10
310C                  CLS10X
310C  810B                    CMPA #11
310E  2603                    BNE CLS11X
3110  7E3129                  JMP CLS11
3113                  CLS11X
3113  810C                    CMPA #12
3115  2603                    BNE CLS12X
3117  7E3134                  JMP CLS12
311A                  CLS12X
311A  810D                    CMPA #13
311C  2603                    BNE CLS13X
311E  7E3129                  JMP CLS13
3121                  CLS13X
3121  810E                    CMPA #14
3123  2603                    BNE CLS14X
3125  7E3134                  JMP CLS14
3128                  CLS14X
3128  39                      RTS
3129                  CLS7
3129                  CLS9
3129                  CLS11
3129                  CLS13
3129  B64BBA                  LDA _PAPER
312C  8403                    ANDA #$03
312E  C6AA                    LDB #$aa
3130  3D                      MUL
3131  7E3138                  JMP CLSG2
3134                  CLS8
3134                  CLS10
3134                  CLS12
3134                  CLS14
                          ; LDA _PAPER
                          ; CMPA #0
                          ; BEQ CLSG0
                          ; LDA #$FF
                          ; JMP CLSG2
3134                  CLSG0    
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
3134  4F                      CLRA
3135  7E3138                  JMP CLSG2
3138                  CLSG2
3138  10BE2C0C                LDY BITMAPADDRESS
313C  BE2D8A                  LDX CURRENTFRAMESIZE
313F                  CLSGL1
313F  A7A0                    STA ,Y +
3141  301F                    LEAX -1,X 
3143  8C0000                  CMPX #0
3146  26F7                    BNE CLSGL1
3148  39                      RTS
3149                  clsGraphic_after
3149  BD30ED                  JSR CLSG
                              ; P:71
                              ; L:22
314C  C60F                    LDB #$0f
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
314E  D7F0                    STB <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
3150  D6F0                    LDB <_Ttmp1
3152  F74BB9                  STB _PEN
                              ; P:4
                              ; L:23
3155  C650                    LDB #$50
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
3157  D7F0                    STB <_Ttmp1
3159  CC0000                  LDD #$0000
315C  FD4C65                  STD _Ttmp19
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
315F  D6F0                    LDB <_Ttmp1
3161  F74C66                  STB _Ttmp19+1
3164  FC4C65                  LDD _Ttmp19
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp5
3167  DDFE                    STD <_Ttmp5
3169  C610                    LDB #$10
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp21
316B  D7F9                    STB <_Ttmp21
316D  CC0000                  LDD #$0000
3170  FD4C69                  STD _Ttmp23
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
3173  D6F9                    LDB <_Ttmp21
3175  F74C6A                  STB _Ttmp23+1
3178  FC4C69                  LDD _Ttmp23
317B  FD4C67                  STD _Ttmp22
                              IF (((128+putimage_after-(*+2))|(127-putimage_after+(*+2)))&0x8000)
317E  7E3410                  JMP putimage_after
                              ELSE
                              BRA putimage_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          IMAGES ROUTINE FOR 6847                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ; ----------------------------------------------------------------------------
                      ; - Put image on bitmap
                      ; ----------------------------------------------------------------------------
3181                  PUTIMAGE
3181  B62D54                  LDA CURRENTMODE
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
3184  2603                    BNE PUTIMAGE0X
3186  7E31EC                  JMP PUTIMAGE0
3189                  PUTIMAGE0X
3189  8101                    CMPA #1
318B  2603                    BNE PUTIMAGE1X
318D  7E31EC                  JMP PUTIMAGE1
3190                  PUTIMAGE1X
3190  8102                    CMPA #2
3192  2603                    BNE PUTIMAGE2X
3194  7E31ED                  JMP PUTIMAGE2
3197                  PUTIMAGE2X
3197  8103                    CMPA #3
3199  2603                    BNE PUTIMAGE3X
319B  7E31EE                  JMP PUTIMAGE3
319E                  PUTIMAGE3X
319E  8104                    CMPA #4
31A0  2603                    BNE PUTIMAGE4X
31A2  7E31EF                  JMP PUTIMAGE4
31A5                  PUTIMAGE4X
31A5  8105                    CMPA #5
31A7  2603                    BNE PUTIMAGE5X
31A9  7E31F0                  JMP PUTIMAGE5
31AC                  PUTIMAGE5X
31AC  8106                    CMPA #6
31AE  2603                    BNE PUTIMAGE6X
31B0  7E31F1                  JMP PUTIMAGE6
31B3                  PUTIMAGE6X
31B3  8107                    CMPA #7
31B5  2603                    BNE PUTIMAGE7X
31B7  7E31F2                  JMP PUTIMAGE7
31BA                  PUTIMAGE7X
31BA  8108                    CMPA #8
31BC  2603                    BNE PUTIMAGE8X
31BE  7E320E                  JMP PUTIMAGE8
31C1                  PUTIMAGE8X
31C1  8109                    CMPA #9
31C3  2603                    BNE PUTIMAGE9X
31C5  7E322C                  JMP PUTIMAGE9
31C8                  PUTIMAGE9X
31C8  810A                    CMPA #10
31CA  2603                    BNE PUTIMAGE10X
31CC  7E324A                  JMP PUTIMAGE10
31CF                  PUTIMAGE10X
31CF  810B                    CMPA #11
31D1  2603                    BNE PUTIMAGE11X
31D3  7E3268                  JMP PUTIMAGE11
31D6                  PUTIMAGE11X
31D6  810C                    CMPA #12
31D8  2603                    BNE PUTIMAGE12X
31DA  7E3286                  JMP PUTIMAGE12
31DD                  PUTIMAGE12X
31DD  810D                    CMPA #13
31DF  2603                    BNE PUTIMAGE13X
31E1  7E32A4                  JMP PUTIMAGE13
31E4                  PUTIMAGE13X
31E4  810E                    CMPA #14
31E6  2603                    BNE PUTIMAGE14X
31E8  7E32C2                  JMP PUTIMAGE14
31EB                  PUTIMAGE14X
31EB  39                      RTS
31EC                  PUTIMAGE0
31EC                  PUTIMAGE1
31EC  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 4 mode translates bits 0 through 3 into a 4 x 6 dot 
                      ; element in the standard 8 x 12 dot box. Three data bits may be used to select
                      ; one of eight colors for the entire character box. The extra bit is used to 
                      ; switch to alphanumeric. A 512 byte display memory is required. A density of 
                      ; 64 x 32 elements is available in the display area. The element area is four
                      ; dot-clocks wide by six lines high.
31ED                  PUTIMAGE2
31ED  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 6 mode maps six 4 x 4 dot elements into the standard
                      ; 8 x 12 dot alphanumeric box, a screen density of 64 x 48 elements is available. 
                      ; Six bits are used to generate this map and two data bits may be used to select 
                      ; one of four colors in the display box. A 512 byte display memory is required. 
                      ; The element area is four dot-clocks wide by four lines high.
31EE                  PUTIMAGE3
31EE  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 8 mode maps eight 4 x 3 dot elements into the 
                      ; standard 8 x 12 dot box. This mode requires four memory locations per box 
                      ; and each memory location may specify one of eight colors or black. 
                      ; A 2048 byte display memory is required. A density of 64 x 64 elements is 
                      ; available in the display area. The element area is four dot-clocks wide 
                      ; by three lines high.
31EF                  PUTIMAGE4
31EF  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 12 mode maps twelve 4 x 2 dot elements into the 
                      ; standard 8 x 12 dot box. This mode requires six memory locations per box and 
                      ; each memory location may specify one of eight colors or black. A 3072 byte 
                      ; display memory is required. A density of 64 x 96 elements is available in the
                      ; display area. The element area is four dot-clocks wide by two lineshigh.
31F0                  PUTIMAGE5
31F0  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 24 mode maps twenty-four 4 x 1 dot elements into 
                      ; the standard 8 x 12 dot box. This mode requires twelve memory locations 
                      ; per box and each memory location may specify one of eight colors or black. 
                      ; A 6144 byte display memory is required. A density of 64 x 192
                      ; elements is available in the display are. The element area is four 
                      ; dot-clocks wide by one line high.
31F1                  PUTIMAGE6
31F1  39                      RTS
                      ; The 64 x 64 Color Graphics mode generates a display matrix of 64 
                      ; elements wide by 64 elements high. Each element may be one of four 
                      ; colors. A 1K x 8 display memory is required. Each pixel equals 
                      ; four dot-clocks by three scan lines.
31F2                  PUTIMAGE7
31F2  BE2C0C                  LDX BITMAPADDRESS
31F5  FC0043                  LDD IMAGEY
31F8  58                      LSLB
31F9  49                      ROLA
31FA  58                      LSLB
31FB  49                      ROLA
31FC  58                      LSLB
31FD  49                      ROLA
31FE  58                      LSLB
31FF  49                      ROLA
3200  308B                    LEAX D,X 
3202  FC0041                  LDD IMAGEX
3205  44                      LSRA
3206  56                      RORB
3207  44                      LSRA
3208  56                      RORB
3209  308B                    LEAX D,X 
320B  7E3357                  JMP PUTIMAGECOMMONC
                      ; The 128 x 64 Graphics Mode generates a matrix 128 elements wide 
                      ; by 64 elements high. Each element may be either ON or OFF. However, 
                      ; the entire display may be one of two colors, selected by using the 
                      ; color set select pin. A 1K x 8 display memory is required. Each 
                      ; pixel equals two dotclocks by three scan lines.
320E                  PUTIMAGE8
320E  BE2C0C                  LDX BITMAPADDRESS
3211  FC0043                  LDD IMAGEY
3214  58                      LSLB
3215  49                      ROLA
3216  58                      LSLB
3217  49                      ROLA
3218  58                      LSLB
3219  49                      ROLA
321A  58                      LSLB
321B  49                      ROLA
321C  308B                    LEAX D,X 
321E  FC0041                  LDD IMAGEX
3221  44                      LSRA
3222  56                      RORB
3223  44                      LSRA
3224  56                      RORB
3225  44                      LSRA
3226  56                      RORB
3227  308B                    LEAX D,X 
3229  7E32E2                  JMP PUTIMAGECOMMON
                      ; The 128 x 64 Color Graphics mode generates a display matrix 128 
                      ; elements wide by 64 elements high. Each element may be one of four 
                      ; colors. A 2K x 8 display memory is required. Each pixel equals
                      ; two dot-clocks by three scan lines.
322C                  PUTIMAGE9
322C  BE2C0C                  LDX BITMAPADDRESS
322F  FC0043                  LDD IMAGEY
3232  58                      LSLB
3233  49                      ROLA
3234  58                      LSLB
3235  49                      ROLA
3236  58                      LSLB
3237  49                      ROLA
3238  58                      LSLB
3239  49                      ROLA
323A  58                      LSLB
323B  49                      ROLA
323C  308B                    LEAX D,X 
323E  FC0041                  LDD IMAGEX
3241  44                      LSRA
3242  56                      RORB
3243  44                      LSRA
3244  56                      RORB
3245  308B                    LEAX D,X 
3247  7E3357                  JMP PUTIMAGECOMMONC
                      ; The 128 x 96 Graphics mode generates a display matrix 128 
                      ; elements wide by 96 elements high. Each element may be either 
                      ; ON or OFF. However, the entire display may be one of two colors
                      ; selected by using the color select pin. A 2K x 8 display memory 
                      ; is required. Each pixel equals two dot-clocks by two scan lines.
324A                  PUTIMAGE10
324A  BE2C0C                  LDX BITMAPADDRESS
324D  FC0043                  LDD IMAGEY
3250  58                      LSLB
3251  49                      ROLA
3252  58                      LSLB
3253  49                      ROLA
3254  58                      LSLB
3255  49                      ROLA
3256  58                      LSLB
3257  49                      ROLA
3258  308B                    LEAX D,X 
325A  FC0041                  LDD IMAGEX
325D  44                      LSRA
325E  56                      RORB
325F  44                      LSRA
3260  56                      RORB
3261  44                      LSRA
3262  56                      RORB
3263  308B                    LEAX D,X 
3265  7E32E2                  JMP PUTIMAGECOMMON
                      ; The 128 x 96 Color Graphics mode generates a display 128 elements 
                      ; wide by 96 elements high. Each element may be one of four colors. 
                      ; A 3K x 8 display memory is required. Each pixel equals two 
                      ; dot-clocks by two scan lines.
3268                  PUTIMAGE11
3268  BE2C0C                  LDX BITMAPADDRESS
326B  FC0043                  LDD IMAGEY
326E  58                      LSLB
326F  49                      ROLA
3270  58                      LSLB
3271  49                      ROLA
3272  58                      LSLB
3273  49                      ROLA
3274  58                      LSLB
3275  49                      ROLA
3276  58                      LSLB
3277  49                      ROLA
3278  308B                    LEAX D,X 
327A  FC0041                  LDD IMAGEX
327D  44                      LSRA
327E  56                      RORB
327F  44                      LSRA
3280  56                      RORB
3281  308B                    LEAX D,X 
3283  7E3357                  JMP PUTIMAGECOMMONC
                      ; The 128 x 192 Graphics mode generates a display matrix 128 elements 
                      ; wide by 192 elements high. Each element may be either ON or OFF,
                      ; but the ON elements may be one of two colors selected with color 
                      ; set select pin. A 3K x 8 display memory is required. Each pixel 
                      ; equals two dot-clocks by one scan line.
3286                  PUTIMAGE12
3286  BE2C0C                  LDX BITMAPADDRESS
3289  FC0043                  LDD IMAGEY
328C  58                      LSLB
328D  49                      ROLA
328E  58                      LSLB
328F  49                      ROLA
3290  58                      LSLB
3291  49                      ROLA
3292  58                      LSLB
3293  49                      ROLA
3294  308B                    LEAX D,X 
3296  FC0041                  LDD IMAGEX
3299  44                      LSRA
329A  56                      RORB
329B  44                      LSRA
329C  56                      RORB
329D  44                      LSRA
329E  56                      RORB
329F  308B                    LEAX D,X 
32A1  7E32E2                  JMP PUTIMAGECOMMON
                      ;  The 128 x 192 Color Graphics mode generates a display 128 elements 
                      ;  wide by 192 elements high. Each element may be one of four colors.
                      ;  A 6K x 8 display memory is required. Each pixel equals two dot-clocks 
                      ;  by one scan line.
32A4                  PUTIMAGE13
32A4  BE2C0C                  LDX BITMAPADDRESS
32A7  FC0043                  LDD IMAGEY
32AA  58                      LSLB
32AB  49                      ROLA
32AC  58                      LSLB
32AD  49                      ROLA
32AE  58                      LSLB
32AF  49                      ROLA
32B0  58                      LSLB
32B1  49                      ROLA
32B2  58                      LSLB
32B3  49                      ROLA
32B4  308B                    LEAX D,X 
32B6  FC0041                  LDD IMAGEX
32B9  44                      LSRA
32BA  56                      RORB
32BB  44                      LSRA
32BC  56                      RORB
32BD  308B                    LEAX D,X 
32BF  7E3357                  JMP PUTIMAGECOMMONC
                      ; The 256 x 192 Graphics mode generates a display 256 elements wide by 
                      ; 192 elements high. Each element may be either ON or OFF, but the ON 
                      ; element may be one of two colors selected with the color set select pin. 
                      ; A 6K x 8 display memory is required. Each pixel equals one 
                      ; dot-clock by one scan line.
32C2                  PUTIMAGE14
32C2  BE2C0C                  LDX BITMAPADDRESS
32C5  FC0043                  LDD IMAGEY
32C8  58                      LSLB
32C9  49                      ROLA
32CA  58                      LSLB
32CB  49                      ROLA
32CC  58                      LSLB
32CD  49                      ROLA
32CE  58                      LSLB
32CF  49                      ROLA
32D0  58                      LSLB
32D1  49                      ROLA
32D2  308B                    LEAX D,X 
32D4  FC0041                  LDD IMAGEX
32D7  44                      LSRA
32D8  56                      RORB
32D9  44                      LSRA
32DA  56                      RORB
32DB  44                      LSRA
32DC  56                      RORB
32DD  308B                    LEAX D,X 
32DF  7E32E2                  JMP PUTIMAGECOMMON
32E2                  PUTIMAGECOMMON
32E2  A6A4                    LDA ,Y
32E4  44                      LSRA
32E5  44                      LSRA
32E6  44                      LSRA
32E7  8100                    CMPA #0
32E9  2602                    BNE PUTIMAGE2L0
32EB  8620                    LDA #32
32ED                  PUTIMAGE2L0
32ED  B70045                  STA IMAGEW
32F0  A621                    LDA 1,Y
32F2  B70046                  STA IMAGEH
32F5  B70047                  STA IMAGEH2
32F8  3122                    LEAY 2,Y
32FA  F60045                  LDB IMAGEW
32FD  5A                      DECB
32FE                  PUTIMAGE2L1
32FE  A6A5                    LDA B,Y
3300  A785                    STA B,X
3302  5A                      DECB
3303  C100                    CMPB #0
3305  2CF7                    BGE PUTIMAGE2L1
3307  B60049                  LDA IMAGEF
330A  8440                    ANDA #64
330C  8100                    CMPA #0
330E  2721                    BEQ PUTIMAGE2L1N
3310  B60049                  LDA IMAGEF
3313  8401                    ANDA #1
3315  8101                    CMPA #1
3317  2710                    BEQ PUTIMAGE2L1N0
3319  8A41                    ORA #65
331B  B70049                  STA IMAGEF
                      ; peephole(13): inlined1
                      ;       LDB CURRENTSL
331E  C620                    LDB #32
331F                  CURRENTSL equ *-1
3320  3085                    LEAX B,X 
3322  F60045                  LDB IMAGEW
3325  5A                      DECB
3326  7E32FE                  JMP PUTIMAGE2L1
3329                  PUTIMAGE2L1N0
3329  B60049                  LDA IMAGEF
332C  84FE                    ANDA #$FE
332E  B70049                  STA IMAGEF
3331                  PUTIMAGE2L1N
3331  F60045                  LDB IMAGEW
3334  31A5                    LEAY B,Y 
3336  F6331F                  LDB CURRENTSL
3339  3085                    LEAX B,X 
333B  FC0043                  LDD IMAGEY
333E  C30001                  ADDD #1
3341  10B32F29                CMPD CURRENTHEIGHT
3345  270F                    BEQ PUTIMAGECOMMONE
3347  7A0046                  DEC IMAGEH
334A  F60046                  LDB IMAGEH
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPB #0
334D  2707                    BEQ PUTIMAGECOMMONE
334F  F60045                  LDB IMAGEW
3352  5A                      DECB
3353  7E32FE                  JMP PUTIMAGE2L1
3356                  PUTIMAGECOMMONE
3356  39                      RTS
3357                  PUTIMAGECOMMONC
3357  A6A4                    LDA ,Y
3359  44                      LSRA
335A  44                      LSRA
335B  8100                    CMPA #0
335D  2602                    BNE PUTIMAGECL0
335F  8640                    LDA #64
3361                  PUTIMAGECL0
3361  B70045                  STA IMAGEW
3364  A621                    LDA 1,Y
3366  B70046                  STA IMAGEH
3369  B70047                  STA IMAGEH2
336C  3122                    LEAY 2,Y
336E  F60045                  LDB IMAGEW
3371  5A                      DECB
3372                  PUTIMAGE2CL1
3372  B60049                  LDA IMAGEF
3375  8420                    ANDA #32
3377  8100                    CMPA #0 
3379  2747                    BEQ PUTIMAGE2CL1DEF
337B                  PUTIMAGE2YTRANS3L1
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
337B  4F                      CLRA
337C  9719                    STA <MATHPTR5
337E  A6A5                    LDA B,Y
                          ; 00 01 10 00
3380  84C0                    ANDA #$C0
                          ; -> 00 00 00 00
3382  2706                    BEQ PUTIMAGE2YTRANS3L1P4X
3384  9619                    LDA <MATHPTR5
3386  8AC0                    ORA #$C0
3388  9719                    STA <MATHPTR5
338A                  PUTIMAGE2YTRANS3L1P4X
338A  A6A5                    LDA B,Y
                          ; 00 01 10 00
338C  8430                    ANDA #$30
                          ; -> 00 01 00 00
338E  2706                    BEQ PUTIMAGE2YTRANS3L1P3X
3390  9619                    LDA <MATHPTR5
3392  8A30                    ORA #$30
                          ; MATH PTR = 00 11 00 00
3394  9719                    STA <MATHPTR5
3396                  PUTIMAGE2YTRANS3L1P3X
3396  A6A5                    LDA B,Y
                          ; 00 01 10 00
3398  840C                    ANDA #$0C
                          ; -> 00 00 00 00
339A  2706                    BEQ PUTIMAGE2YTRANS3L1P2X
339C  9619                    LDA <MATHPTR5
339E  8A0C                    ORA #$0C
33A0  9719                    STA <MATHPTR5
33A2                  PUTIMAGE2YTRANS3L1P2X
33A2  A6A5                    LDA B,Y
                          ; 00 01 10 00
33A4  8403                    ANDA #$03
                          ; -> 00 01 00 00
33A6  2706                    BEQ PUTIMAGE2YTRANS3L1P1X
33A8  9619                    LDA <MATHPTR5
33AA  8A03                    ORA #$03
                          ; MATH PTR = 00 11 00 00
33AC  9719                    STA <MATHPTR5
33AE                  PUTIMAGE2YTRANS3L1P1X
33AE  9619                    LDA <MATHPTR5
                          ; 00 11 11 00
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORA #$FF
33B0  43                      COMA
                          ; 11 00 00 11
33B1  9720                    STA <MATHPTR6
33B3  A685                    LDA B,X
                          ; 00 00 00 00
33B5  9420                    ANDA <MATHPTR6
33B7  9720                    STA <MATHPTR6
                          ; 00 00 00 00
33B9  A6A5                    LDA B,Y
33BB  9419                    ANDA <MATHPTR5
33BD  9A20                    ORA <MATHPTR6
33BF  7E33C4                  JMP PUTIMAGE2CL1FINAL
33C2                  PUTIMAGE2CL1DEF
33C2  A6A5                    LDA B,Y
33C4                  PUTIMAGE2CL1FINAL
33C4  A785                    STA B,X
33C6  5A                      DECB
33C7  C100                    CMPB #0
33C9  2CA7                    BGE PUTIMAGE2CL1
33CB  B60049                  LDA IMAGEF
33CE  8440                    ANDA #64
33D0  8100                    CMPA #0
33D2  2722                    BEQ PUTIMAGE2CL1N
33D4  B60049                  LDA IMAGEF
33D7  8401                    ANDA #1
33D9  8101                    CMPA #1
33DB  2711                    BEQ PUTIMAGE2CL1N0
33DD  8A41                    ORA #65
33DF  B70049                  STA IMAGEF
33E2  F6331F                  LDB CURRENTSL
33E5  3085                    LEAX B,X 
33E7  F60045                  LDB IMAGEW
33EA  5A                      DECB
33EB  7E3372                  JMP PUTIMAGE2CL1
33EE                  PUTIMAGE2CL1N0
33EE  B60049                  LDA IMAGEF
33F1  84FE                    ANDA #$FE
33F3  B70049                  STA IMAGEF
33F6                  PUTIMAGE2CL1N
33F6  F60045                  LDB IMAGEW
33F9  31A5                    LEAY B,Y 
33FB  F6331F                  LDB CURRENTSL
33FE  3085                    LEAX B,X 
3400  7A0046                  DEC IMAGEH
3403  F60046                  LDB IMAGEH
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPB #0
3406  2707                    BEQ PUTIMAGECOMMONCE
3408  F60045                  LDB IMAGEW
340B  5A                      DECB
340C  7E3372                  JMP PUTIMAGE2CL1
340F                  PUTIMAGECOMMONCE
340F  39                      RTS
3410                  putimage_after
3410  108E4BBE                LDY #_keyimage
                      ; peephole(13): direct-page1
                      ;       LDD _Ttmp5
3414  DCFE                    LDD <_Ttmp5
3416  FD0041                  STD IMAGEX
3419  FC4C67                  LDD _Ttmp22
341C  FD0043                  STD IMAGEY
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
341F  4F                      CLRA
3420  9749                    STA <IMAGEF
3422  8602                    LDA #$02
3424  9748                    STA <IMAGET
3426  BD3181                  JSR PUTIMAGE
3429  CC0000                  LDD #$0000
342C  FD2D15                  STD XGR
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
342F  D6F0                    LDB <_Ttmp1
3431  F72D16                  STB XGR+1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(7): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       CLRB
                      ; peephole(6): unread1
                      ;       STD YGR
                      ; peephole(7): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp21
                      ; peephole(6): unread1
                      ;       STB YGR+1
                              ; P:444
                              ; L:24
3434  C614                    LDB #$14
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
3436  D7F0                    STB <_Ttmp1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3438  5F                      CLRB
3439  FD4C65                  STD _Ttmp19
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
343C  D6F0                    LDB <_Ttmp1
343E  F74C66                  STB _Ttmp19+1
3441  FC4C65                  LDD _Ttmp19
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp5
3444  DDFE                    STD <_Ttmp5
3446  C610                    LDB #$10
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp21
3448  D7F9                    STB <_Ttmp21
344A  CC0000                  LDD #$0000
344D  FD4C69                  STD _Ttmp23
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
3450  D6F9                    LDB <_Ttmp21
3452  F74C6A                  STB _Ttmp23+1
3455  FC4C69                  LDD _Ttmp23
3458  FD4C67                  STD _Ttmp22
345B  108E4BBE                LDY #_keyimage
                      ; peephole(13): direct-page1
                      ;       LDD _Ttmp5
345F  DCFE                    LDD <_Ttmp5
3461  FD0041                  STD IMAGEX
3464  FC4C67                  LDD _Ttmp22
3467  FD0043                  STD IMAGEY
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
346A  4F                      CLRA
346B  9749                    STA <IMAGEF
346D  8602                    LDA #$02
346F  9748                    STA <IMAGET
3471  BD3181                  JSR PUTIMAGE
3474  CC0000                  LDD #$0000
3477  FD2D15                  STD XGR
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
347A  D6F0                    LDB <_Ttmp1
347C  F72D16                  STB XGR+1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(7): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       CLRB
                      ; peephole(6): unread1
                      ;       STD YGR
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
347F  D6F9                    LDB <_Ttmp21
                      ; peephole(6): unread1
                      ;       STB YGR+1
                              ; P:34
                              ; L:25
                              ; P:0
                              ; L:26
3481  FC4BBC                  LDD _mid1
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp5
3484  DDFE                    STD <_Ttmp5
3486  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp2
3487  97FD                    STA <_Ttmp2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3489  5F                      CLRB
348A  FD4C67                  STD _Ttmp22
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp2
348D  D6FD                    LDB <_Ttmp2
348F  F74C68                  STB _Ttmp22+1
3492  FC4C67                  LDD _Ttmp22
3495  FD4C65                  STD _Ttmp19
3498  FC4BBC                  LDD _mid1
349B  FD4C69                  STD _Ttmp23
349E  C660                    LDB #$60
34A0  F74C6C                  STB _Ttmp25
34A3  CC0000                  LDD #$0000
34A6  FD4C72                  STD _Ttmp42
34A9  F64C6C                  LDB _Ttmp25
34AC  F74C73                  STB _Ttmp42+1
34AF  FC4C72                  LDD _Ttmp42
34B2  FD4C70                  STD _Ttmp41
                              IF (((128+draw_after-(*+2))|(127-draw_after+(*+2)))&0x8000)
34B5  7E3A81                  JMP draw_after
                              ELSE
                              BRA draw_after
                              ENDIF
34B8                  lib_draw
34B8  CC0000                  LDD #$0000
34BB  FD4C74                  STD _Ttmp44
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp33
34BE  97FB                    STA <_Ttmp33
34C0  C610                    LDB #$10
34C2  F74C6F                  STB _Ttmp32
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
34C5  FC4C08                  LDD _draw__x0
34C8  FD4C78                  STD _Ttmp46
34CB  FC4C0A                  LDD _draw__y0
34CE  FD4C7A                  STD _Ttmp47
34D1  FC4C0C                  LDD _draw__x1
34D4  B34C08                  SUBD _draw__x0
34D7  FD34DB                  STD _Ttmp56
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp56
34DA  CC0000                  LDD #1-1
34DB                  _Ttmp56 equ *-2
34DD  FD4C7C                  STD _Ttmp48
34E0  FC4C0E                  LDD _draw__y1
34E3  B34C0A                  SUBD _draw__y0
34E6  FD34EA                  STD _Ttmp58
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp58
34E9  CC0000                  LDD #1-1
34EA                  _Ttmp58 equ *-2
34EC  FD4C7E                  STD _Ttmp49
34EF  5F                      CLRB
34F0  BE4C7E                  LDX _Ttmp49
34F3  BC4C74                  CMPX _Ttmp44
34F6  2C01                    BGE _label62
34F8  5A                      DECB
34F9                  _label62
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
34F9  D7FC                    STB <_Ttmp61
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp61
34FB  D6FC                    LDB <_Ttmp61
                              IF (((128+_label63e0-(*+2))|(127-_label63e0+(*+2)))&0x8000)
                              LBEQ _label63e0
                              ELSE
34FD  2717                    BEQ _label63e0
                              ENDIF
34FF                  _label63t
34FF  FC4C74                  LDD _Ttmp44
3502  B34C7E                  SUBD _Ttmp49
3505  FD3509                  STD _Ttmp64
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp64
3508  CC0000                  LDD #1-1
3509                  _Ttmp64 equ *-2
350B  FD4C7E                  STD _Ttmp49
350E  CCFFFF                  LDD #$ffff
3511  FD4C82                  STD _Ttmp53
                              IF (((128+_label63f-(*+2))|(127-_label63f+(*+2)))&0x8000)
                              JMP _label63f
                              ELSE
3514  200A                    BRA _label63f
                              ENDIF
3516                  _label63e0
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp61
3516  D6FC                    LDB <_Ttmp61
                              IF (((128+_label63f-(*+2))|(127-_label63f+(*+2)))&0x8000)
                              LBNE _label63f
                              ELSE
3518  2606                    BNE _label63f
                              ENDIF
351A  CC0001                  LDD #$0001
351D  FD4C82                  STD _Ttmp53
3520                  _label63f
3520                  _label63e1
3520  5F                      CLRB
3521  BE4C7C                  LDX _Ttmp48
3524  BC4C74                  CMPX _Ttmp44
3527  2C01                    BGE _label68
3529  5A                      DECB
352A                  _label68
352A  F74C84                  STB _Ttmp67
352D  F64C84                  LDB _Ttmp67
                              IF (((128+_label69e0-(*+2))|(127-_label69e0+(*+2)))&0x8000)
                              LBEQ _label69e0
                              ELSE
3530  2717                    BEQ _label69e0
                              ENDIF
3532                  _label69t
3532  FC4C74                  LDD _Ttmp44
3535  B34C7C                  SUBD _Ttmp48
3538  FD353C                  STD _Ttmp70
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp70
353B  CC0000                  LDD #1-1
353C                  _Ttmp70 equ *-2
353E  FD4C7C                  STD _Ttmp48
3541  CCFFFF                  LDD #$ffff
3544  FD4C80                  STD _Ttmp52
                              IF (((128+_label69f-(*+2))|(127-_label69f+(*+2)))&0x8000)
                              JMP _label69f
                              ELSE
3547  200B                    BRA _label69f
                              ENDIF
3549                  _label69e0
3549  F64C84                  LDB _Ttmp67
                              IF (((128+_label69f-(*+2))|(127-_label69f+(*+2)))&0x8000)
                              LBNE _label69f
                              ELSE
354C  2606                    BNE _label69f
                              ENDIF
354E  CC0001                  LDD #$0001
3551  FD4C80                  STD _Ttmp52
3554                  _label69f
3554                  _label69e1
3554  FC4C7E                  LDD _Ttmp49
3557  FD355B                  STD _Ttmp51
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp51
355A  CC0000                  LDD #1-1
355B                  _Ttmp51 equ *-2
355D  FD4C85                  STD _Ttmp72
3560  FC4C85                  LDD _Ttmp72
3563  58                      LSLB
3564  49                      ROLA
3565  FD4C85                  STD _Ttmp72
3568  FC4C7C                  LDD _Ttmp48
356B  FD356F                  STD _Ttmp50
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp50
356E  CC0000                  LDD #1-1
356F                  _Ttmp50 equ *-2
3571  FD4C87                  STD _Ttmp73
3574  FC4C87                  LDD _Ttmp73
3577  58                      LSLB
3578  49                      ROLA
3579  FD4C87                  STD _Ttmp73
357C  CC0000                  LDD #$0000
357F  FD4C89                  STD _Ttmp74
3582  FD4C8B                  STD _Ttmp74+2
3585  FC2D17                  LDD LINE
3588  FD4C8B                  STD _Ttmp74+2
358B  2008                    BRA _bit_check_extended_tab_after
358D                  bit_check_extended_tab
358D  0102040810204080         fcb 1,2,4,8,16,32,64,128
3595                  _bit_check_extended_tab_after
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
3595  96FB                    LDA <_Ttmp33
3597  F64C8C                  LDB _Ttmp74+3
359A  8108                    CMPA #8
359C  2511                    BLO _label80eval
359E  F64C8B                  LDB _Ttmp74+2
35A1  8110                    CMPA #16
35A3  250A                    BLO _label80eval
35A5  F64C8A                  LDB _Ttmp74+1
35A8  8118                    CMPA #24
35AA  2503                    BLO _label80eval
35AC  F64C89                  LDB _Ttmp74
35AF                  _label80eval
35AF  8E358D                  LDX #bit_check_extended_tab
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
35B2  96FB                    LDA <_Ttmp33
35B4  8407                    ANDA #7
35B6  E486                    ANDB A,X
35B8  2702                    BEQ _label80end
35BA  C6FF                    LDB #$ff
35BC                  _label80end
35BC  F735C0                  STB _Ttmp78
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp78
35BF  C600                    LDB #1-1
35C0                  _Ttmp78 equ *-1
                              IF (((128+_label81e0-(*+2))|(127-_label81e0+(*+2)))&0x8000)
35C1  102702B9                LBEQ _label81e0
                              ELSE
                              BEQ _label81e0
                              ENDIF
35C5                  _label81t
35C5  F64C10                  LDB _draw__c
35C8  F74BB9                  STB _PEN
                              IF (((128+plot_after-(*+2))|(127-plot_after+(*+2)))&0x8000)
35CB  7E386A                  JMP plot_after
                              ELSE
                              BRA plot_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                            PLOT ROUTINE FOR 6847                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
0041                  PLOTX   EQU $41 ; $42
0043                  PLOTY   EQU $43
0045                  PLOTM   EQU $45
0046                  PLOTOMA EQU $46
0047                  PLOTAMA EQU $47
                      ;--------------
35CE                  PLOT
35CE  FC0043                  LDD PLOTY
                      ; peephole(13): inlined1
                      ;       CMPD CLIPY2
35D1  108300C7                CMPD #199
35D3                  CLIPY2 equ *-2
35D5  2F03                    BLE PLOTCLIP2
35D7  7E3845                  JMP PLOTP
35DA                  PLOTCLIP2
                      ; peephole(13): inlined1
                      ;       CMPD CLIPY1
35DA  10830000                CMPD #0
35DC                  CLIPY1 equ *-2
35DE  2C03                    BGE PLOTCLIP3
35E0  7E3845                  JMP PLOTP
35E3                  PLOTCLIP3
35E3  FC0041                  LDD PLOTX
                      ; peephole(13): inlined1
                      ;       CMPD CLIPX2
35E6  1083013F                CMPD #319
35E8                  CLIPX2 equ *-2
35EA  2F03                    BLE PLOTCLIP4
35EC  7E3845                  JMP PLOTP
35EF                  PLOTCLIP4
                      ; peephole(13): inlined1
                      ;       CMPD CLIPX1
35EF  10830000                CMPD #0
35F1                  CLIPX1 equ *-2
35F3  2C03                    BGE PLOTCLIP5
35F5  7E3845                  JMP PLOTP
35F8                  PLOTCLIP5
35F8                  PLOTMODE
35F8  B62D54                  LDA CURRENTMODE
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
35FB  2603                    BNE PLOT0X
35FD  7E3663                  JMP PLOT0
3600                  PLOT0X
3600  8101                    CMPA #1
3602  2603                    BNE PLOT1X
3604  7E3663                  JMP PLOT1
3607                  PLOT1X
3607  8102                    CMPA #2
3609  2603                    BNE PLOT2X
360B  7E3664                  JMP PLOT2
360E                  PLOT2X
360E  8103                    CMPA #3
3610  2603                    BNE PLOT3X
3612  7E3665                  JMP PLOT3
3615                  PLOT3X
3615  8104                    CMPA #4
3617  2603                    BNE PLOT4X
3619  7E3666                  JMP PLOT4
361C                  PLOT4X
361C  8105                    CMPA #5
361E  2603                    BNE PLOT5X
3620  7E3667                  JMP PLOT5
3623                  PLOT5X
3623  8106                    CMPA #6
3625  2603                    BNE PLOT6X
3627  7E3668                  JMP PLOT6
362A                  PLOT6X
362A  8107                    CMPA #7
362C  2603                    BNE PLOT7X
362E  7E3669                  JMP PLOT7
3631                  PLOT7X
3631  8108                    CMPA #8
3633  2603                    BNE PLOT8X
3635  7E369E                  JMP PLOT8
3638                  PLOT8X
3638  8109                    CMPA #9
363A  2603                    BNE PLOT9X
363C  7E36CC                  JMP PLOT9
363F                  PLOT9X
363F  810A                    CMPA #10
3641  2603                    BNE PLOT10X
3643  7E3703                  JMP PLOT10
3646                  PLOT10X
3646  810B                    CMPA #11
3648  2603                    BNE PLOT11X
364A  7E3731                  JMP PLOT11
364D                  PLOT11X
364D  810C                    CMPA #12
364F  2603                    BNE PLOT12X
3651  7E3768                  JMP PLOT12
3654                  PLOT12X
3654  810D                    CMPA #13
3656  2603                    BNE PLOT13X
3658  7E3796                  JMP PLOT13
365B                  PLOT13X
365B  810E                    CMPA #14
365D  2603                    BNE PLOT14X
365F  7E37CD                  JMP PLOT14
3662                  PLOT14X
3662  39                      RTS
3663                  PLOT0
3663                  PLOT1
3663  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 4 mode translates bits 0 through 3 into a 4 x 6 dot 
                      ; element in the standard 8 x 12 dot box. Three data bits may be used to select
                      ; one of eight colors for the entire character box. The extra bit is used to 
                      ; switch to alphanumeric. A 512 byte display memory is required. A density of 
                      ; 64 x 32 elements is available in the display area. The element area is four
                      ; dot-clocks wide by six lines high.
3664                  PLOT2
3664  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 6 mode maps six 4 x 4 dot elements into the standard
                      ; 8 x 12 dot alphanumeric box, a screen density of 64 x 48 elements is available. 
                      ; Six bits are used to generate this map and two data bits may be used to select 
                      ; one of four colors in the display box. A 512 byte display memory is required. 
                      ; The element area is four dot-clocks wide by four lines high.
3665                  PLOT3
3665  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 8 mode maps eight 4 x 3 dot elements into the 
                      ; standard 8 x 12 dot box. This mode requires four memory locations per box 
                      ; and each memory location may specify one of eight colors or black. 
                      ; A 2048 byte display memory is required. A density of 64 x 64 elements is 
                      ; available in the display area. The element area is four dot-clocks wide 
                      ; by three lines high.
3666                  PLOT4
3666  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 12 mode maps twelve 4 x 2 dot elements into the 
                      ; standard 8 x 12 dot box. This mode requires six memory locations per box and 
                      ; each memory location may specify one of eight colors or black. A 3072 byte 
                      ; display memory is required. A density of 64 x 96 elements is available in the
                      ; display area. The element area is four dot-clocks wide by two lineshigh.
3667                  PLOT5
3667  39                      RTS
                      ; The ALPHA SEMIGRAPHICS – 24 mode maps twenty-four 4 x 1 dot elements into 
                      ; the standard 8 x 12 dot box. This mode requires twelve memory locations 
                      ; per box and each memory location may specify one of eight colors or black. 
                      ; A 6144 byte display memory is required. A density of 64 x 192
                      ; elements is available in the display are. The element area is four 
                      ; dot-clocks wide by one line high.
3668                  PLOT6
3668  39                      RTS
                      ; The 64 x 64 Color Graphics mode generates a display matrix of 64 
                      ; elements wide by 64 elements high. Each element may be one of four 
                      ; colors. A 1K x 8 display memory is required. Each pixel equals 
                      ; four dot-clocks by three scan lines.
3669                  PLOT7
3669  BE2C0C                  LDX BITMAPADDRESS
366C  FC0043                  LDD PLOTY
366F  58                      LSLB
3670  49                      ROLA
3671  58                      LSLB
3672  49                      ROLA
3673  58                      LSLB
3674  49                      ROLA
3675  58                      LSLB
3676  49                      ROLA
3677  308B                    LEAX D,X 
3679  FC0041                  LDD PLOTX
367C  44                      LSRA
367D  56                      RORB
367E  44                      LSRA
367F  56                      RORB
3680  308B                    LEAX D,X 
3682  108E3856                LDY #PLOTORBIT40
3686  F64BB9                  LDB _PEN
3689  C403                    ANDB #$03
368B  58                      LSLB
368C  58                      LSLB
368D  31A5                    LEAY B,Y 
368F  F60042                  LDB PLOTX+1
3692  C403                    ANDB #$03
3694  31A5                    LEAY B,Y 
3696  CE3866                  LDU #PLOTANDBIT4
3699  33C5                    LEAU B,U 
369B  7E37FE                  JMP PLOTCOMMON
                      ; The 128 x 64 Graphics Mode generates a matrix 128 elements wide 
                      ; by 64 elements high. Each element may be either ON or OFF. However, 
                      ; the entire display may be one of two colors, selected by using the 
                      ; color set select pin. A 1K x 8 display memory is required. Each 
                      ; pixel equals two dotclocks by three scan lines.
369E                  PLOT8
369E  BE2C0C                  LDX BITMAPADDRESS
36A1  FC0043                  LDD PLOTY
36A4  58                      LSLB
36A5  49                      ROLA
36A6  58                      LSLB
36A7  49                      ROLA
36A8  58                      LSLB
36A9  49                      ROLA
36AA  58                      LSLB
36AB  49                      ROLA
36AC  308B                    LEAX D,X 
36AE  FC0041                  LDD PLOTX
36B1  44                      LSRA
36B2  56                      RORB
36B3  44                      LSRA
36B4  56                      RORB
36B5  44                      LSRA
36B6  56                      RORB
36B7  308B                    LEAX D,X 
36B9  108E3846                LDY #PLOTORBIT
36BD  F60042                  LDB PLOTX+1
36C0  C407                    ANDB #$07
36C2  31A5                    LEAY B,Y 
36C4  CE384E                  LDU #PLOTANDBIT
36C7  33C5                    LEAU B,U 
36C9  7E37FE                  JMP PLOTCOMMON
                      ; The 128 x 64 Color Graphics mode generates a display matrix 128 
                      ; elements wide by 64 elements high. Each element may be one of four 
                      ; colors. A 2K x 8 display memory is required. Each pixel equals
                      ; two dot-clocks by three scan lines.
36CC                  PLOT9
36CC  BE2C0C                  LDX BITMAPADDRESS
36CF  FC0043                  LDD PLOTY
36D2  58                      LSLB
36D3  49                      ROLA
36D4  58                      LSLB
36D5  49                      ROLA
36D6  58                      LSLB
36D7  49                      ROLA
36D8  58                      LSLB
36D9  49                      ROLA
36DA  58                      LSLB
36DB  49                      ROLA
36DC  308B                    LEAX D,X 
36DE  FC0041                  LDD PLOTX
36E1  44                      LSRA
36E2  56                      RORB
36E3  44                      LSRA
36E4  56                      RORB
36E5  308B                    LEAX D,X 
36E7  108E3856                LDY #PLOTORBIT40
36EB  F64BB9                  LDB _PEN
36EE  C403                    ANDB #$03
36F0  58                      LSLB
36F1  58                      LSLB
36F2  31A5                    LEAY B,Y 
36F4  F60042                  LDB PLOTX+1
36F7  C403                    ANDB #$03
36F9  31A5                    LEAY B,Y 
36FB  CE3866                  LDU #PLOTANDBIT4
36FE  33C5                    LEAU B,U 
3700  7E37FE                  JMP PLOTCOMMON
                      ; The 128 x 96 Graphics mode generates a display matrix 128 
                      ; elements wide by 96 elements high. Each element may be either 
                      ; ON or OFF. However, the entire display may be one of two colors
                      ; selected by using the color select pin. A 2K x 8 display memory 
                      ; is required. Each pixel equals two dot-clocks by two scan lines.
3703                  PLOT10
3703  BE2C0C                  LDX BITMAPADDRESS
3706  FC0043                  LDD PLOTY
3709  58                      LSLB
370A  49                      ROLA
370B  58                      LSLB
370C  49                      ROLA
370D  58                      LSLB
370E  49                      ROLA
370F  58                      LSLB
3710  49                      ROLA
3711  308B                    LEAX D,X 
3713  FC0041                  LDD PLOTX
3716  44                      LSRA
3717  56                      RORB
3718  44                      LSRA
3719  56                      RORB
371A  44                      LSRA
371B  56                      RORB
371C  308B                    LEAX D,X 
371E  108E3846                LDY #PLOTORBIT
3722  F60042                  LDB PLOTX+1
3725  C407                    ANDB #$07
3727  31A5                    LEAY B,Y 
3729  CE384E                  LDU #PLOTANDBIT
372C  33C5                    LEAU B,U 
372E  7E37FE                  JMP PLOTCOMMON
                      ; The 128 x 96 Color Graphics mode generates a display 128 elements 
                      ; wide by 96 elements high. Each element may be one of four colors. 
                      ; A 3K x 8 display memory is required. Each pixel equals two 
                      ; dot-clocks by two scan lines.
3731                  PLOT11
3731  BE2C0C                  LDX BITMAPADDRESS
3734  FC0043                  LDD PLOTY
3737  58                      LSLB
3738  49                      ROLA
3739  58                      LSLB
373A  49                      ROLA
373B  58                      LSLB
373C  49                      ROLA
373D  58                      LSLB
373E  49                      ROLA
373F  58                      LSLB
3740  49                      ROLA
3741  308B                    LEAX D,X 
3743  FC0041                  LDD PLOTX
3746  44                      LSRA
3747  56                      RORB
3748  44                      LSRA
3749  56                      RORB
374A  308B                    LEAX D,X 
374C  108E3856                LDY #PLOTORBIT40
3750  F64BB9                  LDB _PEN
3753  C403                    ANDB #$03
3755  58                      LSLB
3756  58                      LSLB
3757  31A5                    LEAY B,Y 
3759  F60042                  LDB PLOTX+1
375C  C403                    ANDB #$03
375E  31A5                    LEAY B,Y 
3760  CE3866                  LDU #PLOTANDBIT4
3763  33C5                    LEAU B,U 
3765  7E37FE                  JMP PLOTCOMMON
                      ; The 128 x 192 Graphics mode generates a display matrix 128 elements 
                      ; wide by 192 elements high. Each element may be either ON or OFF,
                      ; but the ON elements may be one of two colors selected with color 
                      ; set select pin. A 3K x 8 display memory is required. Each pixel 
                      ; equals two dot-clocks by one scan line.
3768                  PLOT12
3768  BE2C0C                  LDX BITMAPADDRESS
376B  FC0043                  LDD PLOTY
376E  58                      LSLB
376F  49                      ROLA
3770  58                      LSLB
3771  49                      ROLA
3772  58                      LSLB
3773  49                      ROLA
3774  58                      LSLB
3775  49                      ROLA
3776  308B                    LEAX D,X 
3778  FC0041                  LDD PLOTX
377B  44                      LSRA
377C  56                      RORB
377D  44                      LSRA
377E  56                      RORB
377F  44                      LSRA
3780  56                      RORB
3781  308B                    LEAX D,X 
3783  108E3846                LDY #PLOTORBIT
3787  F60042                  LDB PLOTX+1
378A  C407                    ANDB #$07
378C  31A5                    LEAY B,Y 
378E  CE384E                  LDU #PLOTANDBIT
3791  33C5                    LEAU B,U 
3793  7E37FE                  JMP PLOTCOMMON
                      ;  The 128 x 192 Color Graphics mode generates a display 128 elements 
                      ;  wide by 192 elements high. Each element may be one of four colors.
                      ;  A 6K x 8 display memory is required. Each pixel equals two dot-clocks 
                      ;  by one scan line.
3796                  PLOT13
3796  BE2C0C                  LDX BITMAPADDRESS
3799  FC0043                  LDD PLOTY
379C  58                      LSLB
379D  49                      ROLA
379E  58                      LSLB
379F  49                      ROLA
37A0  58                      LSLB
37A1  49                      ROLA
37A2  58                      LSLB
37A3  49                      ROLA
37A4  58                      LSLB
37A5  49                      ROLA
37A6  308B                    LEAX D,X 
37A8  FC0041                  LDD PLOTX
37AB  44                      LSRA
37AC  56                      RORB
37AD  44                      LSRA
37AE  56                      RORB
37AF  308B                    LEAX D,X 
37B1  108E3856                LDY #PLOTORBIT40
37B5  F64BB9                  LDB _PEN
37B8  C403                    ANDB #$03
37BA  58                      LSLB
37BB  58                      LSLB
37BC  31A5                    LEAY B,Y 
37BE  F60042                  LDB PLOTX+1
37C1  C403                    ANDB #$03
37C3  31A5                    LEAY B,Y 
37C5  CE3866                  LDU #PLOTANDBIT4
37C8  33C5                    LEAU B,U 
37CA  7E37FE                  JMP PLOTCOMMON
                      ; The 256 x 192 Graphics mode generates a display 256 elements wide by 
                      ; 192 elements high. Each element may be either ON or OFF, but the ON 
                      ; element may be one of two colors selected with the color set select pin. 
                      ; A 6K x 8 display memory is required. Each pixel equals one 
                      ; dot-clock by one scan line.
37CD                  PLOT14
37CD  BE2C0C                  LDX BITMAPADDRESS
37D0  FC0043                  LDD PLOTY
37D3  58                      LSLB
37D4  49                      ROLA
37D5  58                      LSLB
37D6  49                      ROLA
37D7  58                      LSLB
37D8  49                      ROLA
37D9  58                      LSLB
37DA  49                      ROLA
37DB  58                      LSLB
37DC  49                      ROLA
37DD  308B                    LEAX D,X 
37DF  FC0041                  LDD PLOTX
37E2  44                      LSRA
37E3  56                      RORB
37E4  44                      LSRA
37E5  56                      RORB
37E6  44                      LSRA
37E7  56                      RORB
37E8  308B                    LEAX D,X 
37EA  108E3846                LDY #PLOTORBIT
37EE  F60042                  LDB PLOTX+1
37F1  C407                    ANDB #$07
37F3  31A5                    LEAY B,Y 
37F5  CE384E                  LDU #PLOTANDBIT
37F8  33C5                    LEAU B,U 
37FA  7E37FE                  JMP PLOTCOMMON
37FD  39                      RTS
37FE                  PLOTCOMMON
                          ;----------------------------------------------
                          ;depending on PLOTM, routine draws or erases
                          ;----------------------------------------------
37FE  B60045                  LDA PLOTM                  ;(0 = erase, 1 = set, 2 = get pixel, 3 = get color)
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
3801  271A                    BEQ PLOTE                  ;if = 0 then branch to clear the point
3803  8101                    CMPA #1
3805  270B                    BEQ PLOTD                  ;if = 1 then branch to draw the point
3807  8102                    CMPA #2
3809  271B                    BEQ PLOTG                  ;if = 2 then branch to get the point (0/1)
380B  8103                    CMPA #3
380D  272E                    BEQ PLOTC                  ;if = 3 then branch to get the color index (0...15)
380F  7E3845                  JMP PLOTP
3812                  PLOTD
                          ;---------
                          ;set point
                          ;---------
3812  A684                    LDA ,X            ;get row with point in it
3814  A4C4                    ANDA ,U 
3816  AAA4                    ORA ,Y                ;isolate AND set the point
3818  A784                    STA ,X            ;write back to $A000
381A  7E3845                  JMP PLOTP                  ;skip the erase-point section
                          ;-----------
                          ;erase point
                          ;-----------
381D                  PLOTE                          ;handled same way as setting a point
381D  A684                    LDA ,X            ;get row with point in it
381F  A4C4                    ANDA ,U 
3821  A784                    STA ,X            ;write back to $A000
3823  7E3845                  JMP PLOTP                  ;skip the erase-point section
3826                  PLOTG      
3826  A684                    LDA ,X            ;get row with point in it
3828  A4C4                    ANDA ,U 
382A  8100                    CMPA #0
382C  2708                    BEQ PLOTG0
382E                  PLOTG1
382E  86FF                    LDA #$ff
3830  B70045                  STA PLOTM
3833  7E3845                  JMP PLOTP
3836                  PLOTG0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
3836  4F                      CLRA
3837  B70045                  STA PLOTM
383A  7E3845                  JMP PLOTP            
383D                  PLOTC                          
383D  A684                    LDA ,X            ;get row with point in it
383F  B70045                  STA PLOTM
3842  7E3845                  JMP PLOTP
3845                  PLOTP
3845  39                      RTS
                      ;----------------------------------------------------------------
3846                  PLOTORBIT
3846  80                      fcb %10000000
3847  40                      fcb %01000000
3848  20                      fcb %00100000
3849  10                      fcb %00010000
384A  08                      fcb %00001000
384B  04                      fcb %00000100
384C  02                      fcb %00000010
384D  01                      fcb %00000001
384E                  PLOTANDBIT
384E  7F                      fcb %01111111
384F  BF                      fcb %10111111
3850  DF                      fcb %11011111
3851  EF                      fcb %11101111
3852  F7                      fcb %11110111
3853  FB                      fcb %11111011
3854  FD                      fcb %11111101
3855  FE                      fcb %11111110
3856                  PLOTORBIT40
3856  00                      fcb %00000000
3857  00                      fcb %00000000
3858  00                      fcb %00000000
3859  00                      fcb %00000000
385A                  PLOTORBIT41
385A  40                      fcb %01000000
385B  10                      fcb %00010000
385C  04                      fcb %00000100
385D  01                      fcb %00000001
385E                  PLOTORBIT42
385E  80                      fcb %10000000
385F  20                      fcb %00100000
3860  08                      fcb %00001000
3861  02                      fcb %00000010
3862                  PLOTORBIT43
3862  C0                      fcb %11000000
3863  30                      fcb %00110000
3864  0C                      fcb %00001100
3865  03                      fcb %00000011
3866                  PLOTANDBIT4
3866  3F                      fcb %00111111
3867  CF                      fcb %11001111
3868  F3                      fcb %11110011
3869  FC                      fcb %11111100
386A                  plot_after
386A  BE4C78                  LDX _Ttmp46
386D  BF0041                  STX PLOTX
3870  FC4C7A                  LDD _Ttmp47
3873  FD0043                  STD PLOTY
3876  8601                    LDA #1
3878  B70045                  STA PLOTM
387B  BD35CE                  JSR PLOT
387E                  _label81f
387E                  _label81e0
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp33
387E  0CFB                    INC <_Ttmp33
3880  5F                      CLRB
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
3881  96FB                    LDA <_Ttmp33
3883  B14C6F                  CMPA _Ttmp32
3886  2601                    BNE _label85
3888  5A                      DECB
3889                  _label85
3889  F7388D                  STB _Ttmp84
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp84
388C  C600                    LDB #1-1
388D                  _Ttmp84 equ *-1
                              IF (((128+_label86e0-(*+2))|(127-_label86e0+(*+2)))&0x8000)
                              LBEQ _label86e0
                              ELSE
388E  2703                    BEQ _label86e0
                              ENDIF
3890                  _label86t
3890  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp33
3891  97FB                    STA <_Ttmp33
3893                  _label86f
3893                  _label86e0
3893  5F                      CLRB
3894  BE4C87                  LDX _Ttmp73
3897  BC4C85                  CMPX _Ttmp72
389A  2F01                    BLE _label89
389C  5A                      DECB
389D                  _label89
389D  F74C8D                  STB _Ttmp88
38A0  F64C8D                  LDB _Ttmp88
                              IF (((128+_label90e0-(*+2))|(127-_label90e0+(*+2)))&0x8000)
38A3  102700EA                LBEQ _label90e0
                              ELSE
                              BEQ _label90e0
                              ENDIF
38A7                  _label90t
38A7  FC4C85                  LDD _Ttmp72
38AA  B34C7C                  SUBD _Ttmp48
38AD  FD38B1                  STD _Ttmp91
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp91
38B0  CC0000                  LDD #1-1
38B1                  _Ttmp91 equ *-2
38B3  FD4C76                  STD _Ttmp45
38B6                  _label93
38B6  5F                      CLRB
38B7  BE4C78                  LDX _Ttmp46
38BA  BC4C0C                  CMPX _draw__x1
38BD  2601                    BNE _label96
38BF  5A                      DECB
38C0                  _label96
38C0  F74C8E                  STB _Ttmp95
38C3  F64C8E                  LDB _Ttmp95
38C6  53                      COMB
38C7  F74C8F                  STB _Ttmp97
38CA  F64C8F                  LDB _Ttmp97
                              IF (((128+_label93bis-(*+2))|(127-_label93bis+(*+2)))&0x8000)
38CD  102700BD                LBEQ _label93bis
                              ELSE
                              BEQ _label93bis
                              ENDIF
38D1  FC4C80                  LDD _Ttmp52
38D4  F34C78                  ADDD _Ttmp46
38D7  FD4C15                  STD _Ttmp11
38DA  FC4C15                  LDD _Ttmp11
38DD  FD4C78                  STD _Ttmp46
38E0  5F                      CLRB
38E1  BE4C76                  LDX _Ttmp45
38E4  BC4C74                  CMPX _Ttmp44
38E7  2D01                    BLT _label101
38E9  5A                      DECB
38EA                  _label101
38EA  F74C90                  STB _Ttmp100
38ED  F64C90                  LDB _Ttmp100
                              IF (((128+_label102e0-(*+2))|(127-_label102e0+(*+2)))&0x8000)
                              LBEQ _label102e0
                              ELSE
38F0  271E                    BEQ _label102e0
                              ENDIF
38F2                  _label102t
38F2  FC4C82                  LDD _Ttmp53
38F5  F34C7A                  ADDD _Ttmp47
38F8  FD4C17                  STD _Ttmp12
38FB  FC4C17                  LDD _Ttmp12
38FE  FD4C7A                  STD _Ttmp47
3901  FC4C76                  LDD _Ttmp45
3904  B34C87                  SUBD _Ttmp73
3907  FD390B                  STD _Ttmp104
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp104
390A  CC0000                  LDD #1-1
390B                  _Ttmp104 equ *-2
390D  FD4C76                  STD _Ttmp45
3910                  _label102f
3910                  _label102e0
3910  FC4C85                  LDD _Ttmp72
3913  F34C76                  ADDD _Ttmp45
3916  FD391A                  STD _Ttmp106
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp106
3919  CC0000                  LDD #1-1
391A                  _Ttmp106 equ *-2
391C  FD4C76                  STD _Ttmp45
391F  CC0000                  LDD #$0000
3922  FD4C91                  STD _Ttmp108
3925  FD4C93                  STD _Ttmp108+2
3928  FC2D17                  LDD LINE
392B  FD4C93                  STD _Ttmp108+2
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
392E  96FB                    LDA <_Ttmp33
3930  F64C94                  LDB _Ttmp108+3
3933  8108                    CMPA #8
3935  2511                    BLO _label114eval
3937  F64C93                  LDB _Ttmp108+2
393A  8110                    CMPA #16
393C  250A                    BLO _label114eval
393E  F64C92                  LDB _Ttmp108+1
3941  8118                    CMPA #24
3943  2503                    BLO _label114eval
3945  F64C91                  LDB _Ttmp108
3948                  _label114eval
3948  8E358D                  LDX #bit_check_extended_tab
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
394B  96FB                    LDA <_Ttmp33
394D  8407                    ANDA #7
394F  E486                    ANDB A,X
3951  2702                    BEQ _label114end
3953  C6FF                    LDB #$ff
3955                  _label114end
3955  F73959                  STB _Ttmp112
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp112
3958  C600                    LDB #1-1
3959                  _Ttmp112 equ *-1
                              IF (((128+_label115e0-(*+2))|(127-_label115e0+(*+2)))&0x8000)
                              LBEQ _label115e0
                              ELSE
395A  271A                    BEQ _label115e0
                              ENDIF
395C                  _label115t
395C  F64C10                  LDB _draw__c
395F  F74BB9                  STB _PEN
3962  BE4C78                  LDX _Ttmp46
3965  BF0041                  STX PLOTX
3968  FC4C7A                  LDD _Ttmp47
396B  FD0043                  STD PLOTY
396E  8601                    LDA #1
3970  B70045                  STA PLOTM
3973  BD35CE                  JSR PLOT
3976                  _label115f
3976                  _label115e0
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp33
3976  0CFB                    INC <_Ttmp33
3978  5F                      CLRB
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
3979  96FB                    LDA <_Ttmp33
397B  B14C6F                  CMPA _Ttmp32
397E  2601                    BNE _label119
3980  5A                      DECB
3981                  _label119
3981  F73985                  STB _Ttmp118
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp118
3984  C600                    LDB #1-1
3985                  _Ttmp118 equ *-1
                              IF (((128+_label120e0-(*+2))|(127-_label120e0+(*+2)))&0x8000)
                              LBEQ _label120e0
                              ELSE
3986  2703                    BEQ _label120e0
                              ENDIF
3988                  _label120t
3988  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp33
3989  97FB                    STA <_Ttmp33
398B                  _label120f
398B                  _label120e0
                              IF (((128+_label93-(*+2))|(127-_label93+(*+2)))&0x8000)
398B  7E38B6                  JMP _label93
                              ELSE
                              BRA _label93
                              ENDIF
398E                  _label93bis
                              IF (((128+_label90f-(*+2))|(127-_label90f+(*+2)))&0x8000)
398E  7E3A80                  JMP _label90f
                              ELSE
                              BRA _label90f
                              ENDIF
3991                  _label90e0
3991  F64C8D                  LDB _Ttmp88
                              IF (((128+_label90f-(*+2))|(127-_label90f+(*+2)))&0x8000)
3994  102600E8                LBNE _label90f
                              ELSE
                              BNE _label90f
                              ENDIF
3998  FC4C87                  LDD _Ttmp73
399B  B34C7E                  SUBD _Ttmp49
399E  FD39A2                  STD _Ttmp121
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp121
39A1  CC0000                  LDD #1-1
39A2                  _Ttmp121 equ *-2
39A4  FD4C76                  STD _Ttmp45
39A7                  _label123
39A7  5F                      CLRB
39A8  BE4C7A                  LDX _Ttmp47
39AB  BC4C0E                  CMPX _draw__y1
39AE  2601                    BNE _label126
39B0  5A                      DECB
39B1                  _label126
39B1  F74C95                  STB _Ttmp125
39B4  F64C95                  LDB _Ttmp125
39B7  53                      COMB
39B8  F74C96                  STB _Ttmp127
39BB  F64C96                  LDB _Ttmp127
                              IF (((128+_label123bis-(*+2))|(127-_label123bis+(*+2)))&0x8000)
39BE  102700BE                LBEQ _label123bis
                              ELSE
                              BEQ _label123bis
                              ENDIF
39C2  5F                      CLRB
39C3  BE4C76                  LDX _Ttmp45
39C6  BC4C74                  CMPX _Ttmp44
39C9  2D01                    BLT _label130
39CB  5A                      DECB
39CC                  _label130
39CC  F74C97                  STB _Ttmp129
39CF  F64C97                  LDB _Ttmp129
                              IF (((128+_label131e0-(*+2))|(127-_label131e0+(*+2)))&0x8000)
                              LBEQ _label131e0
                              ELSE
39D2  271E                    BEQ _label131e0
                              ENDIF
39D4                  _label131t
39D4  FC4C80                  LDD _Ttmp52
39D7  F34C78                  ADDD _Ttmp46
39DA  FD39DE                  STD _Ttmp132
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp132
39DD  CC0000                  LDD #1-1
39DE                  _Ttmp132 equ *-2
39E0  FD4C78                  STD _Ttmp46
39E3  FC4C76                  LDD _Ttmp45
39E6  B34C85                  SUBD _Ttmp72
39E9  FD39ED                  STD _Ttmp134
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp134
39EC  CC0000                  LDD #1-1
39ED                  _Ttmp134 equ *-2
39EF  FD4C76                  STD _Ttmp45
39F2                  _label131f
39F2                  _label131e0
39F2  FC4C82                  LDD _Ttmp53
39F5  F34C7A                  ADDD _Ttmp47
39F8  FD39FC                  STD _Ttmp136
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp136
39FB  CC0000                  LDD #1-1
39FC                  _Ttmp136 equ *-2
39FE  FD4C7A                  STD _Ttmp47
3A01  FC4C87                  LDD _Ttmp73
3A04  F34C76                  ADDD _Ttmp45
3A07  FD3A0B                  STD _Ttmp138
                      ; peephole(13): inlined1
                      ;       LDD _Ttmp138
3A0A  CC0000                  LDD #1-1
3A0B                  _Ttmp138 equ *-2
3A0D  FD4C76                  STD _Ttmp45
3A10  CC0000                  LDD #$0000
3A13  FD4C98                  STD _Ttmp140
3A16  FD4C9A                  STD _Ttmp140+2
3A19  FC2D17                  LDD LINE
3A1C  FD4C9A                  STD _Ttmp140+2
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
3A1F  96FB                    LDA <_Ttmp33
3A21  F64C9B                  LDB _Ttmp140+3
3A24  8108                    CMPA #8
3A26  2511                    BLO _label146eval
3A28  F64C9A                  LDB _Ttmp140+2
3A2B  8110                    CMPA #16
3A2D  250A                    BLO _label146eval
3A2F  F64C99                  LDB _Ttmp140+1
3A32  8118                    CMPA #24
3A34  2503                    BLO _label146eval
3A36  F64C98                  LDB _Ttmp140
3A39                  _label146eval
3A39  8E358D                  LDX #bit_check_extended_tab
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
3A3C  96FB                    LDA <_Ttmp33
3A3E  8407                    ANDA #7
3A40  E486                    ANDB A,X
3A42  2702                    BEQ _label146end
3A44  C6FF                    LDB #$ff
3A46                  _label146end
3A46  F73A4A                  STB _Ttmp144
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp144
3A49  C600                    LDB #1-1
3A4A                  _Ttmp144 equ *-1
                              IF (((128+_label147e0-(*+2))|(127-_label147e0+(*+2)))&0x8000)
                              LBEQ _label147e0
                              ELSE
3A4B  271A                    BEQ _label147e0
                              ENDIF
3A4D                  _label147t
3A4D  F64C10                  LDB _draw__c
3A50  F74BB9                  STB _PEN
3A53  BE4C78                  LDX _Ttmp46
3A56  BF0041                  STX PLOTX
3A59  FC4C7A                  LDD _Ttmp47
3A5C  FD0043                  STD PLOTY
3A5F  8601                    LDA #1
3A61  B70045                  STA PLOTM
3A64  BD35CE                  JSR PLOT
3A67                  _label147f
3A67                  _label147e0
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp33
3A67  0CFB                    INC <_Ttmp33
3A69  5F                      CLRB
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
3A6A  96FB                    LDA <_Ttmp33
3A6C  B14C6F                  CMPA _Ttmp32
3A6F  2601                    BNE _label151
3A71  5A                      DECB
3A72                  _label151
3A72  F74C9C                  STB _Ttmp150
3A75  F64C9C                  LDB _Ttmp150
                              IF (((128+_label152e0-(*+2))|(127-_label152e0+(*+2)))&0x8000)
                              LBEQ _label152e0
                              ELSE
3A78  2703                    BEQ _label152e0
                              ENDIF
3A7A                  _label152t
3A7A  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp33
3A7B  97FB                    STA <_Ttmp33
3A7D                  _label152f
3A7D                  _label152e0
                              IF (((128+_label123-(*+2))|(127-_label123+(*+2)))&0x8000)
3A7D  7E39A7                  JMP _label123
                              ELSE
                              BRA _label123
                              ENDIF
3A80                  _label123bis
3A80                  _label90f
3A80                  _label90e1
3A80  39                      RTS
3A81                  draw_after
                      ; peephole(13): direct-page1
                      ;       LDD _Ttmp5
3A81  DCFE                    LDD <_Ttmp5
3A83  FD4C08                  STD _draw__x0
3A86  FC4C65                  LDD _Ttmp19
3A89  FD4C0A                  STD _draw__y0
3A8C  FC4C69                  LDD _Ttmp23
3A8F  FD4C0C                  STD _draw__x1
3A92  FC4C70                  LDD _Ttmp41
3A95  FD4C0E                  STD _draw__y1
3A98  F64BB9                  LDB _PEN
3A9B  F74C10                  STB _draw__c
                              IF (((128+lib_draw-(*+2))|(127-lib_draw+(*+2)))&0x8000)
3A9E  BD34B8                  JSR lib_draw
                              ELSE
                              BSR lib_draw
                              ENDIF
3AA1  FC4BBC                  LDD _mid1
3AA4  FD2D15                  STD XGR
3AA7  CC0000                  LDD #$0000
                      ; peephole(6): unread1
                      ;       STD YGR
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp1
3AAA  97F0                    STA <_Ttmp1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
3AAC  F64C6C                  LDB _Ttmp25
                      ; peephole(6): unread1
                      ;       STB YGR+1
                              ; P:932
                              ; L:27
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
3AAF  5F                      CLRB
3AB0  FD4C65                  STD _Ttmp19
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
3AB3  D6F0                    LDB <_Ttmp1
3AB5  F74C66                  STB _Ttmp19+1
3AB8  FC4C65                  LDD _Ttmp19
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp5
3ABB  DDFE                    STD <_Ttmp5
3ABD  C660                    LDB #$60
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp21
3ABF  D7F9                    STB <_Ttmp21
3AC1  CC0000                  LDD #$0000
3AC4  FD4C69                  STD _Ttmp23
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
3AC7  D6F9                    LDB <_Ttmp21
3AC9  F74C6A                  STB _Ttmp23+1
3ACC  FC4C69                  LDD _Ttmp23
3ACF  FD4C67                  STD _Ttmp22
3AD2  CC0140                  LDD #$0140
3AD5  FD4C63                  STD _Ttmp18
3AD8  FC4C63                  LDD _Ttmp18
3ADB  FD4C70                  STD _Ttmp41
3ADE  F64C70                  LDB _Ttmp41
3AE1  C47F                    ANDB #$7f
3AE3  F74C70                  STB _Ttmp41
3AE6  C660                    LDB #$60
3AE8  F74C6E                  STB _Ttmp30
3AEB  CC0000                  LDD #$0000
3AEE  FD4C74                  STD _Ttmp44
3AF1  F64C6E                  LDB _Ttmp30
3AF4  F74C75                  STB _Ttmp44+1
3AF7  FC4C74                  LDD _Ttmp44
3AFA  FD4C72                  STD _Ttmp42
                      ; peephole(13): direct-page1
                      ;       LDD _Ttmp5
3AFD  DCFE                    LDD <_Ttmp5
3AFF  FD4C08                  STD _draw__x0
3B02  FC4C67                  LDD _Ttmp22
3B05  FD4C0A                  STD _draw__y0
3B08  FC4C70                  LDD _Ttmp41
3B0B  FD4C0C                  STD _draw__x1
3B0E  FC4C72                  LDD _Ttmp42
3B11  FD4C0E                  STD _draw__y1
3B14  F64BB9                  LDB _PEN
3B17  F74C10                  STB _draw__c
                              IF (((128+lib_draw-(*+2))|(127-lib_draw+(*+2)))&0x8000)
3B1A  BD34B8                  JSR lib_draw
                              ELSE
                              BSR lib_draw
                              ENDIF
3B1D  FC4C63                  LDD _Ttmp18
3B20  FD2D15                  STD XGR
3B23  F62D15                  LDB XGR
3B26  C47F                    ANDB #$7f
3B28  F72D15                  STB XGR
3B2B  CC0000                  LDD #$0000
                      ; peephole(6): unread1
                      ;       STD YGR
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp1
3B2E  97F0                    STA <_Ttmp1
                      ; peephole(7): r365 (LOAD/CLR,LOAD)->(LOAD)
                      ;       LDB _Ttmp30
                      ; peephole(6): unread1
                      ;       STB YGR+1
                              ; P:55
                              ; L:28
                              ; P:0
                              ; L:29
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
3B30  F64BBB                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
3B33  C47F                    ANDB #$7f
3B35  F700D3                  STB XCURSYS
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
3B38  D6F0                    LDB <_Ttmp1
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
3B3A  C47F                    ANDB #$7f
3B3C  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:30
3B3F  F64D20                  LDB _Tstr166
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
3B42  D7F0                    STB <_Ttmp1
3B44  CC4D20                  LDD #_Tstr166
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
3B47  DDF2                    STD <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp169+1
3B49  0CF3                    INC <_Ttmp169+1
3B4B  2602                    BNE _label170
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp169
3B4D  0CF2                    INC <_Ttmp169
3B4F                  _label170
                              IF (((128+vScrollText_after-(*+2))|(127-vScrollText_after+(*+2)))&0x8000)
3B4F  7E3C17                  JMP vScrollText_after
                              ELSE
                              BRA vScrollText_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                          VERTICAL SCROLL ON 6847                            *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
3B52                  VSCROLLT
3B52  B62D54                  LDA CURRENTMODE
3B55  8102                    CMPA #2
3B57  2203                    BHI VSCROLLTX
3B59  7E3B5D                  JMP VSCROLLTT
3B5C                  VSCROLLTX
3B5C  39                      RTS
3B5D                  VSCROLLTT
3B5D  3476                    PSHS A,B,X,Y,U
3B5F  B6004A                  LDA DIRECTION
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0
3B62  2E5E                    BGT VSCROLLTDOWN
3B64                  VSCROLLTUP
3B64  BE2D87                  LDX TEXTADDRESS
3B67  10BE2D87                LDY TEXTADDRESS
3B6B  31A820                  LEAY 32,Y 
3B6E                  VSCROLLTUPYSCR
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3B6E  5F                      CLRB
3B6F                  VSCROLLTUPYSCR1
3B6F  A6A5                    LDA B,Y
3B71  A785                    STA B,X
3B73  5C                      INCB
3B74  C17F                    CMPB #$7F
3B76  26F7                    BNE VSCROLLTUPYSCR1
3B78  30887F                  LEAX 127,X 
3B7B  31A87F                  LEAY 127,Y 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3B7E  5F                      CLRB
3B7F                  VSCROLLTUPYSCR2
3B7F  A6A5                    LDA B,Y
3B81  A785                    STA B,X
3B83  5C                      INCB
3B84  C17F                    CMPB #$7F
3B86  26F7                    BNE VSCROLLTUPYSCR2
3B88  30887F                  LEAX 127,X 
3B8B  31A87F                  LEAY 127,Y 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3B8E  5F                      CLRB
3B8F                  VSCROLLTUPYSCR3
3B8F  A6A5                    LDA B,Y
3B91  A785                    STA B,X
3B93  5C                      INCB
3B94  C17F                    CMPB #$7F
3B96  26F7                    BNE VSCROLLTUPYSCR3
3B98  30887F                  LEAX 127,X 
3B9B  31A87F                  LEAY 127,Y 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3B9E  5F                      CLRB
3B9F                  VSCROLLTUPYSCR4
3B9F  A6A5                    LDA B,Y
3BA1  A785                    STA B,X
3BA3  5C                      INCB
3BA4  C163                    CMPB #$63
3BA6  26F7                    BNE VSCROLLTUPYSCR4
3BA8  30887F                  LEAX 127,X 
3BAB  31A87F                  LEAY 127,Y 
3BAE  3088E4                  LEAX -28,X 
3BB1  31A8E4                  LEAY -28,Y 
3BB4  B62C12                  LDA EMPTYTILE
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3BB7  5F                      CLRB
3BB8                  VSCROLLTUPREFILL
3BB8  A785                    STA B,X
3BBA  5C                      INCB
3BBB  C120                    CMPB #32
3BBD  26F9                    BNE VSCROLLTUPREFILL
3BBF  7E3C14                  JMP VSCROLLTE
3BC2                  VSCROLLTDOWN
3BC2  BE2D87                  LDX TEXTADDRESS
3BC5  10BE2D87                LDY TEXTADDRESS
3BC9  31A820                  LEAY 32,Y 
3BCC  30887F                  LEAX 127,X 
3BCF  30887F                  LEAX 127,X 
3BD2  31A87F                  LEAY 127,Y 
3BD5  31A87F                  LEAY 127,Y 
3BD8  30887F                  LEAX 127,X 
3BDB  30887F                  LEAX 127,X 
3BDE  31A87F                  LEAY 127,Y 
3BE1  31A87F                  LEAY 127,Y 
3BE4  C67F                    LDB #$7F
3BE6                  VSCROLLTDOWNYS31
3BE6  A685                    LDA B,X
3BE8  A7A5                    STA B,Y
3BEA  5A                      DECB
3BEB  C100                    CMPB #0
3BED  26F7                    BNE VSCROLLTDOWNYS31
3BEF  308881                  LEAX -127,X 
3BF2  31A881                  LEAY -127,Y 
3BF5  C67F                    LDB #$7F
3BF7                  VSCROLLTDOWNYS32
3BF7  A685                    LDA B,X
3BF9  A7A5                    STA B,Y
3BFB  5A                      DECB
3BFC  C100                    CMPB #0
3BFE  26F7                    BNE VSCROLLTDOWNYS32
3C00  308881                  LEAX -127,X 
3C03  31A881                  LEAY -127,Y 
3C06  B62C12                  LDA EMPTYTILE
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDB #0
3C09  5F                      CLRB
3C0A                  VSCROLLTDOWNREFILL
3C0A  A785                    STA B,X
3C0C  5C                      INCB
3C0D  C120                    CMPB #32
3C0F  26F9                    BNE VSCROLLTDOWNREFILL
3C11  7E3C14                  JMP VSCROLLTE
3C14                  VSCROLLTE
3C14  3576                    PULS A,B,X,Y,U
3C16  39                      RTS
3C17                  vScrollText_after
                              IF (((128+textEncodedAt_after-(*+2))|(127-textEncodedAt_after+(*+2)))&0x8000)
                              JMP textEncodedAt_after
                              ELSE
3C17  202A                    BRA textEncodedAt_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      TEXT AT GIVEN POSITION ON 6847                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
0001                  TEXTPTR equ $01
0003                  TEXTSIZE equ $03
0004                  TABSTODRAW equ $04
0008                  SCREENCODE equ $08
3C19                  TEXTATDECODE
3C19  811F                    CMPA #$1F
3C1B  2206                    BHI TEXTATDECODEX1F
3C1D  B60020                  LDA 32
3C20  7E3C3F                  JMP TEXTATDECODE0
3C23                  TEXTATDECODEX1F
3C23  8140                    CMPA #$40
3C25  2405                    BHS TEXTATDECODEX39
3C27  8B40                    ADDA #$40
3C29  7E3C3F                  JMP TEXTATDECODE0
3C2C                  TEXTATDECODEX39
3C2C  815F                    CMPA #$5F
3C2E  2203                    BHI TEXTATDECODEX5A
                          ; SUBA #$40
3C30  7E3C3F                  JMP TEXTATDECODE0
3C33                  TEXTATDECODEX5A
3C33  817F                    CMPA #$7F
3C35  2205                    BHI TEXTATDECODEX7F
3C37  8060                    SUBA #$60
3C39  7E3C3F                  JMP TEXTATDECODE0
3C3C                  TEXTATDECODEX7F
                          ; LDA #$60
3C3C  7E3C3F                  JMP TEXTATDECODE0
3C3F                  TEXTATDECODE0
3C3F  B70008                  STA SCREENCODE
3C42  39                      RTS
3C43                  textEncodedAt_after
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
3C43  109EF2                  LDY <_Ttmp169
3C46  10BF0001                STY TEXTPTR
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp1
3C4A  96F0                    LDA <_Ttmp1
3C4C  B70003                  STA TEXTSIZE
                              IF (((128+textEncodedAtGraphic_after-(*+2))|(127-textEncodedAtGraphic_after+(*+2)))&0x8000)
3C4F  7E4068                  JMP textEncodedAtGraphic_after
                              ELSE
                              BRA textEncodedAtGraphic_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo
                      ;  *
                      ;  * http//www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      TEXT AT GIVEN POSITION ON 6847                         *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
3C52                  TEXTATBITMAPMODE
3C52  B60003                  LDA TEXTSIZE
3C55  2601                    BNE TEXTATBMGO
3C57  39                      RTS
3C58                  TEXTATBMGO
3C58  10BE2D87                LDY TEXTADDRESS
3C5C  10BF0041                STY COPYOFTEXTADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3C60  4F                      CLRA
3C61  B70004                  STA TABSTODRAW
3C64  10BE0001                LDY TEXTPTR
3C68  B62D54                  LDA CURRENTMODE
3C6B  8107                    CMPA #7
3C6D  2603                    BNE TEXTAT7X
3C6F  7E3E12                  JMP TEXTAT7
3C72                  TEXTAT7X
3C72  8108                    CMPA #8
3C74  2603                    BNE TEXTAT8X
3C76  7E3E18                  JMP TEXTAT8
3C79                  TEXTAT8X
3C79  8109                    CMPA #9
3C7B  2603                    BNE TEXTAT9X
3C7D  7E3E1E                  JMP TEXTAT9
3C80                  TEXTAT9X
3C80  810A                    CMPA #10
3C82  2603                    BNE TEXTAT10X
3C84  7E3E24                  JMP TEXTAT10
3C87                  TEXTAT10X
3C87  810B                    CMPA #11
3C89  2603                    BNE TEXTAT11X
3C8B  7E3E2A                  JMP TEXTAT11
3C8E                  TEXTAT11X
3C8E  810C                    CMPA #12
3C90  2603                    BNE TEXTAT12X
3C92  7E3E30                  JMP TEXTAT12
3C95                  TEXTAT12X
3C95  810D                    CMPA #13
3C97  2603                    BNE TEXTAT13X
3C99  7E3E36                  JMP TEXTAT13
3C9C                  TEXTAT13X
3C9C  810E                    CMPA #14
3C9E  2603                    BNE TEXTAT14X
3CA0  7E3E3C                  JMP TEXTAT14
3CA3                  TEXTAT14X
3CA3  39                      RTS
3CA4                  CALCPOSG
3CA4  B62D54                  LDA CURRENTMODE
3CA7  8107                    CMPA #7
3CA9  2604                    BNE CALCPOS7X
3CAB  BD3CE8                  JSR CALCPOS7
3CAE  39                      RTS
3CAF                  CALCPOS7X
3CAF  8108                    CMPA #8
3CB1  2604                    BNE CALCPOS8X
3CB3  BD3D0D                  JSR CALCPOS8
3CB6  39                      RTS
3CB7                  CALCPOS8X
3CB7  8109                    CMPA #9
3CB9  2604                    BNE CALCPOS9X
3CBB  BD3D32                  JSR CALCPOS9
3CBE  39                      RTS
3CBF                  CALCPOS9X
3CBF  810A                    CMPA #10
3CC1  2604                    BNE CALCPOS10X
3CC3  BD3D59                  JSR CALCPOS10
3CC6  39                      RTS
3CC7                  CALCPOS10X
3CC7  810B                    CMPA #11
3CC9  2604                    BNE CALCPOS11X
3CCB  BD3D7C                  JSR CALCPOS11
3CCE  39                      RTS
3CCF                  CALCPOS11X
3CCF  810C                    CMPA #12
3CD1  2604                    BNE CALCPOS12X
3CD3  BD3DA3                  JSR CALCPOS12
3CD6  39                      RTS
3CD7                  CALCPOS12X
3CD7  810D                    CMPA #13
3CD9  2604                    BNE CALCPOS13X
3CDB  BD3DC8                  JSR CALCPOS13
3CDE  39                      RTS
3CDF                  CALCPOS13X
3CDF  810E                    CMPA #14
3CE1  2604                    BNE CALCPOS14X
3CE3  BD3DEF                  JSR CALCPOS14
3CE6  39                      RTS
3CE7                  CALCPOS14X
3CE7  39                      RTS
3CE8                  CALCPOS7
3CE8  8601                    LDA #1
3CEA  B7004A                  STA PATTERN
3CED  BE2C0C                  LDX BITMAPADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3CF0  4F                      CLRA
3CF1  F600D6                  LDB YCURSYS
3CF4  58                      LSLB
3CF5  49                      ROLA
3CF6  58                      LSLB
3CF7  49                      ROLA
3CF8  58                      LSLB
3CF9  49                      ROLA
3CFA  58                      LSLB
3CFB  49                      ROLA
3CFC  58                      LSLB
3CFD  49                      ROLA
3CFE  58                      LSLB
3CFF  49                      ROLA
3D00  58                      LSLB
3D01  49                      ROLA
3D02  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D04  4F                      CLRA
3D05  F600D3                  LDB XCURSYS
3D08  58                      LSLB
3D09  49                      ROLA
3D0A  308B                    LEAX D,X 
3D0C  39                      RTS
3D0D                  CALCPOS8
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D0D  4F                      CLRA
3D0E  B7004A                  STA PATTERN
3D11  BE2C0C                  LDX BITMAPADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
                      ; peephole(2): r738 [A=0](CLRA)->()
                      ;       CLRA
3D14  F600D6                  LDB YCURSYS
3D17  58                      LSLB
3D18  49                      ROLA
3D19  58                      LSLB
3D1A  49                      ROLA
3D1B  58                      LSLB
3D1C  49                      ROLA
3D1D  58                      LSLB
3D1E  49                      ROLA
3D1F  58                      LSLB
3D20  49                      ROLA
3D21  58                      LSLB
3D22  49                      ROLA
3D23  58                      LSLB
3D24  49                      ROLA
3D25  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D27  4F                      CLRA
3D28  F600D3                  LDB XCURSYS
3D2B  58                      LSLB
3D2C  49                      ROLA
3D2D  58                      LSLB
3D2E  49                      ROLA
3D2F  308B                    LEAX D,X 
3D31  39                      RTS
3D32                  CALCPOS9
3D32  8601                    LDA #1
3D34  B7004A                  STA PATTERN
3D37  BE2C0C                  LDX BITMAPADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D3A  4F                      CLRA
3D3B  F600D6                  LDB YCURSYS
3D3E  58                      LSLB
3D3F  49                      ROLA
3D40  58                      LSLB
3D41  49                      ROLA
3D42  58                      LSLB
3D43  49                      ROLA
3D44  58                      LSLB
3D45  49                      ROLA
3D46  58                      LSLB
3D47  49                      ROLA
3D48  58                      LSLB
3D49  49                      ROLA
3D4A  58                      LSLB
3D4B  49                      ROLA
3D4C  58                      LSLB
3D4D  49                      ROLA
3D4E  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D50  4F                      CLRA
3D51  F600D3                  LDB XCURSYS
3D54  58                      LSLB
3D55  49                      ROLA
3D56  308B                    LEAX D,X 
3D58  39                      RTS
3D59                  CALCPOS10
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D59  4F                      CLRA
3D5A  B7004A                  STA PATTERN
3D5D  BE2C0C                  LDX BITMAPADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
                      ; peephole(2): r738 [A=0](CLRA)->()
                      ;       CLRA
3D60  F600D6                  LDB YCURSYS
3D63  58                      LSLB
3D64  49                      ROLA
3D65  58                      LSLB
3D66  49                      ROLA
3D67  58                      LSLB
3D68  49                      ROLA
3D69  58                      LSLB
3D6A  49                      ROLA
3D6B  58                      LSLB
3D6C  49                      ROLA
3D6D  58                      LSLB
3D6E  49                      ROLA
3D6F  58                      LSLB
3D70  49                      ROLA
3D71  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D73  4F                      CLRA
3D74  F600D3                  LDB XCURSYS
3D77  58                      LSLB
3D78  49                      ROLA
3D79  308B                    LEAX D,X 
3D7B  39                      RTS
3D7C                  CALCPOS11
3D7C  8601                    LDA #1
3D7E  B7004A                  STA PATTERN
3D81  BE2C0C                  LDX BITMAPADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D84  4F                      CLRA
3D85  F600D6                  LDB YCURSYS
3D88  58                      LSLB
3D89  49                      ROLA
3D8A  58                      LSLB
3D8B  49                      ROLA
3D8C  58                      LSLB
3D8D  49                      ROLA
3D8E  58                      LSLB
3D8F  49                      ROLA
3D90  58                      LSLB
3D91  49                      ROLA
3D92  58                      LSLB
3D93  49                      ROLA
3D94  58                      LSLB
3D95  49                      ROLA
3D96  58                      LSLB
3D97  49                      ROLA
3D98  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3D9A  4F                      CLRA
3D9B  F600D3                  LDB XCURSYS
3D9E  58                      LSLB
3D9F  49                      ROLA
3DA0  308B                    LEAX D,X 
3DA2  39                      RTS
3DA3                  CALCPOS12
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3DA3  4F                      CLRA
3DA4  B7004A                  STA PATTERN
3DA7  BE2C0C                  LDX BITMAPADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
                      ; peephole(2): r738 [A=0](CLRA)->()
                      ;       CLRA
3DAA  F600D6                  LDB YCURSYS
3DAD  58                      LSLB
3DAE  49                      ROLA
3DAF  58                      LSLB
3DB0  49                      ROLA
3DB1  58                      LSLB
3DB2  49                      ROLA
3DB3  58                      LSLB
3DB4  49                      ROLA
3DB5  58                      LSLB
3DB6  49                      ROLA
3DB7  58                      LSLB
3DB8  49                      ROLA
3DB9  58                      LSLB
3DBA  49                      ROLA
3DBB  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3DBD  4F                      CLRA
3DBE  F600D3                  LDB XCURSYS
3DC1  58                      LSLB
3DC2  49                      ROLA
3DC3  58                      LSLB
3DC4  49                      ROLA
3DC5  308B                    LEAX D,X 
3DC7  39                      RTS
3DC8                  CALCPOS13
3DC8  8601                    LDA #1
3DCA  B7004A                  STA PATTERN
3DCD  BE2C0C                  LDX BITMAPADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3DD0  4F                      CLRA
3DD1  F600D6                  LDB YCURSYS
3DD4  58                      LSLB
3DD5  49                      ROLA
3DD6  58                      LSLB
3DD7  49                      ROLA
3DD8  58                      LSLB
3DD9  49                      ROLA
3DDA  58                      LSLB
3DDB  49                      ROLA
3DDC  58                      LSLB
3DDD  49                      ROLA
3DDE  58                      LSLB
3DDF  49                      ROLA
3DE0  58                      LSLB
3DE1  49                      ROLA
3DE2  58                      LSLB
3DE3  49                      ROLA
3DE4  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3DE6  4F                      CLRA
3DE7  F600D3                  LDB XCURSYS
3DEA  58                      LSLB
3DEB  49                      ROLA
3DEC  308B                    LEAX D,X 
3DEE  39                      RTS
3DEF                  CALCPOS14
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3DEF  4F                      CLRA
3DF0  B7004A                  STA PATTERN
3DF3  BE2C0C                  LDX BITMAPADDRESS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
                      ; peephole(2): r738 [A=0](CLRA)->()
                      ;       CLRA
3DF6  F600D6                  LDB YCURSYS
3DF9  58                      LSLB
3DFA  49                      ROLA
3DFB  58                      LSLB
3DFC  49                      ROLA
3DFD  58                      LSLB
3DFE  49                      ROLA
3DFF  58                      LSLB
3E00  49                      ROLA
3E01  58                      LSLB
3E02  49                      ROLA
3E03  58                      LSLB
3E04  49                      ROLA
3E05  58                      LSLB
3E06  49                      ROLA
3E07  58                      LSLB
3E08  49                      ROLA
3E09  308B                    LEAX D,X 
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3E0B  4F                      CLRA
3E0C  F600D3                  LDB XCURSYS
3E0F  308B                    LEAX D,X 
3E11  39                      RTS
                      ;-----------------------------------------------------------------------------
                      ; BITMAP MODE
                      ;-----------------------------------------------------------------------------
                      ; The 64 x 64 Color Graphics mode generates a display matrix of 64 
                      ; elements wide by 64 elements high. Each element may be one of four 
                      ; colors. A 1K x 8 display memory is required. Each pixel equals 
                      ; four dot-clocks by three scan lines.
3E12                  TEXTAT7
3E12  BD3CE8                  JSR CALCPOS7
3E15  7E3E42                  JMP TEXTATBMCOMMON
                      ; The 128 x 64 Graphics Mode generates a matrix 128 elements wide 
                      ; by 64 elements high. Each element may be either ON or OFF. However, 
                      ; the entire display may be one of two colors, selected by using the 
                      ; color set select pin. A 1K x 8 display memory is required. Each 
                      ; pixel equals two dotclocks by three scan lines.
3E18                  TEXTAT8
3E18  BD3D0D                  JSR CALCPOS8
3E1B  7E3E42                  JMP TEXTATBMCOMMON
                      ; The 128 x 64 Color Graphics mode generates a display matrix 128 
                      ; elements wide by 64 elements high. Each element may be one of four 
                      ; colors. A 2K x 8 display memory is required. Each pixel equals
                      ; two dot-clocks by three scan lines.
3E1E                  TEXTAT9
3E1E  BD3D32                  JSR CALCPOS9
3E21  7E3E42                  JMP TEXTATBMCOMMON
                      ; The 128 x 96 Graphics mode generates a display matrix 128 
                      ; elements wide by 96 elements high. Each element may be either 
                      ; ON or OFF. However, the entire display may be one of two colors
                      ; selected by using the color select pin. A 2K x 8 display memory 
                      ; is required. Each pixel equals two dot-clocks by two scan lines.
3E24                  TEXTAT10
3E24  BD3D59                  JSR CALCPOS10
3E27  7E3E42                  JMP TEXTATBMCOMMON
                      ; The 128 x 96 Color Graphics mode generates a display 128 elements 
                      ; wide by 96 elements high. Each element may be one of four colors. 
                      ; A 3K x 8 display memory is required. Each pixel equals two 
                      ; dot-clocks by two scan lines.
3E2A                  TEXTAT11
3E2A  BD3D7C                  JSR CALCPOS11
3E2D  7E3E42                  JMP TEXTATBMCOMMON
                      ; The 128 x 192 Graphics mode generates a display matrix 128 elements 
                      ; wide by 192 elements high. Each element may be either ON or OFF
                      ; but the ON elements may be one of two colors selected with color 
                      ; set select pin. A 3K x 8 display memory is required. Each pixel 
                      ; equals two dot-clocks by one scan line.
3E30                  TEXTAT12
3E30  BD3DA3                  JSR CALCPOS12
3E33  7E3E42                  JMP TEXTATBMCOMMON
                      ;  The 128 x 192 Color Graphics mode generates a display 128 elements 
                      ;  wide by 192 elements high. Each element may be one of four colors.
                      ;  A 6K x 8 display memory is required. Each pixel equals two dot-clocks 
                      ;  by one scan line.
3E36                  TEXTAT13
3E36  BD3DC8                  JSR CALCPOS13
3E39  7E3E42                  JMP TEXTATBMCOMMON
                      ; The 256 x 192 Graphics mode generates a display 256 elements wide by 
                      ; 192 elements high. Each element may be either ON or OFF, but the ON 
                      ; element may be one of two colors selected with the color set select pin. 
                      ; A 6K x 8 display memory is required. Each pixel equals one 
                      ; dot-clock by one scan line.
3E3C                  TEXTAT14
3E3C  BD3DEF                  JSR CALCPOS14
3E3F  7E3E42                  JMP TEXTATBMCOMMON
3E42                  TEXTATBMCOMMON
                      ; peephole(13): inlined1
                      ;       LDA TEXTWW
3E42  8603                    LDA #3
3E43                  TEXTWW equ *-1
3E44  8402                    ANDA #$2
3E46  2740                    BEQ TEXTATBMCNOPEN
3E48  B64BB9                  LDA _PEN
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;    CMPA #0 ; COLOR_BLACK
3E4B  2729                    BEQ TEXTATC2
3E4D  8101                    CMPA #1 ; COLOR_GREEN
3E4F  272E                    BEQ TEXTATC3
3E51  8102                    CMPA #2 ; COLOR_YELLOW
3E53  2718                    BEQ TEXTATC1
3E55  8103                    CMPA #3 ; COLOR_BLUE
3E57  271D                    BEQ TEXTATC2
3E59  8104                    CMPA #4 ; COLOR_RED
3E5B  2722                    BEQ TEXTATC3
3E5D  8105                    CMPA #5 ; COLOR_WHITE
3E5F  270C                    BEQ TEXTATC1
3E61  8106                    CMPA #6 ; COLOR_CYAN
3E63  271A                    BEQ TEXTATC3
3E65  8107                    CMPA #7 ; COLOR_MAGENTA
3E67  2716                    BEQ TEXTATC3
3E69  8108                    CMPA #8 ; COLOR_ORANGE
3E6B  2712                    BEQ TEXTATC3
3E6D                  TEXTATC1
3E6D  CC4038                  LDD #TEXTATBMC1
3E70  FD0019                  STD MATHPTR5
3E73  7E3E88                  JMP TEXTATBMCNOPEN
3E76                  TEXTATC2
3E76  CC4048                  LDD #TEXTATBMC2
3E79  FD0019                  STD MATHPTR5
3E7C  7E3E88                  JMP TEXTATBMCNOPEN
3E7F                  TEXTATC3
3E7F  CC4058                  LDD #TEXTATBMC3
3E82  FD0019                  STD MATHPTR5
3E85  7E3E88                  JMP TEXTATBMCNOPEN
3E88                  TEXTATBMCNOPEN
3E88  F60003                  LDB TEXTSIZE
3E8B  10BE0001                LDY TEXTPTR
3E8F                  TEXTATBMLOOP2
3E8F  B60004                  LDA TABSTODRAW
3E92  2703                    BEQ TEXTATBMNSKIPTAB
3E94  7E3FFB                  JMP TEXTATBMSKIPTAB
3E97                  TEXTATBMNSKIPTAB
3E97  A6A4                    LDA ,Y
3E99  B70008                  STA SCREENCODE
3E9C  817F                    CMPA #$7f
3E9E  270D                    BEQ TEXTATBMTAB
3EA0  810E                    CMPA #14
3EA2  2203                    BHI TEXTATBMXCC
3EA4  7E3ECA                  JMP TEXTATBMCC
3EA7                  TEXTATBMXCC
3EA7  BD3C19                  JSR TEXTATDECODE
3EAA  7E3F7F                  JMP TEXTATBMSP0
3EAD                  TEXTATBMTAB
3EAD  B600D3                  LDA XCURSYS
3EB0                  TEXTATBMTAB2
3EB0  B12C11                  CMPA TABCOUNT
3EB3  2406                    BCC TEXTATBMTAB3
3EB5  B02C11                  SUBA TABCOUNT
3EB8  7E3EB0                  JMP TEXTATBMTAB2
3EBB                  TEXTATBMTAB3
3EBB  B70010                  STA TMPPTR
3EBE  B62C11                  LDA TABCOUNT
3EC1  B00010                  SUBA TMPPTR
3EC4  B70004                  STA TABSTODRAW
3EC7  7E4027                  JMP TEXTATBMNEXT
3ECA                  TEXTATBMCC
3ECA  810D                    CMPA #13
3ECC  272B                    BEQ TEXTATBMLF
3ECE  810A                    CMPA #10
3ED0  2727                    BEQ TEXTATBMLF
3ED2  8109                    CMPA #09
3ED4  27D7                    BEQ TEXTATBMTAB
3ED6  8101                    CMPA #01
3ED8  2730                    BEQ TEXTATBMPEN
3EDA  8102                    CMPA #02
3EDC  274F                    BEQ TEXTATBMPAPER
3EDE  8103                    CMPA #03
3EE0  275D                    BEQ TEXTATBMCMOVEPREPARE
3EE2  8104                    CMPA #04
3EE4  2710                    BEQ TEXTATBMXAT
3EE6  8105                    CMPA #05
3EE8  2703                    BEQ TEXTATBMCLS
3EEA  7E4027                  JMP TEXTATBMNEXT
3EED                  TEXTATBMCLS
3EED  3121                    LEAY 1,Y
3EEF  5A                      DECB
3EF0  BD30ED                  JSR CLSG
3EF3  7E4027                  JMP TEXTATBMNEXT
3EF6                  TEXTATBMXAT
3EF6  7E3F65                  JMP TEXTATBMAT
3EF9                  TEXTATBMLF
3EF9  7C00D6                  INC YCURSYS
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
3EFC  4F                      CLRA
3EFD  B700D3                  STA XCURSYS
3F00  3426                    PSHS D,Y
3F02  BD3CA4                  JSR CALCPOSG
3F05  3526                    PULS D,Y
3F07  7E401D                  JMP TEXTATBMNEXT2A
                              
3F0A                  TEXTATBMPEN
3F0A  3121                    LEAY 1,Y
3F0C  5A                      DECB
3F0D  B63E43                  LDA TEXTWW
3F10  8402                    ANDA #$2
3F12  2716                    BEQ TEXTATBMPENDISABLED
3F14  A6A4                    LDA ,Y 
3F16  81FF                    CMPA #$FF
3F18  2601                    BNE TEXTATBMPEN2
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #$0
3F1A  4F                      CLRA
3F1B                  TEXTATBMPEN2
3F1B  783F1B                  ASL A
3F1E  783F1E                  ASL A
3F21  783F21                  ASL A
3F24  783F24                  ASL A
3F27  B74BB9                  STA _PEN
3F2A                  TEXTATBMPENDISABLED
3F2A  7E4027                  JMP TEXTATBMNEXT
3F2D                  TEXTATBMPAPER
3F2D  3121                    LEAY 1,Y
3F2F  5A                      DECB
3F30  B63E43                  LDA TEXTWW
3F33  8401                    ANDA #$1
3F35  2705                    BEQ TEXTATBMPAPERDISABLED
3F37  A6A4                    LDA ,Y 
3F39  B74BBA                  STA _PAPER
3F3C                  TEXTATBMPAPERDISABLED
3F3C  7E4027                  JMP TEXTATBMNEXT
3F3F                  TEXTATBMCMOVEPREPARE
3F3F  3121                    LEAY 1,Y
3F41  5A                      DECB
3F42  A6A4                    LDA ,Y 
3F44  B7004B                  STA CLINEX
3F47  3121                    LEAY 1,Y
3F49  301F                    LEAX -1,X
3F4B  A6A4                    LDA ,Y 
3F4D  B7004C                  STA CLINEY
3F50                  TEXTATBMCMOVE
3F50  B6004B                  LDA CLINEX
3F53  BB00D3                  ADDA XCURSYS
3F56  B700D3                  STA XCURSYS
3F59  B6004C                  LDA CLINEY
3F5C  BB00D6                  ADDA YCURSYS
3F5F  B700D6                  STA YCURSYS
3F62  7E4027                  JMP TEXTATBMNEXT
3F65                  TEXTATBMAT
3F65  3121                    LEAY 1,Y
3F67  5A                      DECB
3F68  A6A4                    LDA ,Y 
3F6A  B000D3                  SUBA XCURSYS
3F6D  B7004B                  STA CLINEX
3F70  3121                    LEAY 1,Y
3F72  301F                    LEAX -1,X
3F74  A6A4                    LDA ,Y 
3F76  B000D6                  SUBA YCURSYS
3F79  B7004C                  STA CLINEY
3F7C  7E3F50                  JMP TEXTATBMCMOVE
3F7F                  TEXTATBMSP0
3F7F  3436                    PSHS D,Y,X
3F81  CE0000                  LDU #0
3F84  108E4D2E                LDY #UDCCHAR
3F88  B60008                  LDA SCREENCODE
3F8B  843F                    ANDA #$3F
3F8D  C608                    LDB #8
3F8F  3D                      MUL
3F90  31AB                    LEAY D,Y 
3F92                  TEXTATBMSP0L1
3F92  B62D54                  LDA CURRENTMODE
3F95  8107                    CMPA #7
3F97  2713                    BEQ TEXTATBMSP0L1M
3F99  8109                    CMPA #9
3F9B  270F                    BEQ TEXTATBMSP0L1M
3F9D  810B                    CMPA #11
3F9F  270B                    BEQ TEXTATBMSP0L1M
3FA1  810D                    CMPA #13
3FA3  2707                    BEQ TEXTATBMSP0L1M
3FA5  A6A4                    LDA ,Y
3FA7  A784                    STA ,X
3FA9  7E3FD3                  JMP TEXTATBMSP0L1M2
3FAC                  TEXTATBMSP0L1M
3FAC  3410                    PSHS X
3FAE  BE0019                  LDX MATHPTR5
3FB1  A6A4                    LDA ,Y
3FB3  84F0                    ANDA #$F0
3FB5  44                      LSRA
3FB6  44                      LSRA
3FB7  44                      LSRA
3FB8  44                      LSRA
3FB9  A686                    LDA A,X 
3FBB  3510                    PULS X
3FBD  A784                    STA ,X 
3FBF  3001                    LEAX 1,X 
3FC1  3410                    PSHS X
3FC3  BE0019                  LDX MATHPTR5
3FC6  A6A4                    LDA ,Y
3FC8  840F                    ANDA #$0F
3FCA  A686                    LDA A,X 
3FCC  3510                    PULS X
3FCE  A784                    STA ,X 
3FD0  7E3FD3                  JMP TEXTATBMSP0L1M2
3FD3                  TEXTATBMSP0L1M2
                              
3FD3  B6331F                  LDA CURRENTSL
3FD6  3086                    LEAX A,X  
3FD8  1CFE                    ANDCC #$FE
3FDA  B6004A                  LDA PATTERN
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORA #$FF
3FDD  43                      COMA
3FDE  8B01                    ADDA #1
3FE0  3086                    LEAX A,X  
                              
3FE2  3121                    LEAY 1,Y 
3FE4  3341                    LEAU 1,U 
3FE6  11830008                CMPU #8
3FEA  2703                    BEQ TEXTATBMSP0L1X
3FEC  7E3F92                  JMP TEXTATBMSP0L1
3FEF                  TEXTATBMSP0L1X
3FEF  3536                    PULS D,Y,X
3FF1  B6004A                  LDA PATTERN
3FF4  3086                    LEAX A,X  
3FF6  3001                    LEAX 1,X 
3FF8  7E4001                  JMP TEXTATBMINCX
3FFB                  TEXTATBMSKIPTAB
3FFB  7A0004                  DEC TABSTODRAW
3FFE  7E4001                  JMP TEXTATBMINCX
4001                  TEXTATBMINCX
4001  7C00D3                  INC XCURSYS
4004  B600D3                  LDA XCURSYS
                      ; peephole(13): inlined1
                      ;       CMPA CURRENTTILESWIDTH
4007  8120                    CMPA #32
4008                  CURRENTTILESWIDTH equ *-1
4009  2703                    BEQ TEXTATBMNEXT2
400B  7E4027                  JMP TEXTATBMNEXT
400E                  TEXTATBMNEXT2
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
400E  4F                      CLRA
400F  B700D3                  STA XCURSYS
4012  7C00D6                  INC YCURSYS
4015  30887F                  LEAX 127,X 
4018  30887F                  LEAX 127,X 
401B  3002                    LEAX 2,X 
401D                  TEXTATBMNEXT2A
401D  B600D6                  LDA YCURSYS
                      ; peephole(13): inlined1
                      ;       CMPA CURRENTTILESHEIGHT
4020  8110                    CMPA #16
4021                  CURRENTTILESHEIGHT equ *-1
4022  2703                    BEQ TEXTATBMNEXT3
4024  7E4027                  JMP TEXTATBMNEXT
4027                  TEXTATBMNEXT3
                          ; scrolling ?
4027                  TEXTATBMNEXT
4027  B60004                  LDA TABSTODRAW
402A  2703                    BEQ TEXTATBMXLOOP2
402C  7E3E8F                  JMP TEXTATBMLOOP2
402F                  TEXTATBMXLOOP2
402F  3121                    LEAY 1,Y
4031  5A                      DECB
4032  2703                    BEQ TEXTATBMEND
4034  7E3E8F                  JMP TEXTATBMLOOP2
4037                  TEXTATBMEND
4037  39                      RTS
4038                  TEXTATBMC1
4038  00                      fcb   %00000000
4039  01                      fcb   %00000001
403A  04                      fcb   %00000100
403B  05                      fcb   %00000101
403C  10                      fcb   %00010000
403D  11                      fcb   %00010001
403E  14                      fcb   %00010100
403F  15                      fcb   %00010101
4040  40                      fcb   %01000000
4041  41                      fcb   %01000001
4042  44                      fcb   %01000100
4043  45                      fcb   %01000101
4044  50                      fcb   %01010000
4045  51                      fcb   %01010001
4046  54                      fcb   %01010100
4047  55                      fcb   %01010101
4048                  TEXTATBMC2
4048  00                      fcb   %00000000
4049  02                      fcb   %00000010
404A  08                      fcb   %00001000
404B  0A                      fcb   %00001010
404C  20                      fcb   %00100000
404D  22                      fcb   %00100010
404E  28                      fcb   %00101000
404F  2A                      fcb   %00101010
4050  80                      fcb   %10000000
4051  82                      fcb   %10000010
4052  88                      fcb   %10001000
4053  8A                      fcb   %10001010
4054  A0                      fcb   %10100000
4055  A2                      fcb   %10100010
4056  A8                      fcb   %10101000
4057  AA                      fcb   %10101010
4058                  TEXTATBMC3
4058  00                      fcb   %00000000
4059  03                      fcb   %00000011
405A  0C                      fcb   %00001100
405B  0F                      fcb   %00001111
405C  30                      fcb   %00110000
405D  33                      fcb   %00110011
405E  3C                      fcb   %00111100
405F  3F                      fcb   %00111111
4060  C0                      fcb   %11000000
4061  C3                      fcb   %11000011
4062  CC                      fcb   %11001100
4063  CF                      fcb   %11001111
4064  F0                      fcb   %11110000
4065  F3                      fcb   %11110011
4066  FC                      fcb   %11111100
4067  FF                      fcb   %11111111
4068                  textEncodedAtGraphic_after
4068  BD3C52                  JSR TEXTATBITMAPMODE
                              ; P:805
                              ; L:31
406B  C601                    LDB #$01
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
406D  D7F0                    STB <_Ttmp1
406F  F64BBB                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4072  C47F                    ANDB #$7f
4074  F700D3                  STB XCURSYS
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
4077  D6F0                    LDB <_Ttmp1
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
4079  C47F                    ANDB #$7f
407B  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:32
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp174
407E  C600                    LDB #1-1
407F                  _Ttmp174 equ *-1
4080  BD2DBD                  JSR DSFREE
4083  108E4D14                LDY #_Tstr172
4087  BD2DAB                  JSR DSDEFINE
408A  F7407F                  STB _Ttmp174
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp175
408D  C600                    LDB #1-1
408E                  _Ttmp175 equ *-1
408F  BD2DBD                  JSR DSFREE
4092  108E4D14                LDY #_Tstr172
4096  BD2DAB                  JSR DSDEFINE
4099  F7408E                  STB _Ttmp175
409C  F6408E                  LDB _Ttmp175
409F  BD2E11                  JSR DSDESCRIPTOR
40A2  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
40A4  DDF2                    STD <_Ttmp169
40A6  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp9
40A8  97FA                    STA <_Ttmp9
40AA  F62EAB                  LDB _batt
40AD  BD2E11                  JSR DSDESCRIPTOR
40B0  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
40B2  DDF7                    STD <_Ttmp177
40B4  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
40B6  97F1                    STA <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
40B8  D6FA                    LDB <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       ADDB _Ttmp13
40BA  DBF1                    ADDB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp21
40BC  D7F9                    STB <_Ttmp21
40BE  F64C9D                  LDB _Ttmp176
40C1  BD2DBD                  JSR DSFREE
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp21
40C4  96F9                    LDA <_Ttmp21
40C6  BD2E72                  JSR DSALLOC
40C9  F74C9D                  STB _Ttmp176
40CC  F64C9D                  LDB _Ttmp176
40CF  BD2E11                  JSR DSDESCRIPTOR
40D2  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp178
40D4  DDF4                    STD <_Ttmp178
40D6  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp21
40D8  97F9                    STA <_Ttmp21
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
40DA  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
40DB  D6FA                    LDB <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
40DD  109EF2                  LDY <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
40E0  9EF4                    LDX <_Ttmp178
40E2  BD3036                  JSR DUFFDEVICE
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
40E5  9EF4                    LDX <_Ttmp178
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
40E7  D6FA                    LDB <_Ttmp9
40E9  3A                      ABX
                      ; peephole(13): direct-page1
                      ;       STX _Ttmp178
40EA  9FF4                    STX <_Ttmp178
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
40EC  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
40ED  D6F1                    LDB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp177
40EF  109EF7                  LDY <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
40F2  9EF4                    LDX <_Ttmp178
40F4  BD3036                  JSR DUFFDEVICE
40F7  F64C9D                  LDB _Ttmp176
40FA  BD2E11                  JSR DSDESCRIPTOR
40FD  EC01                    LDD 1,X 
40FF  FD4C9E                  STD _Ttmp180
4102  A684                    LDA ,X 
4104  B74C6B                  STA _Ttmp24
4107  10BE4C9E                LDY _Ttmp180
410B  10BF0001                STY TEXTPTR
410F  B64C6B                  LDA _Ttmp24
4112  B70003                  STA TEXTSIZE
4115  BD3C52                  JSR TEXTATBITMAPMODE
4118  4F                      CLRA
4119  B700D3                  STA XCURSYS
411C  7C00D6                  INC YCURSYS
411F  F64021                  LDB CURRENTTILESHEIGHT
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
4122  D7FC                    STB <_Ttmp61
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp61
4124  D6FC                    LDB <_Ttmp61
4126  C47F                    ANDB #$7f
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
4128  D7FC                    STB <_Ttmp61
412A  5F                      CLRB
412B  B600D6                  LDA YCURSYS
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp61
412E  91FC                    CMPA <_Ttmp61
4130  2D01                    BLT _label184
4132  5A                      DECB
4133                  _label184
4133  F74C84                  STB _Ttmp67
4136  F64C84                  LDB _Ttmp67
                              IF (((128+_label182scroll-(*+2))|(127-_label182scroll+(*+2)))&0x8000)
                              LBNE _label182scroll
                              ELSE
4139  2602                    BNE _label182scroll
                              ENDIF
                              IF (((128+_label182end-(*+2))|(127-_label182end+(*+2)))&0x8000)
                              JMP _label182end
                              ELSE
413B  2011                    BRA _label182end
                              ENDIF
413D                  _label182scroll
413D  86FF                    LDA #$ff
413F  B7004A                  STA DIRECTION
4142  BD3B52                  JSR VSCROLLT
4145  F64021                  LDB CURRENTTILESHEIGHT
4148  F700D6                  STB YCURSYS
414B  7A00D6                  DEC YCURSYS
414E                  _label182end
                              ; P:95
                              ; L:33
414E  C602                    LDB #$02
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
4150  D7F0                    STB <_Ttmp1
4152  F64BBB                  LDB _xloc
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4155  C47F                    ANDB #$7f
4157  F700D3                  STB XCURSYS
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
415A  D6F0                    LDB <_Ttmp1
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
415C  C47F                    ANDB #$7f
415E  F700D6                  STB YCURSYS
                              ; P:12
                              ; L:34
                              ; P:0
                              ; L:35
                              ; P:0
                              ; L:36
                              ; P:0
                              ; L:37
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp189
4161  C600                    LDB #1-1
4162                  _Ttmp189 equ *-1
4163  BD2DBD                  JSR DSFREE
4166  108E4D08                LDY #_Tstr185
416A  BD2DAB                  JSR DSDEFINE
416D  F74162                  STB _Ttmp189
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp190
4170  C600                    LDB #1-1
4171                  _Ttmp190 equ *-1
4172  BD2DBD                  JSR DSFREE
4175  108E4D04                LDY #_Tstr187
4179  BD2DAB                  JSR DSDEFINE
417C  F74171                  STB _Ttmp190
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp191
417F  C600                    LDB #1-1
4180                  _Ttmp191 equ *-1
4181  BD2DBD                  JSR DSFREE
4184  108E4D08                LDY #_Tstr185
4188  BD2DAB                  JSR DSDEFINE
418B  F74180                  STB _Ttmp191
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp192
418E  C600                    LDB #1-1
418F                  _Ttmp192 equ *-1
4190  BD2DBD                  JSR DSFREE
4193  108E4D04                LDY #_Tstr187
4197  BD2DAB                  JSR DSDEFINE
419A  F7418F                  STB _Ttmp192
419D  F64180                  LDB _Ttmp191
41A0  BD2E11                  JSR DSDESCRIPTOR
41A3  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
41A5  DDF2                    STD <_Ttmp169
41A7  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp21
41A9  97F9                    STA <_Ttmp21
41AB  F6418F                  LDB _Ttmp192
41AE  BD2E11                  JSR DSDESCRIPTOR
41B1  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
41B3  DDF7                    STD <_Ttmp177
41B5  A684                    LDA ,X 
41B7  B74C6B                  STA _Ttmp24
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
41BA  D6F9                    LDB <_Ttmp21
41BC  FB4C6B                  ADDB _Ttmp24
41BF  F74C6C                  STB _Ttmp25
41C2  F64CA0                  LDB _Ttmp193
41C5  BD2DBD                  JSR DSFREE
41C8  B64C6C                  LDA _Ttmp25
41CB  BD2E72                  JSR DSALLOC
41CE  F74CA0                  STB _Ttmp193
41D1  F64CA0                  LDB _Ttmp193
41D4  BD2E11                  JSR DSDESCRIPTOR
41D7  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp178
41D9  DDF4                    STD <_Ttmp178
41DB  A684                    LDA ,X 
41DD  B74C6C                  STA _Ttmp25
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
41E0  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
41E1  D6F9                    LDB <_Ttmp21
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
41E3  109EF2                  LDY <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
41E6  9EF4                    LDX <_Ttmp178
41E8  BD3036                  JSR DUFFDEVICE
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
41EB  9EF4                    LDX <_Ttmp178
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
41ED  D6F9                    LDB <_Ttmp21
41EF  3A                      ABX
                      ; peephole(13): direct-page1
                      ;       STX _Ttmp178
41F0  9FF4                    STX <_Ttmp178
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
41F2  4F                      CLRA
41F3  F64C6B                  LDB _Ttmp24
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp177
41F6  109EF7                  LDY <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
41F9  9EF4                    LDX <_Ttmp178
41FB  BD3036                  JSR DUFFDEVICE
41FE  F64CA0                  LDB _Ttmp193
4201  BD2E11                  JSR DSDESCRIPTOR
4204  EC01                    LDD 1,X 
4206  FD4C9E                  STD _Ttmp180
4209  A684                    LDA ,X 
420B  B74C6D                  STA _Ttmp27
420E  10BE4C9E                LDY _Ttmp180
4212  10BF0001                STY TEXTPTR
4216  B64C6D                  LDA _Ttmp27
4219  B70003                  STA TEXTSIZE
421C  BD3C52                  JSR TEXTATBITMAPMODE
421F  4F                      CLRA
4220  B700D3                  STA XCURSYS
4223  7C00D6                  INC YCURSYS
4226  F64021                  LDB CURRENTTILESHEIGHT
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
4229  D7FC                    STB <_Ttmp61
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp61
422B  D6FC                    LDB <_Ttmp61
422D  C47F                    ANDB #$7f
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
422F  D7FC                    STB <_Ttmp61
4231  5F                      CLRB
4232  B600D6                  LDA YCURSYS
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp61
4235  91FC                    CMPA <_Ttmp61
4237  2D01                    BLT _label198
4239  5A                      DECB
423A                  _label198
423A  F74C84                  STB _Ttmp67
423D  F64C84                  LDB _Ttmp67
                              IF (((128+_label196scroll-(*+2))|(127-_label196scroll+(*+2)))&0x8000)
                              LBNE _label196scroll
                              ELSE
4240  2602                    BNE _label196scroll
                              ENDIF
                              IF (((128+_label196end-(*+2))|(127-_label196end+(*+2)))&0x8000)
                              JMP _label196end
                              ELSE
4242  2011                    BRA _label196end
                              ENDIF
4244                  _label196scroll
4244  86FF                    LDA #$ff
4246  B7004A                  STA DIRECTION
4249  BD3B52                  JSR VSCROLLT
424C  F64021                  LDB CURRENTTILESHEIGHT
424F  F700D6                  STB YCURSYS
4252  7A00D6                  DEC YCURSYS
4255                  _label196end
                              ; P:105
                              ; L:38
                              ; P:0
                              ; L:39
4255  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp1
4256  97F0                    STA <_Ttmp1
4258  C60D                    LDB #$0d
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp2
425A  D7FD                    STB <_Ttmp2
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
425C  D6F0                    LDB <_Ttmp1
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
425E  C47F                    ANDB #$7f
4260  F700D3                  STB XCURSYS
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp2
4263  D6FD                    LDB <_Ttmp2
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB YCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB YCURSYS
4265  C47F                    ANDB #$7f
4267  F700D6                  STB YCURSYS
                              ; P:14
                              ; L:40
426A  F64CF4                  LDB _Tstr199
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp1
426D  D7F0                    STB <_Ttmp1
426F  CC4CF4                  LDD #_Tstr199
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
4272  DDF2                    STD <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp169+1
4274  0CF3                    INC <_Ttmp169+1
4276  2602                    BNE _label202
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp169
4278  0CF2                    INC <_Ttmp169
427A                  _label202
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
427A  109EF2                  LDY <_Ttmp169
427D  10BF0001                STY TEXTPTR
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp1
4281  96F0                    LDA <_Ttmp1
4283  B70003                  STA TEXTSIZE
4286  BD3C52                  JSR TEXTATBITMAPMODE
                              ; P:13
                              ; L:41
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$0d
4289  CC000D                  LDD #$000d
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp1
428C  97F0                    STA <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp21
428E  97F9                    STA <_Ttmp21
4290  F7448C                  STB _Ttmp206
                      ;       CLRA
4293  C608                    LDB #$08
4295  F7446C                  STB _Ttmp210
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$20
                      ; peephole(2): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0020
4298  C620                    LDB #$20
429A  F74CA2                  STB _Ttmp208
                      ;       CLRA
429D  C62C                    LDB #$2c
429F  F7447B                  STB _Ttmp207
42A2  C620                    LDB #$20
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp9
42A4  D7FA                    STB <_Ttmp9
42A6  C68F                    LDB #$8f
42A8  F74CA3                  STB _Ttmp209
42AB  C68F                    LDB #$8f
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp2
42AD  D7FD                    STB <_Ttmp2
42AF  C601                    LDB #$01
42B1  F72C13                  STB KBDRATE
42B4  F64CA1                  LDB _Ttmp205
42B7  BD2DBD                  JSR DSFREE
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp9
42BA  96FA                    LDA <_Ttmp9
42BC  BD2E72                  JSR DSALLOC
42BF  F74CA1                  STB _Ttmp205
42C2  F64CA1                  LDB _Ttmp205
42C5  BD2E11                  JSR DSDESCRIPTOR
42C8  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
42CA  DDF2                    STD <_Ttmp169
42CC  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
42CE  97F1                    STA <_Ttmp13
42D0                  _label204repeat
                      ; peephole(13): direct-page1
                      ;       DEC _Ttmp2
42D0  0AFD                    DEC <_Ttmp2
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp2
42D2  D6FD                    LDB <_Ttmp2
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;       CMPB #$00
                              IF (((128+_label204skipcc-(*+2))|(127-_label204skipcc+(*+2)))&0x8000)
                              LBNE _label204skipcc
                              ELSE
42D4  2638                    BNE _label204skipcc
                              ENDIF
42D6  F64CA3                  LDB _Ttmp209
42D9  CB10                    ADDB #$10
42DB  F74CA3                  STB _Ttmp209
42DE  5F                      CLRB
42DF  B64CA3                  LDA _Ttmp209
42E2  818F                    CMPA #$008f
42E4  2401                    BHS _label214
42E6  5A                      DECB
42E7                  _label214
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
42E7  D7FC                    STB <_Ttmp61
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp61
42E9  D6FC                    LDB <_Ttmp61
                              IF (((128+_label212g-(*+2))|(127-_label212g+(*+2)))&0x8000)
                              LBEQ _label212g
                              ELSE
42EB  2707                    BEQ _label212g
                              ENDIF
42ED  C6E0                    LDB #$e0
42EF  F74CA3                  STB _Ttmp209
                              IF (((128+_label212e-(*+2))|(127-_label212e+(*+2)))&0x8000)
                              JMP _label212e
                              ELSE
42F2  2016                    BRA _label212e
                              ENDIF
42F4                  _label212g
42F4  5F                      CLRB
42F5  B64CA3                  LDA _Ttmp209
42F8  81E0                    CMPA #$00e0
42FA  2201                    BHI _label216
42FC  5A                      DECB
42FD                  _label216
42FD  F74C84                  STB _Ttmp67
4300  F64C84                  LDB _Ttmp67
                              IF (((128+_label212e-(*+2))|(127-_label212e+(*+2)))&0x8000)
                              LBNE _label212e
                              ELSE
4303  2605                    BNE _label212e
                              ENDIF
4305  C68F                    LDB #$8f
4307  F74CA3                  STB _Ttmp209
430A                  _label212e
430A  C680                    LDB #$80
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp2
430C  D7FD                    STB <_Ttmp2
430E                  _label204skipcc
430E  CC4CA3                  LDD #_Ttmp209
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
4311  DDF7                    STD <_Ttmp177
4313  C601                    LDB #$01
4315  F74C6B                  STB _Ttmp24
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp177
4318  109EF7                  LDY <_Ttmp177
431B  10BF0001                STY TEXTPTR
431F  B64C6B                  LDA _Ttmp24
4322  B70003                  STA TEXTSIZE
4325  BD3C52                  JSR TEXTATBITMAPMODE
4328  4F                      CLRA
4329  B74C6C                  STA _Ttmp25
432C  C6FF                    LDB #$ffffffff
432E  F7388D                  STB _Ttmp84
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp84
4331  FB00D3                  ADDB XCURSYS
4334  F700D3                  STB XCURSYS
4337  F64C6C                  LDB _Ttmp25
433A  F74C8D                  STB _Ttmp88
433D  F64C8D                  LDB _Ttmp88
4340  C47F                    ANDB #$7f
4342  F74C8D                  STB _Ttmp88
4345  5F                      CLRB
4346  B600D3                  LDA XCURSYS
4349  B14C8D                  CMPA _Ttmp88
434C  2C01                    BGE _label221
434E  5A                      DECB
434F                  _label221
434F  F74C8E                  STB _Ttmp95
4352  F64C8E                  LDB _Ttmp95
                              IF (((128+_label219g-(*+2))|(127-_label219g+(*+2)))&0x8000)
                              LBEQ _label219g
                              ELSE
4355  270A                    BEQ _label219g
                              ENDIF
4357  F64008                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
435A  C47F                    ANDB #$7f
435C  F700D3                  STB XCURSYS
                              IF (((128+_label219e-(*+2))|(127-_label219e+(*+2)))&0x8000)
                              JMP _label219e
                              ELSE
435F  2028                    BRA _label219e
                              ENDIF
4361                  _label219g
4361  F64008                  LDB CURRENTTILESWIDTH
4364  F74C8F                  STB _Ttmp97
4367  F64C8F                  LDB _Ttmp97
436A  C47F                    ANDB #$7f
436C  F74C8F                  STB _Ttmp97
436F  5F                      CLRB
4370  B600D3                  LDA XCURSYS
4373  B14C8F                  CMPA _Ttmp97
4376  2F01                    BLE _label223
4378  5A                      DECB
4379                  _label223
4379  F74C90                  STB _Ttmp100
437C  F64C90                  LDB _Ttmp100
                              IF (((128+_label219e-(*+2))|(127-_label219e+(*+2)))&0x8000)
                              LBEQ _label219e
                              ELSE
437F  2708                    BEQ _label219e
                              ENDIF
4381  F64C6C                  LDB _Ttmp25
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4384  C47F                    ANDB #$7f
4386  F700D3                  STB XCURSYS
4389                  _label219e
                              IF (((128+scancode_after-(*+2))|(127-scancode_after+(*+2)))&0x8000)
4389  7E440B                  JMP scancode_after
                              ELSE
                              BRA scancode_after
                              ENDIF
                      ; /*****************************************************************************
                      ;  * ugBASIC - an isomorphic BASIC language compiler for retrocomputers        *
                      ;  *****************************************************************************
                      ;  * Copyright 2021-2023 Marco Spedaletti (asimov@mclink.it)
                      ;  *
                      ;  * Licensed under the Apache License, Version 2.0 (the "License");
                      ;  * you may not use this file except in compliance with the License.
                      ;  * You may obtain a copy of the License at
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Unless required by applicable law or agreed to in writing, software
                      ;  * distributed under the License is distributed on an "AS IS" BASIS,
                      ;  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                      ;  * See the License for the specific language governing permissions and
                      ;  * limitations under the License.
                      ;  *----------------------------------------------------------------------------
                      ;  * Concesso in licenza secondo i termini della Licenza Apache, versione 2.0
                      ;  * (la "Licenza"); è proibito usare questo file se non in conformità alla
                      ;  * Licenza. Una copia della Licenza è disponibile all'indirizzo:
                      ;  *
                      ;  * http://www.apache.org/licenses/LICENSE-2.0
                      ;  *
                      ;  * Se non richiesto dalla legislazione vigente o concordato per iscritto,
                      ;  * il software distribuito nei termini della Licenza è distribuito
                      ;  * "COSì COM'è", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o
                      ;  * implicite. Consultare la Licenza per il testo specifico che regola le
                      ;  * autorizzazioni e le limitazioni previste dalla medesima.
                      ;  ****************************************************************************/
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                      ;*                                                                             *
                      ;*                      KEYBOARD MATRIX DETECTION ON TRS-80 COLOR COMPUTER     *
                      ;*                                                                             *
                      ;*                             by Marco Spedaletti                             *
                      ;*                                                                             *
                      ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
438C                  SCANCODE
                          ; CLR $FF01
                          ; CLR $FF00
                          ; CLR $FF03
438C  86FF                    LDA #$FF
438E  B7FF02                  STA $FF02
4391  8E43CB                  LDX #SCANCODEMATRIX
4394  86FE                    LDA #$FE
4396                  SCANCODE0
4396  B7FF02                  STA $FF02
4399  F6FF00                  LDB $FF00
                      ; peephole(1): r359 (EOR#$FF)->(COM)
                      ;    EORB #$FF
439C  53                      COMB
439D  C47F                    ANDB #$7F
439F  C100                    CMPB #$0
43A1  271C                    BEQ SCANCODENEXT
43A3  1F98                    TFR B, A
43A5                  SCANCODENEXT2A
43A5  1F89                    TFR A, B
43A7  8401                    ANDA #1
43A9  8101                    CMPA #1
43AB  2605                    BNE SCANCODENEXT2
43AD  A684                    LDA ,X 
43AF  7E43CA                  JMP SCANCODEE
43B2                  SCANCODENEXT2
43B2  1F98                    TFR B, A
43B4  44                      LSRA
43B5  3001                    LEAX 1,X 
43B7  8100                    CMPA #0
43B9  26EA                    BNE SCANCODENEXT2A
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
43BB  4F                      CLRA
43BC  7E43CA                  JMP SCANCODEE
43BF                  SCANCODENEXT
43BF  1A01                    ORCC #$01
43C1  49                      ROLA
43C2  3008                    LEAX 8,X 
43C4  8C4403                  CMPX #SCANCODEMATRIXE
43C7  23CD                    BLS SCANCODE0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;    LDA #0
43C9  4F                      CLRA
43CA                  SCANCODEE
43CA  39                      RTS
43CB                  SCANCODEMATRIX
43CB  4048505830380DE3         fcb '@','H','P','X','0','8',$0d,$E3     ; // UNUSED
43D3  414951593139F9E4         fcb 'A','I','Q','Y','1','9',$F9,$E4     ; // CLR, UNUSED
43DB  424A525A323AD5E5         fcb 'B','J','R','Z','2',':',$D5,$E5     ; // BRK, UNUSED
43E3  434B53FA333BD6E6         fcb 'C','K','S',$FA,'3',';',$D6,$E6     ; // UP $FA, UNUSED, UNUSED
43EB  444C54FB342CD7E7         fcb 'D','L','T',$FB,'4',',',$D7,$E7     ; // DOWN $FB, UNUSED, UNUSED
43F3  454D5508352DD8E8         fcb 'E','M','U',8,'5','-',$D8,$E8     ; // ?? $FC, .., LEFT, UNUSED, UNUSED
43FB  464E56FD362ED9E9         fcb 'F','N','V',$FD,'6','.',$D9,$E9     ; // RIGHT $FD, UNUSED, UNUSED
4403                  SCANCODEMATRIXE
4403  474F5720372FF0FE         fcb 'G','O','W',' ','7','/',$F0,$FE     ; // UNUSED, SHIFT
440B                  scancode_after
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
440B  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
440C  97F1                    STA <_Ttmp13
440E  B74CA4                  STA _Ttmp211
4411  BD438C                  JSR SCANCODE
4414  8100                    CMPA #0
4416  2707                    BEQ _label225nokey
4418  B74CA4                  STA _Ttmp211
441B  86FF                    LDA #$FF
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
441D  97F1                    STA <_Ttmp13
441F                  _label225nokey
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp13
441F  96F1                    LDA <_Ttmp13
                      ; peephole(1): r438 (LOAD/STORE,CMP#0)->(LOAD/STORE)
                      ;       CMPA #0
4421  2733                    BEQ _label224skip
4423  B64CA4                  LDA _Ttmp211
4426  8480                    ANDA #$80
4428  8100                    CMPA #0
442A  2619                    BNE _label224noascii
442C  B64CA4                  LDA _Ttmp211
442F  B1011D                  CMPA $011d
4432  2618                    BNE _label224different
4434  7A011F                  DEC $011f
4437  F6011F                  LDB $011f
443A  F12C13                  CMPB KBDRATE
443D  2710                    BEQ _label224ascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
443F  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
4440  97F1                    STA <_Ttmp13
4442  7E445A                  JMP _label224done
4445                  _label224noascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4445  4F                      CLRA
4446  B74CA4                  STA _Ttmp211
4449  7E445A                  JMP _label224done
444C                  _label224different
444C  B7011D                  STA $011d
444F                  _label224ascii
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #0
444F  5F                      CLRB
4450  F7011F                  STB $011f
4453  7E445A                  JMP _label224done
4456                  _label224skip
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4456  4F                      CLRA
4457  B7011D                  STA $011d
445A                  _label224done
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
445A  D6F1                    LDB <_Ttmp13
                              IF (((128+_label204repeat-(*+2))|(127-_label204repeat+(*+2)))&0x8000)
445C  1027FE70                LBEQ _label204repeat
                              ELSE
                              BEQ _label204repeat
                              ENDIF
4460  F64CA4                  LDB _Ttmp211
                              IF (((128+_label204repeat-(*+2))|(127-_label204repeat+(*+2)))&0x8000)
4463  1027FE69                LBEQ _label204repeat
                              ELSE
                              BEQ _label204repeat
                              ENDIF
4467  5F                      CLRB
4468  B64CA4                  LDA _Ttmp211
                      ; peephole(13): inlined1
                      ;       CMPA _Ttmp210
446B  8100                    CMPA #1-1
446C                  _Ttmp210 equ *-1
446D  2601                    BNE _label226
446F  5A                      DECB
4470                  _label226
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp13
4470  D7F1                    STB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
4472  D6F1                    LDB <_Ttmp13
                              IF (((128+_label204backspace-(*+2))|(127-_label204backspace+(*+2)))&0x8000)
                              LBNE _label204backspace
                              ELSE
4474  2659                    BNE _label204backspace
                              ENDIF
4476  5F                      CLRB
4477  B64CA4                  LDA _Ttmp211
                      ; peephole(13): inlined1
                      ;       CMPA _Ttmp207
447A  8100                    CMPA #1-1
447B                  _Ttmp207 equ *-1
447C  2601                    BNE _label227
447E  5A                      DECB
447F                  _label227
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp13
447F  D7F1                    STB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
4481  D6F1                    LDB <_Ttmp13
                              IF (((128+_label204finished-(*+2))|(127-_label204finished+(*+2)))&0x8000)
4483  1026014E                LBNE _label204finished
                              ELSE
                              BNE _label204finished
                              ENDIF
4487  5F                      CLRB
4488  B64CA4                  LDA _Ttmp211
                      ; peephole(13): inlined1
                      ;       CMPA _Ttmp206
448B  8100                    CMPA #1-1
448C                  _Ttmp206 equ *-1
448D  2601                    BNE _label228
448F  5A                      DECB
4490                  _label228
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp13
4490  D7F1                    STB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
4492  D6F1                    LDB <_Ttmp13
                              IF (((128+_label204finished-(*+2))|(127-_label204finished+(*+2)))&0x8000)
4494  1026013D                LBNE _label204finished
                              ELSE
                              BNE _label204finished
                              ENDIF
4498  CC4CA4                  LDD #_Ttmp211
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp178
449B  DDF4                    STD <_Ttmp178
449D  C601                    LDB #$01
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp33
449F  D7FB                    STB <_Ttmp33
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp178
44A1  109EF4                  LDY <_Ttmp178
44A4  10BF0001                STY TEXTPTR
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
44A8  96FB                    LDA <_Ttmp33
44AA  B70003                  STA TEXTSIZE
44AD  BD3C52                  JSR TEXTATBITMAPMODE
44B0  B64CA4                  LDA _Ttmp211
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp169
44B3  9EF2                    LDX <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
44B5  D6F0                    LDB <_Ttmp1
44B7  3A                      ABX
44B8  A784                    STA ,X
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp1
44BA  0CF0                    INC <_Ttmp1
44BC  5F                      CLRB
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp1
44BD  96F0                    LDA <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp9
44BF  91FA                    CMPA <_Ttmp9
44C1  2601                    BNE _label232
44C3  5A                      DECB
44C4                  _label232
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp13
44C4  D7F1                    STB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
44C6  D6F1                    LDB <_Ttmp13
                              IF (((128+_label204repeat-(*+2))|(127-_label204repeat+(*+2)))&0x8000)
44C8  1027FE04                LBEQ _label204repeat
                              ELSE
                              BEQ _label204repeat
                              ENDIF
                              IF (((128+_label204finished-(*+2))|(127-_label204finished+(*+2)))&0x8000)
44CC  7E45D5                  JMP _label204finished
                              ELSE
                              BRA _label204finished
                              ENDIF
44CF                  _label204backspace
44CF  5F                      CLRB
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp1
44D0  96F0                    LDA <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp21
44D2  91F9                    CMPA <_Ttmp21
44D4  2601                    BNE _label233
44D6  5A                      DECB
44D7                  _label233
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp13
44D7  D7F1                    STB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
44D9  D6F1                    LDB <_Ttmp13
                              IF (((128+_label204repeat-(*+2))|(127-_label204repeat+(*+2)))&0x8000)
44DB  1026FDF1                LBNE _label204repeat
                              ELSE
                              BNE _label204repeat
                              ENDIF
                      ; peephole(13): direct-page1
                      ;       DEC _Ttmp1
44DF  0AF0                    DEC <_Ttmp1
44E1  CC4CA2                  LDD #_Ttmp208
44E4  FD4C9E                  STD _Ttmp180
44E7  C601                    LDB #$01
44E9  F744F5                  STB _Ttmp54
44EC  10BE4C9E                LDY _Ttmp180
44F0  10BF0001                STY TEXTPTR
                      ; peephole(13): inlined1
                      ;       LDA _Ttmp54
44F4  8600                    LDA #1-1
44F5                  _Ttmp54 equ *-1
44F6  B70003                  STA TEXTSIZE
44F9  BD3C52                  JSR TEXTATBITMAPMODE
44FC  4F                      CLRA
44FD  B7450C                  STA _Ttmp55
4500  C6FE                    LDB #$fffffffe
4502  F73985                  STB _Ttmp118
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp118
4505  FB00D3                  ADDB XCURSYS
4508  F700D3                  STB XCURSYS
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp55
450B  C600                    LDB #1-1
450C                  _Ttmp55 equ *-1
450D  F74C95                  STB _Ttmp125
4510  F64C95                  LDB _Ttmp125
4513  C47F                    ANDB #$7f
4515  F74C95                  STB _Ttmp125
4518  5F                      CLRB
4519  B600D3                  LDA XCURSYS
451C  B14C95                  CMPA _Ttmp125
451F  2C01                    BGE _label238
4521  5A                      DECB
4522                  _label238
4522  F74C96                  STB _Ttmp127
4525  F64C96                  LDB _Ttmp127
                              IF (((128+_label236g-(*+2))|(127-_label236g+(*+2)))&0x8000)
                              LBEQ _label236g
                              ELSE
4528  270A                    BEQ _label236g
                              ENDIF
452A  F64008                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
452D  C47F                    ANDB #$7f
452F  F700D3                  STB XCURSYS
                              IF (((128+_label236e-(*+2))|(127-_label236e+(*+2)))&0x8000)
                              JMP _label236e
                              ELSE
4532  2028                    BRA _label236e
                              ENDIF
4534                  _label236g
4534  F64008                  LDB CURRENTTILESWIDTH
4537  F74C97                  STB _Ttmp129
453A  F64C97                  LDB _Ttmp129
453D  C47F                    ANDB #$7f
453F  F74C97                  STB _Ttmp129
4542  5F                      CLRB
4543  B600D3                  LDA XCURSYS
4546  B14C97                  CMPA _Ttmp129
4549  2F01                    BLE _label240
454B  5A                      DECB
454C                  _label240
454C  F74C9C                  STB _Ttmp150
454F  F64C9C                  LDB _Ttmp150
                              IF (((128+_label236e-(*+2))|(127-_label236e+(*+2)))&0x8000)
                              LBEQ _label236e
                              ELSE
4552  2708                    BEQ _label236e
                              ENDIF
4554  F6450C                  LDB _Ttmp55
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4557  C47F                    ANDB #$7f
4559  F700D3                  STB XCURSYS
455C                  _label236e
455C  CC4CA2                  LDD #_Ttmp208
455F  FD4CA5                  STD _Ttmp242
4562  C601                    LDB #$01
4564  F74570                  STB _Ttmp75
4567  10BE4CA5                LDY _Ttmp242
456B  10BF0001                STY TEXTPTR
                      ; peephole(13): inlined1
                      ;       LDA _Ttmp75
456F  8600                    LDA #1-1
4570                  _Ttmp75 equ *-1
4571  B70003                  STA TEXTSIZE
4574  BD3C52                  JSR TEXTATBITMAPMODE
4577  4F                      CLRA
4578  B74584                  STA _Ttmp76
457B  C6FF                    LDB #$ffffffff
                      ; peephole(6): unread1
                      ;       STB _Ttmp244
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp244
457D  FB00D3                  ADDB XCURSYS
4580  F700D3                  STB XCURSYS
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp76
4583  C600                    LDB #1-1
4584                  _Ttmp76 equ *-1
4585  F74CA7                  STB _Ttmp247
4588  F64CA7                  LDB _Ttmp247
458B  C47F                    ANDB #$7f
458D  F74CA7                  STB _Ttmp247
4590  5F                      CLRB
4591  B600D3                  LDA XCURSYS
4594  B14CA7                  CMPA _Ttmp247
4597  2C01                    BGE _label249
4599  5A                      DECB
459A                  _label249
459A  F7459E                  STB _Ttmp248
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp248
459D  C600                    LDB #1-1
459E                  _Ttmp248 equ *-1
                              IF (((128+_label245g-(*+2))|(127-_label245g+(*+2)))&0x8000)
                              LBEQ _label245g
                              ELSE
459F  270A                    BEQ _label245g
                              ENDIF
45A1  F64008                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
45A4  C47F                    ANDB #$7f
45A6  F700D3                  STB XCURSYS
                              IF (((128+_label245e-(*+2))|(127-_label245e+(*+2)))&0x8000)
                              JMP _label245e
                              ELSE
45A9  2027                    BRA _label245e
                              ENDIF
45AB                  _label245g
45AB  F64008                  LDB CURRENTTILESWIDTH
45AE  F74CA8                  STB _Ttmp251
45B1  F64CA8                  LDB _Ttmp251
45B4  C47F                    ANDB #$7f
45B6  F74CA8                  STB _Ttmp251
45B9  5F                      CLRB
45BA  B600D3                  LDA XCURSYS
45BD  B14CA8                  CMPA _Ttmp251
45C0  2F01                    BLE _label253
45C2  5A                      DECB
45C3                  _label253
45C3  F745C7                  STB _Ttmp252
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp252
45C6  C600                    LDB #1-1
45C7                  _Ttmp252 equ *-1
                              IF (((128+_label245e-(*+2))|(127-_label245e+(*+2)))&0x8000)
                              LBEQ _label245e
                              ELSE
45C8  2708                    BEQ _label245e
                              ENDIF
45CA  F64584                  LDB _Ttmp76
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
45CD  C47F                    ANDB #$7f
45CF  F700D3                  STB XCURSYS
45D2                  _label245e
                              IF (((128+_label204repeat-(*+2))|(127-_label204repeat+(*+2)))&0x8000)
45D2  7E42D0                  JMP _label204repeat
                              ELSE
                              BRA _label204repeat
                              ENDIF
45D5                  _label204finished
45D5  CC4CA2                  LDD #_Ttmp208
45D8  FD4CA9                  STD _Ttmp255
45DB  C601                    LDB #$01
45DD  F745E9                  STB _Ttmp103
45E0  10BE4CA9                LDY _Ttmp255
45E4  10BF0001                STY TEXTPTR
                      ; peephole(13): inlined1
                      ;       LDA _Ttmp103
45E8  8600                    LDA #1-1
45E9                  _Ttmp103 equ *-1
45EA  B70003                  STA TEXTSIZE
45ED  BD3C52                  JSR TEXTATBITMAPMODE
45F0  4F                      CLRA
45F1  B745FD                  STA _Ttmp105
45F4  C6FF                    LDB #$ffffffff
                      ; peephole(6): unread1
                      ;       STB _Ttmp257
                      ; peephole(1): r528 (STB*,LDB+,ORB/ANDB/EORB/ADDB*)->(STB*,ORB/ANDB/EORB/ADDB+)
                      ;       LDB XCURSYS
                      ;       ADDB _Ttmp257
45F6  FB00D3                  ADDB XCURSYS
45F9  F700D3                  STB XCURSYS
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp105
45FC  C600                    LDB #1-1
45FD                  _Ttmp105 equ *-1
45FE  F74CAB                  STB _Ttmp260
4601  F64CAB                  LDB _Ttmp260
4604  C47F                    ANDB #$7f
4606  F74CAB                  STB _Ttmp260
4609  5F                      CLRB
460A  B600D3                  LDA XCURSYS
460D  B14CAB                  CMPA _Ttmp260
4610  2C01                    BGE _label262
4612  5A                      DECB
4613                  _label262
4613  F74617                  STB _Ttmp261
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp261
4616  C600                    LDB #1-1
4617                  _Ttmp261 equ *-1
                              IF (((128+_label258g-(*+2))|(127-_label258g+(*+2)))&0x8000)
                              LBEQ _label258g
                              ELSE
4618  270A                    BEQ _label258g
                              ENDIF
461A  F64008                  LDB CURRENTTILESWIDTH
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
461D  C47F                    ANDB #$7f
461F  F700D3                  STB XCURSYS
                              IF (((128+_label258e-(*+2))|(127-_label258e+(*+2)))&0x8000)
                              JMP _label258e
                              ELSE
4622  2027                    BRA _label258e
                              ENDIF
4624                  _label258g
4624  F64008                  LDB CURRENTTILESWIDTH
4627  F74CAC                  STB _Ttmp264
462A  F64CAC                  LDB _Ttmp264
462D  C47F                    ANDB #$7f
462F  F74CAC                  STB _Ttmp264
4632  5F                      CLRB
4633  B600D3                  LDA XCURSYS
4636  B14CAC                  CMPA _Ttmp264
4639  2F01                    BLE _label266
463B  5A                      DECB
463C                  _label266
463C  F74640                  STB _Ttmp265
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp265
463F  C600                    LDB #1-1
4640                  _Ttmp265 equ *-1
                              IF (((128+_label258e-(*+2))|(127-_label258e+(*+2)))&0x8000)
                              LBEQ _label258e
                              ELSE
4641  2708                    BEQ _label258e
                              ENDIF
4643  F645FD                  LDB _Ttmp105
                      ; peephole(2): r424 (STORE*,?,STORE*)->(?,STORE*)
                      ;       STB XCURSYS
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB XCURSYS
4646  C47F                    ANDB #$7f
4648  F700D3                  STB XCURSYS
464B                  _label258e
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp1
464B  96F0                    LDA <_Ttmp1
464D  F64CA1                  LDB _Ttmp205
4650  BD2DEF                  JSR DSRESIZE
4653  F64CA1                  LDB _Ttmp205
4656  BD2E11                  JSR DSDESCRIPTOR
4659  EC01                    LDD 1,X 
465B  FD4CAD                  STD _Ttmp267
465E  A684                    LDA ,X 
4660  B7466A                  STA _Ttmp116
4663  F64C11                  LDB _sentence
4666  BD2DBD                  JSR DSFREE
                      ; peephole(13): inlined1
                      ;       LDA _Ttmp116
4669  8600                    LDA #1-1
466A                  _Ttmp116 equ *-1
466B  BD2E72                  JSR DSALLOC
466E  F74C11                  STB _sentence
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _sentence
4671  BD2E11                  JSR DSDESCRIPTOR
4674  EC01                    LDD 1,X 
4676  FD4684                  STD _Ttmp268
4679  A684                    LDA ,X 
                      ; peephole(6): unread1
                      ;       STA _Ttmp122
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
467B  4F                      CLRA
467C  F6466A                  LDB _Ttmp116
467F  10BE4CAD                LDY _Ttmp267
                      ; peephole(13): inlined1
                      ;       LDX _Ttmp268
4683  8E0000                  LDX #1-1
4684                  _Ttmp268 equ *-2
4686  BD3036                  JSR DUFFDEVICE
4689  4F                      CLRA
468A  B700D3                  STA XCURSYS
468D  7C00D6                  INC YCURSYS
4690  F64021                  LDB CURRENTTILESHEIGHT
4693  F74CAF                  STB _Ttmp271
4696  F64CAF                  LDB _Ttmp271
4699  C47F                    ANDB #$7f
469B  F74CAF                  STB _Ttmp271
469E  5F                      CLRB
469F  B600D6                  LDA YCURSYS
46A2  B14CAF                  CMPA _Ttmp271
46A5  2D01                    BLT _label273
46A7  5A                      DECB
46A8                  _label273
46A8  F746AC                  STB _Ttmp272
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp272
46AB  C600                    LDB #1-1
46AC                  _Ttmp272 equ *-1
                              IF (((128+_label269scroll-(*+2))|(127-_label269scroll+(*+2)))&0x8000)
                              LBNE _label269scroll
                              ELSE
46AD  2602                    BNE _label269scroll
                              ENDIF
                              IF (((128+_label269end-(*+2))|(127-_label269end+(*+2)))&0x8000)
                              JMP _label269end
                              ELSE
46AF  2011                    BRA _label269end
                              ENDIF
46B1                  _label269scroll
46B1  86FF                    LDA #$ff
46B3  B7004A                  STA DIRECTION
46B6  BD3B52                  JSR VSCROLLT
46B9  F64021                  LDB CURRENTTILESHEIGHT
46BC  F700D6                  STB YCURSYS
46BF  7A00D6                  DEC YCURSYS
46C2                  _label269end
                              ; P:617
                              ; L:42
                              ; P:0
                              ; L:43
                              ; P:0
                              ; L:44
                              ; P:0
                              ; L:45
46C2  F64C11                  LDB _sentence
46C5  BD2E11                  JSR DSDESCRIPTOR
46C8  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
46CA  DDF2                    STD <_Ttmp169
46CC  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp2
46CE  97FD                    STA <_Ttmp2
46D0  F64CF2                  LDB _Tstr274
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp9
46D3  D7FA                    STB <_Ttmp9
46D5  CC4CF2                  LDD #_Tstr274
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
46D8  DDF7                    STD <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp177+1
46DA  0CF8                    INC <_Ttmp177+1
46DC  2602                    BNE _label276
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp177
46DE  0CF7                    INC <_Ttmp177
46E0                  _label276
46E0  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp1
46E1  97F0                    STA <_Ttmp1
46E3                  _label277rep
46E3  5F                      CLRB
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp1
46E4  96F0                    LDA <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp2
46E6  91FD                    CMPA <_Ttmp2
46E8  2601                    BNE _label278
46EA  5A                      DECB
46EB                  _label278
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp13
46EB  D7F1                    STB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
46ED  D6F1                    LDB <_Ttmp13
                              IF (((128+_label277nfnd-(*+2))|(127-_label277nfnd+(*+2)))&0x8000)
                              LBNE _label277nfnd
                              ELSE
46EF  2651                    BNE _label277nfnd
                              ENDIF
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp9
46F1  96FA                    LDA <_Ttmp9
46F3  2735                    BEQ _label279equal
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
46F5  109EF2                  LDY <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp177
46F8  9EF7                    LDX <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp9
46FA  96FA                    LDA <_Ttmp9
46FC  8480                    ANDA #$80
46FE  2717                    BEQ _label279second
4700                  _label279first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4700  4F                      CLRA
4701                  _label279loop
4701  E686                    LDB A,X
4703  E1A6                    CMPB A,Y
4705  262A                    BNE _label279diff
4707  8B01                    ADDA #1
4709  817F                    CMPA #$7F
470B  26F4                    BNE _label279loop
470D  31A87F                  LEAY 127,Y
4710  30887F                  LEAX 127,X
4713  3121                    LEAY 1,Y
4715  3001                    LEAX 1,X
4717                  _label279second
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp9
4717  96FA                    LDA <_Ttmp9
4719  847F                    ANDA #$7f
471B  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
471D  4F                      CLRA
471E                  _label279loop2
471E  E686                    LDB A,X
4720  E1A6                    CMPB A,Y
4722  260D                    BNE _label279diff
4724  8B01                    ADDA #1
4726  9114                    CMPA <MATHPTR0
4728  26F4                    BNE _label279loop2
472A                  _label279equal
472A  86FF                    LDA #$ff
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
472C  97F1                    STA <_Ttmp13
472E  7E4734                  JMP _label279final
4731                  _label279diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
4731  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
4732  97F1                    STA <_Ttmp13
4734                  _label279final
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp169+1
4734  0CF3                    INC <_Ttmp169+1
4736  2602                    BNE _label280
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp169
4738  0CF2                    INC <_Ttmp169
473A                  _label280
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp1
473A  0CF0                    INC <_Ttmp1
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
473C  D6F1                    LDB <_Ttmp13
                              IF (((128+_label277fnd-(*+2))|(127-_label277fnd+(*+2)))&0x8000)
                              LBNE _label277fnd
                              ELSE
473E  2605                    BNE _label277fnd
                              ENDIF
                              IF (((128+_label277rep-(*+2))|(127-_label277rep+(*+2)))&0x8000)
                              JMP _label277rep
                              ELSE
4740  20A1                    BRA _label277rep
                              ENDIF
4742                  _label277nfnd
4742  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp1
4743  97F0                    STA <_Ttmp1
4745                  _label277fnd
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
4745  D6F0                    LDB <_Ttmp1
                              IF (((128+_label281e0-(*+2))|(127-_label281e0+(*+2)))&0x8000)
4747  10270239                LBEQ _label281e0
                              ELSE
                              BEQ _label281e0
                              ENDIF
474B                  _label281t
                              ; P:97
                              ; L:46
474B  F64C11                  LDB _sentence
474E  BD2E11                  JSR DSDESCRIPTOR
4751  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
4753  DDF2                    STD <_Ttmp169
4755  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp9
4757  97FA                    STA <_Ttmp9
4759  F64CF2                  LDB _Tstr282
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp13
475C  D7F1                    STB <_Ttmp13
475E  CC4CF2                  LDD #_Tstr282
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
4761  DDF7                    STD <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp177+1
4763  0CF8                    INC <_Ttmp177+1
4765  2602                    BNE _label283
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp177
4767  0CF7                    INC <_Ttmp177
4769                  _label283
4769  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp2
476A  97FD                    STA <_Ttmp2
476C                  _label284rep
476C  5F                      CLRB
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp2
476D  96FD                    LDA <_Ttmp2
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp9
476F  91FA                    CMPA <_Ttmp9
4771  2601                    BNE _label285
4773  5A                      DECB
4774                  _label285
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp21
4774  D7F9                    STB <_Ttmp21
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
4776  D6F9                    LDB <_Ttmp21
                              IF (((128+_label284nfnd-(*+2))|(127-_label284nfnd+(*+2)))&0x8000)
                              LBNE _label284nfnd
                              ELSE
4778  2651                    BNE _label284nfnd
                              ENDIF
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp13
477A  96F1                    LDA <_Ttmp13
477C  2735                    BEQ _label286equal
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
477E  109EF2                  LDY <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp177
4781  9EF7                    LDX <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp13
4783  96F1                    LDA <_Ttmp13
4785  8480                    ANDA #$80
4787  2717                    BEQ _label286second
4789                  _label286first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4789  4F                      CLRA
478A                  _label286loop
478A  E686                    LDB A,X
478C  E1A6                    CMPB A,Y
478E  262A                    BNE _label286diff
4790  8B01                    ADDA #1
4792  817F                    CMPA #$7F
4794  26F4                    BNE _label286loop
4796  31A87F                  LEAY 127,Y
4799  30887F                  LEAX 127,X
479C  3121                    LEAY 1,Y
479E  3001                    LEAX 1,X
47A0                  _label286second
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp13
47A0  96F1                    LDA <_Ttmp13
47A2  847F                    ANDA #$7f
47A4  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
47A6  4F                      CLRA
47A7                  _label286loop2
47A7  E686                    LDB A,X
47A9  E1A6                    CMPB A,Y
47AB  260D                    BNE _label286diff
47AD  8B01                    ADDA #1
47AF  9114                    CMPA <MATHPTR0
47B1  26F4                    BNE _label286loop2
47B3                  _label286equal
47B3  86FF                    LDA #$ff
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp21
47B5  97F9                    STA <_Ttmp21
47B7  7E47BD                  JMP _label286final
47BA                  _label286diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
47BA  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp21
47BB  97F9                    STA <_Ttmp21
47BD                  _label286final
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp169+1
47BD  0CF3                    INC <_Ttmp169+1
47BF  2602                    BNE _label287
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp169
47C1  0CF2                    INC <_Ttmp169
47C3                  _label287
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp2
47C3  0CFD                    INC <_Ttmp2
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp21
47C5  D6F9                    LDB <_Ttmp21
                              IF (((128+_label284fnd-(*+2))|(127-_label284fnd+(*+2)))&0x8000)
                              LBNE _label284fnd
                              ELSE
47C7  2605                    BNE _label284fnd
                              ENDIF
                              IF (((128+_label284rep-(*+2))|(127-_label284rep+(*+2)))&0x8000)
                              JMP _label284rep
                              ELSE
47C9  20A1                    BRA _label284rep
                              ENDIF
47CB                  _label284nfnd
47CB  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp2
47CC  97FD                    STA <_Ttmp2
47CE                  _label284fnd
47CE  C601                    LDB #$01
47D0  F74C6B                  STB _Ttmp24
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp2
47D3  D6FD                    LDB <_Ttmp2
47D5  F04C6B                  SUBB _Ttmp24
47D8  F74C6C                  STB _Ttmp25
47DB  F64CB0                  LDB _Ttmp288
47DE  BD2DBD                  JSR DSFREE
47E1  B64C6C                  LDA _Ttmp25
47E4  BD2E72                  JSR DSALLOC
47E7  F74CB0                  STB _Ttmp288
47EA  F64CB0                  LDB _Ttmp288
47ED  BD2E11                  JSR DSDESCRIPTOR
47F0  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp178
47F2  DDF4                    STD <_Ttmp178
47F4  A684                    LDA ,X 
47F6  B74C6D                  STA _Ttmp27
47F9  F64C11                  LDB _sentence
47FC  BD2E11                  JSR DSDESCRIPTOR
47FF  EC01                    LDD 1,X 
4801  FD4C9E                  STD _Ttmp180
4804  A684                    LDA ,X 
4806  B7492D                  STA _Ttmp29
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4809  4F                      CLRA
480A  F64C6D                  LDB _Ttmp27
480D  10BE4C9E                LDY _Ttmp180
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
4811  9EF4                    LDX <_Ttmp178
4813  BD3036                  JSR DUFFDEVICE
4816  F64CB0                  LDB _Ttmp288
4819  BD2E11                  JSR DSDESCRIPTOR
481C  EC01                    LDD 1,X 
481E  FD4CA5                  STD _Ttmp242
4821  A684                    LDA ,X 
4823  B74C6F                  STA _Ttmp32
4826  F64C12                  LDB _word1
4829  BD2DBD                  JSR DSFREE
482C  B64C6F                  LDA _Ttmp32
482F  BD2E72                  JSR DSALLOC
4832  F74C12                  STB _word1
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word1
4835  BD2E11                  JSR DSDESCRIPTOR
4838  EC01                    LDD 1,X 
483A  FD4CA9                  STD _Ttmp255
483D  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp33
483F  97FB                    STA <_Ttmp33
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4841  4F                      CLRA
4842  F64C6F                  LDB _Ttmp32
4845  10BE4CA5                LDY _Ttmp242
4849  BE4CA9                  LDX _Ttmp255
484C  BD3036                  JSR DUFFDEVICE
                              ; L:46
484F  F64C11                  LDB _sentence
4852  BD2E11                  JSR DSDESCRIPTOR
4855  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
4857  DDF2                    STD <_Ttmp169
4859  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp9
485B  97FA                    STA <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
485D  D6FA                    LDB <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp2
485F  D7FD                    STB <_Ttmp2
4861  F64C11                  LDB _sentence
4864  BD2E11                  JSR DSDESCRIPTOR
4867  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
4869  DDF7                    STD <_Ttmp177
486B  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp21
486D  97F9                    STA <_Ttmp21
486F  F64CF2                  LDB _Tstr289
4872  F74C6B                  STB _Ttmp24
4875  CC4CF2                  LDD #_Tstr289
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp178
4878  DDF4                    STD <_Ttmp178
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp178+1
487A  0CF5                    INC <_Ttmp178+1
487C  2602                    BNE _label290
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp178
487E  0CF4                    INC <_Ttmp178
4880                  _label290
4880  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
4881  97F1                    STA <_Ttmp13
4883                  _label291rep
4883  5F                      CLRB
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp13
4884  96F1                    LDA <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp21
4886  91F9                    CMPA <_Ttmp21
4888  2601                    BNE _label292
488A  5A                      DECB
488B                  _label292
488B  F74C6C                  STB _Ttmp25
488E  F64C6C                  LDB _Ttmp25
                              IF (((128+_label291nfnd-(*+2))|(127-_label291nfnd+(*+2)))&0x8000)
                              LBNE _label291nfnd
                              ELSE
4891  2657                    BNE _label291nfnd
                              ENDIF
4893  B64C6B                  LDA _Ttmp24
4896  2737                    BEQ _label293equal
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp177
4898  109EF7                  LDY <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
489B  9EF4                    LDX <_Ttmp178
489D  B64C6B                  LDA _Ttmp24
48A0  8480                    ANDA #$80
48A2  2717                    BEQ _label293second
48A4                  _label293first
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
48A4  4F                      CLRA
48A5                  _label293loop
48A5  E686                    LDB A,X
48A7  E1A6                    CMPB A,Y
48A9  262C                    BNE _label293diff
48AB  8B01                    ADDA #1
48AD  817F                    CMPA #$7F
48AF  26F4                    BNE _label293loop
48B1  31A87F                  LEAY 127,Y
48B4  30887F                  LEAX 127,X
48B7  3121                    LEAY 1,Y
48B9  3001                    LEAX 1,X
48BB                  _label293second
48BB  B64C6B                  LDA _Ttmp24
48BE  847F                    ANDA #$7f
48C0  9714                    STA <MATHPTR0
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
48C2  4F                      CLRA
48C3                  _label293loop2
48C3  E686                    LDB A,X
48C5  E1A6                    CMPB A,Y
48C7  260E                    BNE _label293diff
48C9  8B01                    ADDA #1
48CB  9114                    CMPA <MATHPTR0
48CD  26F4                    BNE _label293loop2
48CF                  _label293equal
48CF  86FF                    LDA #$ff
48D1  B74C6C                  STA _Ttmp25
48D4  7E48DB                  JMP _label293final
48D7                  _label293diff
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #$00
48D7  4F                      CLRA
48D8  B74C6C                  STA _Ttmp25
48DB                  _label293final
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp177+1
48DB  0CF8                    INC <_Ttmp177+1
48DD  2602                    BNE _label294
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp177
48DF  0CF7                    INC <_Ttmp177
48E1                  _label294
                      ; peephole(13): direct-page1
                      ;       INC _Ttmp13
48E1  0CF1                    INC <_Ttmp13
48E3  F64C6C                  LDB _Ttmp25
                              IF (((128+_label291fnd-(*+2))|(127-_label291fnd+(*+2)))&0x8000)
                              LBNE _label291fnd
                              ELSE
48E6  2605                    BNE _label291fnd
                              ENDIF
                              IF (((128+_label291rep-(*+2))|(127-_label291rep+(*+2)))&0x8000)
                              JMP _label291rep
                              ELSE
48E8  2099                    BRA _label291rep
                              ENDIF
48EA                  _label291nfnd
48EA  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
48EB  97F1                    STA <_Ttmp13
48ED                  _label291fnd
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp2
48ED  D6FD                    LDB <_Ttmp2
                      ; peephole(13): direct-page1
                      ;       SUBB _Ttmp13
48EF  D0F1                    SUBB <_Ttmp13
48F1  F74C6D                  STB _Ttmp27
48F4  F64C11                  LDB _sentence
48F7  BD2E11                  JSR DSDESCRIPTOR
48FA  EC01                    LDD 1,X 
48FC  FD4C9E                  STD _Ttmp180
48FF  A684                    LDA ,X 
4901  B7492D                  STA _Ttmp29
4904  F64C6D                  LDB _Ttmp27
4907  F74C6E                  STB _Ttmp30
490A  F64CB1                  LDB _Ttmp295
490D  BD2DBD                  JSR DSFREE
4910  B64C6E                  LDA _Ttmp30
4913  BD2E72                  JSR DSALLOC
4916  F74CB1                  STB _Ttmp295
4919  F64CB1                  LDB _Ttmp295
491C  BD2E11                  JSR DSDESCRIPTOR
491F  EC01                    LDD 1,X 
4921  FD4CA5                  STD _Ttmp242
4924  A684                    LDA ,X 
4926  B74C6E                  STA _Ttmp30
4929  BE4C9E                  LDX _Ttmp180
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp29
492C  C600                    LDB #1-1
492D                  _Ttmp29 equ *-1
492E  3A                      ABX
492F  BF4C9E                  STX _Ttmp180
4932  FC4C9E                  LDD _Ttmp180
4935  F04C6D                  SUBB _Ttmp27
4938  8200                    SBCA #0
493A  FD4C9E                  STD _Ttmp180
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
493D  4F                      CLRA
493E  F64C6E                  LDB _Ttmp30
4941  10BE4C9E                LDY _Ttmp180
4945  BE4CA5                  LDX _Ttmp242
4948  BD3036                  JSR DUFFDEVICE
494B  F64CB1                  LDB _Ttmp295
494E  BD2E11                  JSR DSDESCRIPTOR
4951  EC01                    LDD 1,X 
4953  FD4CA9                  STD _Ttmp255
4956  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp33
4958  97FB                    STA <_Ttmp33
495A  F64C13                  LDB _word2
495D  BD2DBD                  JSR DSFREE
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp33
4960  96FB                    LDA <_Ttmp33
4962  BD2E72                  JSR DSALLOC
4965  F74C13                  STB _word2
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word2
4968  BD2E11                  JSR DSDESCRIPTOR
496B  EC01                    LDD 1,X 
496D  FD4CAD                  STD _Ttmp267
4970  A684                    LDA ,X 
4972  B744F5                  STA _Ttmp54
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4975  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp33
4976  D6FB                    LDB <_Ttmp33
4978  10BE4CA9                LDY _Ttmp255
497C  BE4CAD                  LDX _Ttmp267
497F  BD3036                  JSR DUFFDEVICE
                              ; P:294
                              ; L:47
                              IF (((128+_label281f-(*+2))|(127-_label281f+(*+2)))&0x8000)
                              JMP _label281f
                              ELSE
4982  2046                    BRA _label281f
                              ENDIF
4984                  _label281e0
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp1
4984  D6F0                    LDB <_Ttmp1
                              IF (((128+_label281f-(*+2))|(127-_label281f+(*+2)))&0x8000)
                              LBNE _label281f
                              ELSE
4986  2642                    BNE _label281f
                              ENDIF
                              ; P:12
                              ; L:48
                              ; P:0
                              ; L:49
4988  F64C11                  LDB _sentence
498B  BD2E11                  JSR DSDESCRIPTOR
498E  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
4990  DDF2                    STD <_Ttmp169
4992  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp9
4994  97FA                    STA <_Ttmp9
4996  F64C12                  LDB _word1
4999  BD2DBD                  JSR DSFREE
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp9
499C  96FA                    LDA <_Ttmp9
499E  BD2E72                  JSR DSALLOC
49A1  F74C12                  STB _word1
                      ; peephole(1): r338 (STORE*,LOAD*)->(STORE*)
                      ;       LDB _word1
49A4  BD2E11                  JSR DSDESCRIPTOR
49A7  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
49A9  DDF7                    STD <_Ttmp177
49AB  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
49AD  97F1                    STA <_Ttmp13
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
49AF  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
49B0  D6FA                    LDB <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
49B2  109EF2                  LDY <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp177
49B5  9EF7                    LDX <_Ttmp177
49B7  BD3036                  JSR DUFFDEVICE
                              ; L:49
49BA  F64C13                  LDB _word2
49BD  BD2DBD                  JSR DSFREE
49C0  108E4CF1                LDY #_Tstr296
49C4  BD2DAB                  JSR DSDEFINE
49C7  F74C13                  STB _word2
                              ; P:27
                              ; L:50
49CA                  _label281f
49CA                  _label281e1
                              ; P:2
                              ; L:51
                              ; P:0
                              ; L:52
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp300
49CA  C600                    LDB #1-1
49CB                  _Ttmp300 equ *-1
49CC  BD2DBD                  JSR DSFREE
49CF  108E4CE9                LDY #_Tstr298
49D3  BD2DAB                  JSR DSDEFINE
49D6  F749CB                  STB _Ttmp300
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp301
49D9  C600                    LDB #1-1
49DA                  _Ttmp301 equ *-1
49DB  BD2DBD                  JSR DSFREE
49DE  108E4CE9                LDY #_Tstr298
49E2  BD2DAB                  JSR DSDEFINE
49E5  F749DA                  STB _Ttmp301
49E8  F649DA                  LDB _Ttmp301
49EB  BD2E11                  JSR DSDESCRIPTOR
49EE  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
49F0  DDF2                    STD <_Ttmp169
49F2  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp9
49F4  97FA                    STA <_Ttmp9
49F6  F64C12                  LDB _word1
49F9  BD2E11                  JSR DSDESCRIPTOR
49FC  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
49FE  DDF7                    STD <_Ttmp177
4A00  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
4A02  97F1                    STA <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
4A04  D6FA                    LDB <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       ADDB _Ttmp13
4A06  DBF1                    ADDB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp21
4A08  D7F9                    STB <_Ttmp21
4A0A  F64CB2                  LDB _Ttmp302
4A0D  BD2DBD                  JSR DSFREE
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp21
4A10  96F9                    LDA <_Ttmp21
4A12  BD2E72                  JSR DSALLOC
4A15  F74CB2                  STB _Ttmp302
4A18  F64CB2                  LDB _Ttmp302
4A1B  BD2E11                  JSR DSDESCRIPTOR
4A1E  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp178
4A20  DDF4                    STD <_Ttmp178
4A22  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp21
4A24  97F9                    STA <_Ttmp21
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4A26  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
4A27  D6FA                    LDB <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
4A29  109EF2                  LDY <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
4A2C  9EF4                    LDX <_Ttmp178
4A2E  BD3036                  JSR DUFFDEVICE
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
4A31  9EF4                    LDX <_Ttmp178
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
4A33  D6FA                    LDB <_Ttmp9
4A35  3A                      ABX
                      ; peephole(13): direct-page1
                      ;       STX _Ttmp178
4A36  9FF4                    STX <_Ttmp178
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4A38  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
4A39  D6F1                    LDB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp177
4A3B  109EF7                  LDY <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
4A3E  9EF4                    LDX <_Ttmp178
4A40  BD3036                  JSR DUFFDEVICE
4A43  F64CB2                  LDB _Ttmp302
4A46  BD2E11                  JSR DSDESCRIPTOR
4A49  EC01                    LDD 1,X 
4A4B  FD4C9E                  STD _Ttmp180
4A4E  A684                    LDA ,X 
4A50  B74C6B                  STA _Ttmp24
4A53  10BE4C9E                LDY _Ttmp180
4A57  10BF0001                STY TEXTPTR
4A5B  B64C6B                  LDA _Ttmp24
4A5E  B70003                  STA TEXTSIZE
4A61  BD3C52                  JSR TEXTATBITMAPMODE
4A64  4F                      CLRA
4A65  B700D3                  STA XCURSYS
4A68  7C00D6                  INC YCURSYS
4A6B  F64021                  LDB CURRENTTILESHEIGHT
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
4A6E  D7FC                    STB <_Ttmp61
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp61
4A70  D6FC                    LDB <_Ttmp61
4A72  C47F                    ANDB #$7f
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
4A74  D7FC                    STB <_Ttmp61
4A76  5F                      CLRB
4A77  B600D6                  LDA YCURSYS
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp61
4A7A  91FC                    CMPA <_Ttmp61
4A7C  2D01                    BLT _label307
4A7E  5A                      DECB
4A7F                  _label307
4A7F  F74C84                  STB _Ttmp67
4A82  F64C84                  LDB _Ttmp67
                              IF (((128+_label305scroll-(*+2))|(127-_label305scroll+(*+2)))&0x8000)
                              LBNE _label305scroll
                              ELSE
4A85  2602                    BNE _label305scroll
                              ENDIF
                              IF (((128+_label305end-(*+2))|(127-_label305end+(*+2)))&0x8000)
                              JMP _label305end
                              ELSE
4A87  2011                    BRA _label305end
                              ENDIF
4A89                  _label305scroll
4A89  86FF                    LDA #$ff
4A8B  B7004A                  STA DIRECTION
4A8E  BD3B52                  JSR VSCROLLT
4A91  F64021                  LDB CURRENTTILESHEIGHT
4A94  F700D6                  STB YCURSYS
4A97  7A00D6                  DEC YCURSYS
4A9A                  _label305end
                              ; P:95
                              ; L:53
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp310
4A9A  C600                    LDB #1-1
4A9B                  _Ttmp310 equ *-1
4A9C  BD2DBD                  JSR DSFREE
4A9F  108E4CE1                LDY #_Tstr308
4AA3  BD2DAB                  JSR DSDEFINE
4AA6  F74A9B                  STB _Ttmp310
                      ; peephole(13): inlined1
                      ;       LDB _Ttmp311
4AA9  C600                    LDB #1-1
4AAA                  _Ttmp311 equ *-1
4AAB  BD2DBD                  JSR DSFREE
4AAE  108E4CE1                LDY #_Tstr308
4AB2  BD2DAB                  JSR DSDEFINE
4AB5  F74AAA                  STB _Ttmp311
4AB8  F64AAA                  LDB _Ttmp311
4ABB  BD2E11                  JSR DSDESCRIPTOR
4ABE  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp169
4AC0  DDF2                    STD <_Ttmp169
4AC2  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp9
4AC4  97FA                    STA <_Ttmp9
4AC6  F64C13                  LDB _word2
4AC9  BD2E11                  JSR DSDESCRIPTOR
4ACC  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp177
4ACE  DDF7                    STD <_Ttmp177
4AD0  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp13
4AD2  97F1                    STA <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
4AD4  D6FA                    LDB <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       ADDB _Ttmp13
4AD6  DBF1                    ADDB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp21
4AD8  D7F9                    STB <_Ttmp21
4ADA  F64CB3                  LDB _Ttmp312
4ADD  BD2DBD                  JSR DSFREE
                      ; peephole(13): direct-page1
                      ;       LDA _Ttmp21
4AE0  96F9                    LDA <_Ttmp21
4AE2  BD2E72                  JSR DSALLOC
4AE5  F74CB3                  STB _Ttmp312
4AE8  F64CB3                  LDB _Ttmp312
4AEB  BD2E11                  JSR DSDESCRIPTOR
4AEE  EC01                    LDD 1,X 
                      ; peephole(13): direct-page1
                      ;       STD _Ttmp178
4AF0  DDF4                    STD <_Ttmp178
4AF2  A684                    LDA ,X 
                      ; peephole(13): direct-page1
                      ;       STA _Ttmp21
4AF4  97F9                    STA <_Ttmp21
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4AF6  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
4AF7  D6FA                    LDB <_Ttmp9
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp169
4AF9  109EF2                  LDY <_Ttmp169
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
4AFC  9EF4                    LDX <_Ttmp178
4AFE  BD3036                  JSR DUFFDEVICE
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
4B01  9EF4                    LDX <_Ttmp178
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp9
4B03  D6FA                    LDB <_Ttmp9
4B05  3A                      ABX
                      ; peephole(13): direct-page1
                      ;       STX _Ttmp178
4B06  9FF4                    STX <_Ttmp178
                      ; peephole(1): r354 (LOAD#0)->(CLEAR)
                      ;       LDA #0
4B08  4F                      CLRA
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp13
4B09  D6F1                    LDB <_Ttmp13
                      ; peephole(13): direct-page1
                      ;       LDY _Ttmp177
4B0B  109EF7                  LDY <_Ttmp177
                      ; peephole(13): direct-page1
                      ;       LDX _Ttmp178
4B0E  9EF4                    LDX <_Ttmp178
4B10  BD3036                  JSR DUFFDEVICE
4B13  F64CB3                  LDB _Ttmp312
4B16  BD2E11                  JSR DSDESCRIPTOR
4B19  EC01                    LDD 1,X 
4B1B  FD4C9E                  STD _Ttmp180
4B1E  A684                    LDA ,X 
4B20  B74C6B                  STA _Ttmp24
4B23  10BE4C9E                LDY _Ttmp180
4B27  10BF0001                STY TEXTPTR
4B2B  B64C6B                  LDA _Ttmp24
4B2E  B70003                  STA TEXTSIZE
4B31  BD3C52                  JSR TEXTATBITMAPMODE
4B34  4F                      CLRA
4B35  B700D3                  STA XCURSYS
4B38  7C00D6                  INC YCURSYS
4B3B  F64021                  LDB CURRENTTILESHEIGHT
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
4B3E  D7FC                    STB <_Ttmp61
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp61
4B40  D6FC                    LDB <_Ttmp61
4B42  C47F                    ANDB #$7f
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
4B44  D7FC                    STB <_Ttmp61
4B46  5F                      CLRB
4B47  B600D6                  LDA YCURSYS
                      ; peephole(13): direct-page1
                      ;       CMPA _Ttmp61
4B4A  91FC                    CMPA <_Ttmp61
4B4C  2D01                    BLT _label317
4B4E  5A                      DECB
4B4F                  _label317
4B4F  F74C84                  STB _Ttmp67
4B52  F64C84                  LDB _Ttmp67
                              IF (((128+_label315scroll-(*+2))|(127-_label315scroll+(*+2)))&0x8000)
                              LBNE _label315scroll
                              ELSE
4B55  2602                    BNE _label315scroll
                              ENDIF
                              IF (((128+_label315end-(*+2))|(127-_label315end+(*+2)))&0x8000)
                              JMP _label315end
                              ELSE
4B57  2011                    BRA _label315end
                              ENDIF
4B59                  _label315scroll
4B59  86FF                    LDA #$ff
4B5B  B7004A                  STA DIRECTION
4B5E  BD3B52                  JSR VSCROLLT
4B61  F64021                  LDB CURRENTTILESHEIGHT
4B64  F700D6                  STB YCURSYS
4B67  7A00D6                  DEC YCURSYS
4B6A                  _label315end
                              ; P:95
                              ; L:54
                              ; P:0
                              ; L:55
4B6A  CC03E8                  LDD #$03e8
4B6D  FD4C63                  STD _Ttmp18
4B70  CC0000                  LDD #$0000
4B73  FD4B95                  STD _Ttmp319
4B76  FC4C63                  LDD _Ttmp18
4B79  FD4CB4                  STD _Ttmp320
4B7C  FC4CB4                  LDD _Ttmp320
4B7F  8E0004                  LDX #$04
4B82                  _label321loop
4B82  1CFE                    ANDCC #$FE
4B84  47                      ASRA
4B85  56                      RORB
4B86  301F                    LEAX -1,X 
4B88  8C0000                  CMPX #0
4B8B  26F5                    BNE _label321loop
4B8D  FD4CB4                  STD _Ttmp320
4B90  5F                      CLRB
4B91  BE4CB4                  LDX _Ttmp320
                      ; peephole(13): inlined1
                      ;       CMPX _Ttmp319
4B94  8C0000                  CMPX #1-1
4B95                  _Ttmp319 equ *-2
4B97  2601                    BNE _label323
4B99  5A                      DECB
4B9A                  _label323
                      ; peephole(13): direct-page1
                      ;       STB _Ttmp61
4B9A  D7FC                    STB <_Ttmp61
                      ; peephole(13): direct-page1
                      ;       LDB _Ttmp61
4B9C  D6FC                    LDB <_Ttmp61
4B9E  53                      COMB
4B9F  F74C84                  STB _Ttmp67
4BA2  F64C84                  LDB _Ttmp67
                              IF (((128+_label324e0-(*+2))|(127-_label324e0+(*+2)))&0x8000)
                              LBEQ _label324e0
                              ELSE
4BA5  270D                    BEQ _label324e0
                              ENDIF
4BA7                  _label324t
4BA7  FC4CB4                  LDD _Ttmp320
4BAA  BE0112                  LDX $0112
4BAD  308B                    LEAX D,X 
4BAF                  _label325first
4BAF  BC0112                  CMPX $0112
4BB2  2EFB                    BGT _label325first
4BB4                  _label324f
4BB4                  _label324e0
                              ; P:41
                              ; L:56
                              ; P:0
                              ; L:57
                              IF (((128+_label17-(*+2))|(127-_label17+(*+2)))&0x8000)
4BB4  7E30D4                  JMP _label17
                              ELSE
                              BRA _label17
                              ENDIF
4BB7                  _label17bis
                              ; P:6
                              ; L:58
                              ; P:0
                              ; L:59
                              ; P:0
                              ; L:60
                              ; P:0
                              ; L:61
                              ; P:0
                              ; L:62
                              ; P:0
                              ; L:63
                              ; P:0
                              ; L:64
                              ; P:0
                              ; L:65
                              ; P:0
                              ; L:66
                              ; P:0
                              ; L:67
                              ; P:0
4BB7                  _label326
                              IF (((128+_label326-(*+2))|(127-_label326+(*+2)))&0x8000)
                              JMP _label326
                              ELSE
4BB7  20FE                    BRA _label326
                              ENDIF
4BB9  00              _PEN rzb 1
4BBA  00              _PAPER rzb 1
                      ; peephole(6): unread2
                      ;_windowE rzb 1
                      ; peephole(6): unread2
                      ;_windowS rzb 1
                      ; peephole(6): unread2
                      ;_windowW rzb 1
4D2C                  _TAB equ cstring0
                      ; peephole(6): unread2
                      ;_windowMX rzb 1
                      ; peephole(6): unread2
                      ;_windowMY rzb 1
4BBB  00              _xloc rzb 1
                      ; peephole(13): inlined3
                      ;_batt rzb 1
                      ; peephole(13): inlined3
                      ;_w rzb 2
                      ; peephole(13): inlined3
                      ;_h rzb 2
                      ; peephole(6): unread2
                      ;_c rzb 1
4BBC  0000            _mid1 rzb 2
                      ; peephole(6): unread2
                      ;_mid2 rzb 2
4BBE  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 _keyimage rzb 74
                      ; peephole(13): inlined3
                      ;_finished rzb 2
4C08  0000            _draw__x0 rzb 2
4C0A  0000            _draw__y0 rzb 2
4C0C  0000            _draw__x1 rzb 2
4C0E  0000            _draw__y1 rzb 2
4C10  00              _draw__c rzb 1
4C11  00              _sentence rzb 1
4C12  00              _word1 rzb 1
4C13  00              _word2 rzb 1
4C14  00                      fcb 0
0200                  max_free_string equ $0200
                      ; peephole(13): direct-page4
                      ;_Ttmp1 rzb 1
00F0                  _Ttmp1 equ $f0
                      ; peephole(13): direct-page4
                      ;_Ttmp2 rzb 1
00FD                  _Ttmp2 equ $fd
4D27                  _Tstr3 equ cstring4
                      ; peephole(13): direct-page4
                      ;_Ttmp5 rzb 2
00FE                  _Ttmp5 equ $fe
                      ; peephole(9): unread2
                      ;_Ttmp8 rzb 1
                      ; peephole(13): direct-page4
                      ;_Ttmp9 rzb 1
00FA                  _Ttmp9 equ $fa
4C15  0000            _Ttmp11 rzb 2
4C17  0000            _Ttmp12 rzb 2
                      ; peephole(13): direct-page4
                      ;_Ttmp13 rzb 1
00F1                  _Ttmp13 equ $f1
4C19                  _Timg15 rzb 0
4C19  18180000000000000000000000000000 _Timg16 fcb 24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,    0
4C29  000FC0001FE0003FF0007FF800FCFC00         fcb 0,15,192,0,31,224,0,63,240,0,127,248,0,252,252,     0
4C39  F87FFFF03FFFF03FFFF87FFFFCFC3C7F         fcb 248,127,255,240,63,255,240,63,255,248,127,255,252,252,60,   127
4C49  F83C3FF03C1FE0000FC0000000000000         fcb 248,60,63,240,60,31,224,0,15,192,0,0,0,0,0, 0
4C59  00000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0
4C63  0000            _Ttmp18 rzb 2
4C65  0000            _Ttmp19 rzb 2
                      ; peephole(13): direct-page4
                      ;_Ttmp21 rzb 1
00F9                  _Ttmp21 equ $f9
4C67  0000            _Ttmp22 rzb 2
4C69  0000            _Ttmp23 rzb 2
4C6B  00              _Ttmp24 rzb 1
4C6C  00              _Ttmp25 rzb 1
4C6D  00              _Ttmp27 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp29 rzb 1
4C6E  00              _Ttmp30 rzb 1
4C6F  00              _Ttmp32 rzb 1
                      ; peephole(13): direct-page4
                      ;_Ttmp33 rzb 1
00FB                  _Ttmp33 equ $fb
4C70  0000            _Ttmp41 rzb 2
4C72  0000            _Ttmp42 rzb 2
4C74  0000            _Ttmp44 rzb 2
4C76  0000            _Ttmp45 rzb 2
4C78  0000            _Ttmp46 rzb 2
4C7A  0000            _Ttmp47 rzb 2
4C7C  0000            _Ttmp48 rzb 2
4C7E  0000            _Ttmp49 rzb 2
                      ; peephole(13): inlined3
                      ;_Ttmp50 rzb 2
                      ; peephole(13): inlined3
                      ;_Ttmp51 rzb 2
4C80  0000            _Ttmp52 rzb 2
4C82  0000            _Ttmp53 rzb 2
                      ; peephole(13): inlined3
                      ;_Ttmp54 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp55 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp56 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp57 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp58 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp59 rzb 1
                      ; peephole(13): direct-page4
                      ;_Ttmp61 rzb 1
00FC                  _Ttmp61 equ $fc
                      ; peephole(13): inlined3
                      ;_Ttmp64 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp65 rzb 1
4C84  00              _Ttmp67 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp70 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp71 rzb 1
4C85  0000            _Ttmp72 rzb 2
4C87  0000            _Ttmp73 rzb 2
4C89  00000000        _Ttmp74 rzb 4
                      ; peephole(13): inlined3
                      ;_Ttmp75 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp76 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp78 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp82 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp84 rzb 1
4C8D  00              _Ttmp88 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp91 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp92 rzb 1
4C8E  00              _Ttmp95 rzb 1
4C8F  00              _Ttmp97 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp98 rzb 1
4C90  00              _Ttmp100 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp103 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp104 rzb 2
                      ; peephole(13): inlined3
                      ;_Ttmp105 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp106 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp107 rzb 1
4C91  00000000        _Ttmp108 rzb 4
                      ; peephole(6): unread2
                      ;_Ttmp109 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp110 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp112 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp116 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp118 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp121 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp122 rzb 1
4C95  00              _Ttmp125 rzb 1
4C96  00              _Ttmp127 rzb 1
4C97  00              _Ttmp129 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp132 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp133 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp134 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp135 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp136 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp137 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp138 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp139 rzb 1
4C98  00000000        _Ttmp140 rzb 4
                      ; peephole(6): unread2
                      ;_Ttmp141 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp142 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp144 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp148 rzb 1
4C9C  00              _Ttmp150 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp153 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp154 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp155 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp156 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp157 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp158 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp159 rzb 1
                      ; peephole(6): unread2
                      ;_Ttmp160 rzb 1
4D20                  _Tstr166 equ cstring167
                      ; peephole(13): direct-page4
                      ;_Ttmp169 rzb 2
00F2                  _Ttmp169 equ $f2
4D14                  _Tstr172 equ cstring173
                      ; peephole(13): inlined3
                      ;_Ttmp174 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp175 rzb 1
4C9D  00              _Ttmp176 rzb 1
                      ; peephole(13): direct-page4
                      ;_Ttmp177 rzb 2
00F7                  _Ttmp177 equ $f7
                      ; peephole(13): direct-page4
                      ;_Ttmp178 rzb 2
00F4                  _Ttmp178 equ $f4
4C9E  0000            _Ttmp180 rzb 2
4D08                  _Tstr185 equ cstring186
4D04                  _Tstr187 equ cstring188
                      ; peephole(13): inlined3
                      ;_Ttmp189 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp190 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp191 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp192 rzb 1
4CA0  00              _Ttmp193 rzb 1
4CF4                  _Tstr199 equ cstring200
4CA1  00              _Ttmp205 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp206 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp207 rzb 1
4CA2  00              _Ttmp208 rzb 1
4CA3  00              _Ttmp209 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp210 rzb 1
4CA4  00              _Ttmp211 rzb 1
4CA5  0000            _Ttmp242 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp244 rzb 1
4CA7  00              _Ttmp247 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp248 rzb 1
4CA8  00              _Ttmp251 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp252 rzb 1
4CA9  0000            _Ttmp255 rzb 2
                      ; peephole(6): unread2
                      ;_Ttmp257 rzb 1
4CAB  00              _Ttmp260 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp261 rzb 1
4CAC  00              _Ttmp264 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp265 rzb 1
4CAD  0000            _Ttmp267 rzb 2
                      ; peephole(13): inlined3
                      ;_Ttmp268 rzb 2
4CAF  00              _Ttmp271 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp272 rzb 1
4CF2                  _Tstr274 equ cstring275
4CF2                  _Tstr282 equ cstring275
4CB0  00              _Ttmp288 rzb 1
4CF2                  _Tstr289 equ cstring275
4CB1  00              _Ttmp295 rzb 1
4CF1                  _Tstr296 equ cstring297
4CE9                  _Tstr298 equ cstring299
                      ; peephole(13): inlined3
                      ;_Ttmp300 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp301 rzb 1
4CB2  00              _Ttmp302 rzb 1
4CE1                  _Tstr308 equ cstring309
                      ; peephole(13): inlined3
                      ;_Ttmp310 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp311 rzb 1
4CB3  00              _Ttmp312 rzb 1
                      ; peephole(13): inlined3
                      ;_Ttmp319 rzb 2
4CB4  0000            _Ttmp320 rzb 2
4CB6  00                      fcb 0
4CB7  00                      fcb 0
4CB8                  VARINIT
                      ; peephole(1): r805 (LDB#,STB,CLRA)->(LDD#,STB)
                      ;       LDB #$01
4CB8  CC0001                  LDD #$0001
4CBB  B74BBA                  STA _PAPER
                      ; peephole(6): unread1
                      ;       STA _windowE
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(6): unread1
                      ;       STA _windowS
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(6): unread1
                      ;       STA _windowW
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(6): unread1
                      ;       STA _windowMX
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(6): unread1
                      ;       STA _windowMY
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
4CBE  B74BBB                  STA _xloc
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
4CC1  F74BB9                  STB _PEN
                      ;       CLRA
                      ; peephole(2): r738 [A=0](CLRA)->()
                      ;       CLRA
4CC4  5F                      CLRB
4CC5  FD3002                  STD _w
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
4CC8  FD3023                  STD _h
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
                      ; peephole(6): unread1
                      ;       STA _c
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
4CCB  FD4BBC                  STD _mid1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
                      ; peephole(6): unread1
                      ;       STD _mid2
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
4CCE  FD30D5                  STD _finished
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
4CD1  FD4C08                  STD _draw__x0
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
4CD4  FD4C0A                  STD _draw__y0
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
4CD7  FD4C0C                  STD _draw__x1
                      ; peephole(1): r747 [A=0](LDD#00xx)->(LDB#xx)
                      ;       LDD #$0000
                      ; peephole(2): r354 (LOAD#0)->(CLEAR)
                      ;       LDB #$00
                      ; peephole(3): r780 [B=0](CLRB)->()
                      ;       CLRB
4CDA  FD4C0E                  STD _draw__y1
                      ; peephole(1): r738 [A=0](CLRA)->()
                      ;       CLRA
4CDD  B74C10                  STA _draw__c
4CE0  39                      RTS
4CE1  07              cstring309 fcb 7
4CE2  576F7264203220          fcc "Word 2 "
4CE9  07              cstring299 fcb 7
4CEA  576F7264203120          fcc "Word 1 "
4CF1  00              cstring297 fcb 0
4CF2  01              cstring275 fcb 1
4CF3  20                      fcc " "
4CF4  0F              cstring200 fcb 15
4CF5  436F6D6D616E6420456E7472793A20         fcc "Command Entry: "
4D04  03              cstring188 fcb 3
4D05  524544                  fcc "RED"
4D08  0B              cstring186 fcb 11
4D09  416C657274204C766C3A20         fcc "Alert Lvl: "
4D14  0B              cstring173 fcb 11
4D15  426174742E204C766C3A20         fcc "Batt. Lvl: "
4D20  06              cstring167 fcb 6
4D21  535441545553            fcc "STATUS"
4D27  04              cstring4 fcb 4
4D28  31303025                fcc "100%"
4D2C  01              cstring0 fcb 1
4D2D  09                      fcc $09
4D2E                  UDCCHAR
                              ; $00 
4D2E  3C666E6E60623C00         fcb $3c,$66,$6e,$6e,$60,$62,$3c,        $00
                              ; $01 
4D36  00003C063E663E00         fcb $00,$00,$3c,$06,$3e,$66,$3e,        $00
                              ; $02 
4D3E  0060607C66667C00         fcb $00,$60,$60,$7c,$66,$66,$7c,        $00
                              ; $03 
4D46  00003C6060603C00         fcb $00,$00,$3c,$60,$60,$60,$3c,        $00
                              ; $04 
4D4E  0006063E66663E00         fcb $00,$06,$06,$3e,$66,$66,$3e,        $00
                              ; $05 
4D56  00003C667E603C00         fcb $00,$00,$3c,$66,$7e,$60,$3c,        $00
                              ; $06 
4D5E  000E183E18181800         fcb $00,$0e,$18,$3e,$18,$18,$18,        $00
                              ; $07 
4D66  00003E66663E067C         fcb $00,$00,$3e,$66,$66,$3e,$06,        $7c
                              ; $08 
4D6E  0060607C66666600         fcb $00,$60,$60,$7c,$66,$66,$66,        $00
                              ; $09 
4D76  0018003818183C00         fcb $00,$18,$00,$38,$18,$18,$3c,        $00
                              ; $0a 
4D7E  000600060606063C         fcb $00,$06,$00,$06,$06,$06,$06,        $3c
                              ; $0b 
4D86  0060606C786C6600         fcb $00,$60,$60,$6c,$78,$6c,$66,        $00
                              ; $0c 
4D8E  0038181818183C00         fcb $00,$38,$18,$18,$18,$18,$3c,        $00
                              ; $0d 
4D96  0000667F7F6B6300         fcb $00,$00,$66,$7f,$7f,$6b,$63,        $00
                              ; $0e 
4D9E  00007C6666666600         fcb $00,$00,$7c,$66,$66,$66,$66,        $00
                              ; $0f 
4DA6  00003C6666663C00         fcb $00,$00,$3c,$66,$66,$66,$3c,        $00
                              ; $10 
4DAE  00007C66667C6060         fcb $00,$00,$7c,$66,$66,$7c,$60,        $60
                              ; $11 
4DB6  00003E66663E0606         fcb $00,$00,$3e,$66,$66,$3e,$06,        $06
                              ; $12 
4DBE  00007C6660606000         fcb $00,$00,$7c,$66,$60,$60,$60,        $00
                              ; $13 
4DC6  00003E603C067C00         fcb $00,$00,$3e,$60,$3c,$06,$7c,        $00
                              ; $14 
4DCE  00187E1818180E00         fcb $00,$18,$7e,$18,$18,$18,$0e,        $00
                              ; $15 
4DD6  0000666666663E00         fcb $00,$00,$66,$66,$66,$66,$3e,        $00
                              ; $16 
4DDE  00006666663C1800         fcb $00,$00,$66,$66,$66,$3c,$18,        $00
                              ; $17 
4DE6  0000636B7F3E3600         fcb $00,$00,$63,$6b,$7f,$3e,$36,        $00
                              ; $18 
4DEE  0000663C183C6600         fcb $00,$00,$66,$3c,$18,$3c,$66,        $00
                              ; $19 
4DF6  00006666663E0C78         fcb $00,$00,$66,$66,$66,$3e,$0c,        $78
                              ; $1a 
4DFE  00007E0C18307E00         fcb $00,$00,$7e,$0c,$18,$30,$7e,        $00
                              ; $1b 
4E06  3C30303030303C00         fcb $3c,$30,$30,$30,$30,$30,$3c,        $00
                              ; $1c 
4E0E  0C12307C3062FC00         fcb $0c,$12,$30,$7c,$30,$62,$fc,        $00
                              ; $1d 
4E16  3C0C0C0C0C0C3C00         fcb $3c,$0c,$0c,$0c,$0c,$0c,$3c,        $00
                              ; $1e 
4E1E  00183C7E18181818         fcb $00,$18,$3c,$7e,$18,$18,$18,        $18
                              ; $1f 
4E26  0010307F7F301000         fcb $00,$10,$30,$7f,$7f,$30,$10,        $00
                              ; $20 
4E2E  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $21 
4E36  1818181800001800         fcb $18,$18,$18,$18,$00,$00,$18,        $00
                              ; $22 
4E3E  6666660000000000         fcb $66,$66,$66,$00,$00,$00,$00,        $00
                              ; $23 
4E46  6666FF66FF666600         fcb $66,$66,$ff,$66,$ff,$66,$66,        $00
                              ; $24 
4E4E  183E603C067C1800         fcb $18,$3e,$60,$3c,$06,$7c,$18,        $00
                              ; $25 
4E56  62660C1830664600         fcb $62,$66,$0c,$18,$30,$66,$46,        $00
                              ; $26 
4E5E  3C663C3867663F00         fcb $3c,$66,$3c,$38,$67,$66,$3f,        $00
                              ; $27 
4E66  060C180000000000         fcb $06,$0c,$18,$00,$00,$00,$00,        $00
                              ; $28 
4E6E  0C18303030180C00         fcb $0c,$18,$30,$30,$30,$18,$0c,        $00
                              ; $29 
4E76  30180C0C0C183000         fcb $30,$18,$0c,$0c,$0c,$18,$30,        $00
                              ; $2a 
4E7E  00663CFF3C660000         fcb $00,$66,$3c,$ff,$3c,$66,$00,        $00
                              ; $2b 
4E86  0018187E18180000         fcb $00,$18,$18,$7e,$18,$18,$00,        $00
                              ; $2c 
4E8E  0000000000181830         fcb $00,$00,$00,$00,$00,$18,$18,        $30
                              ; $2d 
4E96  0000007E00000000         fcb $00,$00,$00,$7e,$00,$00,$00,        $00
                              ; $2e 
4E9E  0000000000181800         fcb $00,$00,$00,$00,$00,$18,$18,        $00
                              ; $2f 
4EA6  0003060C18306000         fcb $00,$03,$06,$0c,$18,$30,$60,        $00
                              ; $30 
4EAE  3C666E7666663C00         fcb $3c,$66,$6e,$76,$66,$66,$3c,        $00
                              ; $31 
4EB6  1818381818187E00         fcb $18,$18,$38,$18,$18,$18,$7e,        $00
                              ; $32 
4EBE  3C66060C30607E00         fcb $3c,$66,$06,$0c,$30,$60,$7e,        $00
                              ; $33 
4EC6  3C66061C06663C00         fcb $3c,$66,$06,$1c,$06,$66,$3c,        $00
                              ; $34 
4ECE  060E1E667F060600         fcb $06,$0e,$1e,$66,$7f,$06,$06,        $00
                              ; $35 
4ED6  7E607C0606663C00         fcb $7e,$60,$7c,$06,$06,$66,$3c,        $00
                              ; $36 
4EDE  3C66607C66663C00         fcb $3c,$66,$60,$7c,$66,$66,$3c,        $00
                              ; $37 
4EE6  7E660C1818181800         fcb $7e,$66,$0c,$18,$18,$18,$18,        $00
                              ; $38 
4EEE  3C66663C66663C00         fcb $3c,$66,$66,$3c,$66,$66,$3c,        $00
                              ; $39 
4EF6  3C66663E06663C00         fcb $3c,$66,$66,$3e,$06,$66,$3c,        $00
                              ; $3a 
4EFE  0000180000180000         fcb $00,$00,$18,$00,$00,$18,$00,        $00
                              ; $3b 
4F06  0000180000181830         fcb $00,$00,$18,$00,$00,$18,$18,        $30
                              ; $3c 
4F0E  0E18306030180E00         fcb $0e,$18,$30,$60,$30,$18,$0e,        $00
                              ; $3d 
4F16  00007E007E000000         fcb $00,$00,$7e,$00,$7e,$00,$00,        $00
                              ; $3e 
4F1E  70180C060C187000         fcb $70,$18,$0c,$06,$0c,$18,$70,        $00
                              ; $3f 
4F26  3C66060C18001800         fcb $3c,$66,$06,$0c,$18,$00,$18,        $00
                              ; $40 
4F2E  000000FFFF000000         fcb $00,$00,$00,$ff,$ff,$00,$00,        $00
                              ; $41 
4F36  183C667E66666600         fcb $18,$3c,$66,$7e,$66,$66,$66,        $00
                              ; $42 
4F3E  7C66667C66667C00         fcb $7c,$66,$66,$7c,$66,$66,$7c,        $00
                              ; $43 
4F46  3C66606060663C00         fcb $3c,$66,$60,$60,$60,$66,$3c,        $00
                              ; $44 
4F4E  786C6666666C7800         fcb $78,$6c,$66,$66,$66,$6c,$78,        $00
                              ; $45 
4F56  7E60607860607E00         fcb $7e,$60,$60,$78,$60,$60,$7e,        $00
                              ; $46 
4F5E  7E60607860606000         fcb $7e,$60,$60,$78,$60,$60,$60,        $00
                              ; $47 
4F66  3C66606E66663C00         fcb $3c,$66,$60,$6e,$66,$66,$3c,        $00
                              ; $48 
4F6E  6666667E66666600         fcb $66,$66,$66,$7e,$66,$66,$66,        $00
                              ; $49 
4F76  3C18181818183C00         fcb $3c,$18,$18,$18,$18,$18,$3c,        $00
                              ; $4a 
4F7E  1E0C0C0C0C6C3800         fcb $1e,$0c,$0c,$0c,$0c,$6c,$38,        $00
                              ; $4b 
4F86  666C7870786C6600         fcb $66,$6c,$78,$70,$78,$6c,$66,        $00
                              ; $4c 
4F8E  6060606060607E00         fcb $60,$60,$60,$60,$60,$60,$7e,        $00
                              ; $4d 
4F96  63777F6B63636300         fcb $63,$77,$7f,$6b,$63,$63,$63,        $00
                              ; $4e 
4F9E  66767E7E6E666600         fcb $66,$76,$7e,$7e,$6e,$66,$66,        $00
                              ; $4f 
4FA6  3C66666666663C00         fcb $3c,$66,$66,$66,$66,$66,$3c,        $00
                              ; $50 
4FAE  7C66667C60606000         fcb $7c,$66,$66,$7c,$60,$60,$60,        $00
                              ; $51 
4FB6  3C666666663C0E00         fcb $3c,$66,$66,$66,$66,$3c,$0e,        $00
                              ; $52 
4FBE  7C66667C786C6600         fcb $7c,$66,$66,$7c,$78,$6c,$66,        $00
                              ; $53 
4FC6  3C66603C06663C00         fcb $3c,$66,$60,$3c,$06,$66,$3c,        $00
                              ; $54 
4FCE  7E18181818181800         fcb $7e,$18,$18,$18,$18,$18,$18,        $00
                              ; $55 
4FD6  6666666666663C00         fcb $66,$66,$66,$66,$66,$66,$3c,        $00
                              ; $56 
4FDE  66666666663C1800         fcb $66,$66,$66,$66,$66,$3c,$18,        $00
                              ; $57 
4FE6  6363636B7F776300         fcb $63,$63,$63,$6b,$7f,$77,$63,        $00
                              ; $58 
4FEE  66663C183C666600         fcb $66,$66,$3c,$18,$3c,$66,$66,        $00
                              ; $59 
4FF6  6666663C18181800         fcb $66,$66,$66,$3c,$18,$18,$18,        $00
                              ; $5a 
4FFE  7E060C1830607E00         fcb $7e,$06,$0c,$18,$30,$60,$7e,        $00
                              ; $5b 
5006  181818FFFF181818         fcb $18,$18,$18,$ff,$ff,$18,$18,        $18
                              ; $5c 
500E  C0C03030C0C03030         fcb $c0,$c0,$30,$30,$c0,$c0,$30,        $30
                              ; $5d 
5016  1818181818181818         fcb $18,$18,$18,$18,$18,$18,$18,        $18
                              ; $5e 
501E  3333CCCC3333CCCC         fcb $33,$33,$cc,$cc,$33,$33,$cc,        $cc
                              ; $5f 
5026  3399CC663399CC66         fcb $33,$99,$cc,$66,$33,$99,$cc,        $66
                              ; $60 
502E  0000000000000000         fcb $00,$00,$00,$00,$00,$00,$00,        $00
                              ; $61 
5036  F0F0F0F0F0F0F0F0         fcb $f0,$f0,$f0,$f0,$f0,$f0,$f0,        $f0
                              ; $62 
503E  00000000FFFFFFFF         fcb $00,$00,$00,$00,$ff,$ff,$ff,        $ff
                              ; $63 
5046  FF00000000000000         fcb $ff,$00,$00,$00,$00,$00,$00,        $00
                              ; $64 
504E  00000000000000FF         fcb $00,$00,$00,$00,$00,$00,$00,        $ff
                              ; $65 
5056  C0C0C0C0C0C0C0C0         fcb $c0,$c0,$c0,$c0,$c0,$c0,$c0,        $c0
                              ; $66 
505E  CCCC3333CCCC3333         fcb $cc,$cc,$33,$33,$cc,$cc,$33,        $33
                              ; $67 
5066  0303030303030303         fcb $03,$03,$03,$03,$03,$03,$03,        $03
                              ; $68 
506E  00000000CCCC3333         fcb $00,$00,$00,$00,$cc,$cc,$33,        $33
                              ; $69 
5076  CC993366CC993366         fcb $cc,$99,$33,$66,$cc,$99,$33,        $66
                              ; $6a 
507E  0303030303030303         fcb $03,$03,$03,$03,$03,$03,$03,        $03
                              ; $6b 
5086  1818181F1F181818         fcb $18,$18,$18,$1f,$1f,$18,$18,        $18
                              ; $6c 
508E  000000000F0F0F0F         fcb $00,$00,$00,$00,$0f,$0f,$0f,        $0f
                              ; $6d 
5096  1818181F1F000000         fcb $18,$18,$18,$1f,$1f,$00,$00,        $00
                              ; $6e 
509E  000000F8F8181818         fcb $00,$00,$00,$f8,$f8,$18,$18,        $18
                              ; $6f 
50A6  000000000000FFFF         fcb $00,$00,$00,$00,$00,$00,$ff,        $ff
                              ; $70 
50AE  0000001F1F181818         fcb $00,$00,$00,$1f,$1f,$18,$18,        $18
                              ; $71 
50B6  181818FFFF000000         fcb $18,$18,$18,$ff,$ff,$00,$00,        $00
                              ; $72 
50BE  000000FFFF181818         fcb $00,$00,$00,$ff,$ff,$18,$18,        $18
                              ; $73 
50C6  181818F8F8181818         fcb $18,$18,$18,$f8,$f8,$18,$18,        $18
                              ; $74 
50CE  C0C0C0C0C0C0C0C0         fcb $c0,$c0,$c0,$c0,$c0,$c0,$c0,        $c0
                              ; $75 
50D6  E0E0E0E0E0E0E0E0         fcb $e0,$e0,$e0,$e0,$e0,$e0,$e0,        $e0
                              ; $76 
50DE  0707070707070707         fcb $07,$07,$07,$07,$07,$07,$07,        $07
                              ; $77 
50E6  FFFF000000000000         fcb $ff,$ff,$00,$00,$00,$00,$00,        $00
                              ; $78 
50EE  FFFFFF0000000000         fcb $ff,$ff,$ff,$00,$00,$00,$00,        $00
                              ; $79 
50F6  0000000000FFFFFF         fcb $00,$00,$00,$00,$00,$ff,$ff,        $ff
                              ; $7a 
50FE  0103066C78706000         fcb $01,$03,$06,$6c,$78,$70,$60,        $00
                              ; $7b 
5106  00000000F0F0F0F0         fcb $00,$00,$00,$00,$f0,$f0,$f0,        $f0
                              ; $7c 
510E  0F0F0F0F00000000         fcb $0f,$0f,$0f,$0f,$00,$00,$00,        $00
                              ; $7d 
5116  181818F8F8000000         fcb $18,$18,$18,$f8,$f8,$00,$00,        $00
                              ; $7e 
511E  F0F0F0F000000000         fcb $f0,$f0,$f0,$f0,$00,$00,$00,        $00
                              ; $7f 
5126  F0F0F0F00F0F0F0F         fcb $f0,$f0,$f0,$f0,$0f,$0f,$0f,        $0f
                              ; $80 
512E  C39991919F99C3FF         fcb $c3,$99,$91,$91,$9f,$99,$c3,        $ff
                              ; $81 
5136  FFFFC3F9C199C1FF         fcb $ff,$ff,$c3,$f9,$c1,$99,$c1,        $ff
                              ; $82 
513E  FF9F9F83999983FF         fcb $ff,$9f,$9f,$83,$99,$99,$83,        $ff
                              ; $83 
5146  FFFFC39F9F9FC3FF         fcb $ff,$ff,$c3,$9f,$9f,$9f,$c3,        $ff
                              ; $84 
514E  FFF9F9C19999C1FF         fcb $ff,$f9,$f9,$c1,$99,$99,$c1,        $ff
                              ; $85 
5156  FFFFC399819FC3FF         fcb $ff,$ff,$c3,$99,$81,$9f,$c3,        $ff
                              ; $86 
515E  FFF1E7C1E7E7E7FF         fcb $ff,$f1,$e7,$c1,$e7,$e7,$e7,        $ff
                              ; $87 
5166  FFFFC19999C1F983         fcb $ff,$ff,$c1,$99,$99,$c1,$f9,        $83
                              ; $88 
516E  FF9F9F83999999FF         fcb $ff,$9f,$9f,$83,$99,$99,$99,        $ff
                              ; $89 
5176  FFE7FFC7E7E7C3FF         fcb $ff,$e7,$ff,$c7,$e7,$e7,$c3,        $ff
                              ; $8a 
517E  FFF9FFF9F9F9F9C3         fcb $ff,$f9,$ff,$f9,$f9,$f9,$f9,        $c3
                              ; $8b 
5186  FF9F9F93879399FF         fcb $ff,$9f,$9f,$93,$87,$93,$99,        $ff
                              ; $8c 
518E  FFC7E7E7E7E7C3FF         fcb $ff,$c7,$e7,$e7,$e7,$e7,$c3,        $ff
                              ; $8d 
5196  FFFF998080949CFF         fcb $ff,$ff,$99,$80,$80,$94,$9c,        $ff
                              ; $8e 
519E  FFFF8399999999FF         fcb $ff,$ff,$83,$99,$99,$99,$99,        $ff
                              ; $8f 
51A6  FFFFC3999999C3FF         fcb $ff,$ff,$c3,$99,$99,$99,$c3,        $ff
                              ; $90 
51AE  FFFF839999839F9F         fcb $ff,$ff,$83,$99,$99,$83,$9f,        $9f
                              ; $91 
51B6  FFFFC19999C1F9F9         fcb $ff,$ff,$c1,$99,$99,$c1,$f9,        $f9
                              ; $92 
51BE  FFFF83999F9F9FFF         fcb $ff,$ff,$83,$99,$9f,$9f,$9f,        $ff
                              ; $93 
51C6  FFFFC19FC3F983FF         fcb $ff,$ff,$c1,$9f,$c3,$f9,$83,        $ff
                              ; $94 
51CE  FFE781E7E7E7F1FF         fcb $ff,$e7,$81,$e7,$e7,$e7,$f1,        $ff
                              ; $95 
51D6  FFFF99999999C1FF         fcb $ff,$ff,$99,$99,$99,$99,$c1,        $ff
                              ; $96 
51DE  FFFF999999C3E7FF         fcb $ff,$ff,$99,$99,$99,$c3,$e7,        $ff
                              ; $97 
51E6  FFFF9C9480C1C9FF         fcb $ff,$ff,$9c,$94,$80,$c1,$c9,        $ff
                              ; $98 
51EE  FFFF99C3E7C399FF         fcb $ff,$ff,$99,$c3,$e7,$c3,$99,        $ff
                              ; $99 
51F6  FFFF999999C1F387         fcb $ff,$ff,$99,$99,$99,$c1,$f3,        $87
                              ; $9a 
51FE  FFFF81F3E7CF81FF         fcb $ff,$ff,$81,$f3,$e7,$cf,$81,        $ff
                              ; $9b 
5206  C3CFCFCFCFCFC3FF         fcb $c3,$cf,$cf,$cf,$cf,$cf,$c3,        $ff
                              ; $9c 
520E  F3EDCF83CF9D03FF         fcb $f3,$ed,$cf,$83,$cf,$9d,$03,        $ff
                              ; $9d 
5216  C3F3F3F3F3F3C3FF         fcb $c3,$f3,$f3,$f3,$f3,$f3,$c3,        $ff
                              ; $9e 
521E  FFE7C381E7E7E7E7         fcb $ff,$e7,$c3,$81,$e7,$e7,$e7,        $e7
                              ; $9f 
5226  FFEFCF8080CFEFFF         fcb $ff,$ef,$cf,$80,$80,$cf,$ef,        $ff
                              ; $a0 
522E  FFFFFFFFFFFFFFFF         fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,        $ff
                              ; $a1 
5236  E7E7E7E7FFFFE7FF         fcb $e7,$e7,$e7,$e7,$ff,$ff,$e7,        $ff
                              ; $a2 
523E  999999FFFFFFFFFF         fcb $99,$99,$99,$ff,$ff,$ff,$ff,        $ff
                              ; $a3 
5246  99990099009999FF         fcb $99,$99,$00,$99,$00,$99,$99,        $ff
                              ; $a4 
524E  E7C19FC3F983E7FF         fcb $e7,$c1,$9f,$c3,$f9,$83,$e7,        $ff
                              ; $a5 
5256  9D99F3E7CF99B9FF         fcb $9d,$99,$f3,$e7,$cf,$99,$b9,        $ff
                              ; $a6 
525E  C399C3C79899C0FF         fcb $c3,$99,$c3,$c7,$98,$99,$c0,        $ff
                              ; $a7 
5266  F9F3E7FFFFFFFFFF         fcb $f9,$f3,$e7,$ff,$ff,$ff,$ff,        $ff
                              ; $a8 
526E  F3E7CFCFCFE7F3FF         fcb $f3,$e7,$cf,$cf,$cf,$e7,$f3,        $ff
                              ; $a9 
5276  CFE7F3F3F3E7CFFF         fcb $cf,$e7,$f3,$f3,$f3,$e7,$cf,        $ff
                              ; $aa 
527E  FF99C300C399FFFF         fcb $ff,$99,$c3,$00,$c3,$99,$ff,        $ff
                              ; $ab 
5286  FFE7E781E7E7FFFF         fcb $ff,$e7,$e7,$81,$e7,$e7,$ff,        $ff
                              ; $ac 
528E  FFFFFFFFFFE7E7CF         fcb $ff,$ff,$ff,$ff,$ff,$e7,$e7,        $cf
                              ; $ad 
5296  FFFFFF81FFFFFFFF         fcb $ff,$ff,$ff,$81,$ff,$ff,$ff,        $ff
                              ; $ae 
529E  FFFFFFFFFFE7E7FF         fcb $ff,$ff,$ff,$ff,$ff,$e7,$e7,        $ff
                              ; $af 
52A6  FFFCF9F3E7CF9FFF         fcb $ff,$fc,$f9,$f3,$e7,$cf,$9f,        $ff
                              ; $b0 
52AE  C39991899999C3FF         fcb $c3,$99,$91,$89,$99,$99,$c3,        $ff
                              ; $b1 
52B6  E7E7C7E7E7E781FF         fcb $e7,$e7,$c7,$e7,$e7,$e7,$81,        $ff
                              ; $b2 
52BE  C399F9F3CF9F81FF         fcb $c3,$99,$f9,$f3,$cf,$9f,$81,        $ff
                              ; $b3 
52C6  C399F9E3F999C3FF         fcb $c3,$99,$f9,$e3,$f9,$99,$c3,        $ff
                              ; $b4 
52CE  F9F1E19980F9F9FF         fcb $f9,$f1,$e1,$99,$80,$f9,$f9,        $ff
                              ; $b5 
52D6  819F83F9F999C3FF         fcb $81,$9f,$83,$f9,$f9,$99,$c3,        $ff
                              ; $b6 
52DE  C3999F839999C3FF         fcb $c3,$99,$9f,$83,$99,$99,$c3,        $ff
                              ; $b7 
52E6  8199F3E7E7E7E7FF         fcb $81,$99,$f3,$e7,$e7,$e7,$e7,        $ff
                              ; $b8 
52EE  C39999C39999C3FF         fcb $c3,$99,$99,$c3,$99,$99,$c3,        $ff
                              ; $b9 
52F6  C39999C1F999C3FF         fcb $c3,$99,$99,$c1,$f9,$99,$c3,        $ff
                              ; $ba 
52FE  FFFFE7FFFFE7FFFF         fcb $ff,$ff,$e7,$ff,$ff,$e7,$ff,        $ff
                              ; $bb 
5306  FFFFE7FFFFE7E7CF         fcb $ff,$ff,$e7,$ff,$ff,$e7,$e7,        $cf
                              ; $bc 
530E  F1E7CF9FCFE7F1FF         fcb $f1,$e7,$cf,$9f,$cf,$e7,$f1,        $ff
                              ; $bd 
5316  FFFF81FF81FFFFFF         fcb $ff,$ff,$81,$ff,$81,$ff,$ff,        $ff
                              ; $be 
531E  8FE7F3F9F3E78FFF         fcb $8f,$e7,$f3,$f9,$f3,$e7,$8f,        $ff
                              ; $bf 
5326  C399F9F3E7FFE7FF         fcb $c3,$99,$f9,$f3,$e7,$ff,$e7,        $ff
                              ; $c0 
532E  FFFFFF0000FFFFFF         fcb $ff,$ff,$ff,$00,$00,$ff,$ff,        $ff
                              ; $c1 
5336  E7C39981999999FF         fcb $e7,$c3,$99,$81,$99,$99,$99,        $ff
                              ; $c2 
533E  83999983999983FF         fcb $83,$99,$99,$83,$99,$99,$83,        $ff
                              ; $c3 
5346  C3999F9F9F99C3FF         fcb $c3,$99,$9f,$9f,$9f,$99,$c3,        $ff
                              ; $c4 
534E  87939999999387FF         fcb $87,$93,$99,$99,$99,$93,$87,        $ff
                              ; $c5 
5356  819F9F879F9F81FF         fcb $81,$9f,$9f,$87,$9f,$9f,$81,        $ff
                              ; $c6 
535E  819F9F879F9F9FFF         fcb $81,$9f,$9f,$87,$9f,$9f,$9f,        $ff
                              ; $c7 
5366  C3999F919999C3FF         fcb $c3,$99,$9f,$91,$99,$99,$c3,        $ff
                              ; $c8 
536E  99999981999999FF         fcb $99,$99,$99,$81,$99,$99,$99,        $ff
                              ; $c9 
5376  C3E7E7E7E7E7C3FF         fcb $c3,$e7,$e7,$e7,$e7,$e7,$c3,        $ff
                              ; $ca 
537E  E1F3F3F3F393C7FF         fcb $e1,$f3,$f3,$f3,$f3,$93,$c7,        $ff
                              ; $cb 
5386  9993878F879399FF         fcb $99,$93,$87,$8f,$87,$93,$99,        $ff
                              ; $cc 
538E  9F9F9F9F9F9F81FF         fcb $9f,$9f,$9f,$9f,$9f,$9f,$81,        $ff
                              ; $cd 
5396  9C8880949C9C9CFF         fcb $9c,$88,$80,$94,$9c,$9c,$9c,        $ff
                              ; $ce 
539E  99898181919999FF         fcb $99,$89,$81,$81,$91,$99,$99,        $ff
                              ; $cf 
53A6  C39999999999C3FF         fcb $c3,$99,$99,$99,$99,$99,$c3,        $ff
                              ; $d0 
53AE  839999839F9F9FFF         fcb $83,$99,$99,$83,$9f,$9f,$9f,        $ff
                              ; $d1 
53B6  C399999999C3F1FF         fcb $c3,$99,$99,$99,$99,$c3,$f1,        $ff
                              ; $d2 
53BE  83999983879399FF         fcb $83,$99,$99,$83,$87,$93,$99,        $ff
                              ; $d3 
53C6  C3999FC3F999C3FF         fcb $c3,$99,$9f,$c3,$f9,$99,$c3,        $ff
                              ; $d4 
53CE  81E7E7E7E7E7E7FF         fcb $81,$e7,$e7,$e7,$e7,$e7,$e7,        $ff
                              ; $d5 
53D6  999999999999C3FF         fcb $99,$99,$99,$99,$99,$99,$c3,        $ff
                              ; $d6 
53DE  9999999999C3E7FF         fcb $99,$99,$99,$99,$99,$c3,$e7,        $ff
                              ; $d7 
53E6  9C9C9C9480889CFF         fcb $9c,$9c,$9c,$94,$80,$88,$9c,        $ff
                              ; $d8 
53EE  9999C3E7C39999FF         fcb $99,$99,$c3,$e7,$c3,$99,$99,        $ff
                              ; $d9 
53F6  999999C3E7E7E7FF         fcb $99,$99,$99,$c3,$e7,$e7,$e7,        $ff
                              ; $da 
53FE  81F9F3E7CF9F81FF         fcb $81,$f9,$f3,$e7,$cf,$9f,$81,        $ff
                              ; $db 
5406  E7E7E70000E7E7E7         fcb $e7,$e7,$e7,$00,$00,$e7,$e7,        $e7
                              ; $dc 
540E  3F3FCFCF3F3FCFCF         fcb $3f,$3f,$cf,$cf,$3f,$3f,$cf,        $cf
                              ; $dd 
5416  E7E7E7E7E7E7E7E7         fcb $e7,$e7,$e7,$e7,$e7,$e7,$e7,        $e7
                              ; $de 
541E  CCCC3333CCCC3333         fcb $cc,$cc,$33,$33,$cc,$cc,$33,        $33
                              ; $df 
5426  CC663399CC663399         fcb $cc,$66,$33,$99,$cc,$66,$33,        $99
                              ; $e0 
542E  FFFFFFFFFFFFFFFF         fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,        $ff
                              ; $e1 
5436  0F0F0F0F0F0F0F0F         fcb $0f,$0f,$0f,$0f,$0f,$0f,$0f,        $0f
                              ; $e2 
543E  FFFFFFFF00000000         fcb $ff,$ff,$ff,$ff,$00,$00,$00,        $00
                              ; $e3 
5446  00FFFFFFFFFFFFFF         fcb $00,$ff,$ff,$ff,$ff,$ff,$ff,        $ff
                              ; $e4 
544E  FFFFFFFFFFFFFF00         fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,        $00
                              ; $e5 
5456  3F3F3F3F3F3F3F3F         fcb $3f,$3f,$3f,$3f,$3f,$3f,$3f,        $3f
                              ; $e6 
545E  3333CCCC3333CCCC         fcb $33,$33,$cc,$cc,$33,$33,$cc,        $cc
                              ; $e7 
5466  FCFCFCFCFCFCFCFC         fcb $fc,$fc,$fc,$fc,$fc,$fc,$fc,        $fc
                              ; $e8 
546E  FFFFFFFF3333CCCC         fcb $ff,$ff,$ff,$ff,$33,$33,$cc,        $cc
                              ; $e9 
5476  3366CC993366CC99         fcb $33,$66,$cc,$99,$33,$66,$cc,        $99
                              ; $ea 
547E  FCFCFCFCFCFCFCFC         fcb $fc,$fc,$fc,$fc,$fc,$fc,$fc,        $fc
                              ; $eb 
5486  E7E7E7E0E0E7E7E7         fcb $e7,$e7,$e7,$e0,$e0,$e7,$e7,        $e7
                              ; $ec 
548E  FFFFFFFFF0F0F0F0         fcb $ff,$ff,$ff,$ff,$f0,$f0,$f0,        $f0
                              ; $ed 
5496  E7E7E7E0E0FFFFFF         fcb $e7,$e7,$e7,$e0,$e0,$ff,$ff,        $ff
                              ; $ee 
549E  FFFFFF0707E7E7E7         fcb $ff,$ff,$ff,$07,$07,$e7,$e7,        $e7
                              ; $ef 
54A6  FFFFFFFFFFFF0000         fcb $ff,$ff,$ff,$ff,$ff,$ff,$00,        $00
                              ; $f0 
54AE  FFFFFFE0E0E7E7E7         fcb $ff,$ff,$ff,$e0,$e0,$e7,$e7,        $e7
                              ; $f1 
54B6  E7E7E70000FFFFFF         fcb $e7,$e7,$e7,$00,$00,$ff,$ff,        $ff
                              ; $f2 
54BE  FFFFFF0000E7E7E7         fcb $ff,$ff,$ff,$00,$00,$e7,$e7,        $e7
                              ; $f3 
54C6  E7E7E70707E7E7E7         fcb $e7,$e7,$e7,$07,$07,$e7,$e7,        $e7
                              ; $f4 
54CE  3F3F3F3F3F3F3F3F         fcb $3f,$3f,$3f,$3f,$3f,$3f,$3f,        $3f
                              ; $f5 
54D6  1F1F1F1F1F1F1F1F         fcb $1f,$1f,$1f,$1f,$1f,$1f,$1f,        $1f
                              ; $f6 
54DE  F8F8F8F8F8F8F8F8         fcb $f8,$f8,$f8,$f8,$f8,$f8,$f8,        $f8
                              ; $f7 
54E6  0000FFFFFFFFFFFF         fcb $00,$00,$ff,$ff,$ff,$ff,$ff,        $ff
                              ; $f8 
54EE  000000FFFFFFFFFF         fcb $00,$00,$00,$ff,$ff,$ff,$ff,        $ff
                              ; $f9 
54F6  FFFFFFFFFF000000         fcb $ff,$ff,$ff,$ff,$ff,$00,$00,        $00
                              ; $fa 
54FE  FEFCF993878F9FFF         fcb $fe,$fc,$f9,$93,$87,$8f,$9f,        $ff
                              ; $fb 
5506  FFFFFFFF0F0F0F0F         fcb $ff,$ff,$ff,$ff,$0f,$0f,$0f,        $0f
                              ; $fc 
550E  F0F0F0F0FFFFFFFF         fcb $f0,$f0,$f0,$f0,$ff,$ff,$ff,        $ff
                              ; $fd 
5516  E7E7E70707FFFFFF         fcb $e7,$e7,$e7,$07,$07,$ff,$ff,        $ff
                              ; $fe 
551E  0F0F0F0FFFFFFFFF         fcb $0f,$0f,$0f,$0f,$ff,$ff,$ff,        $ff
0020                  MAXSTRINGS                    equ 32
5526  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 DESCRIPTORS                   rzb 128
rzb 512
rzb 512
59A6  0200            FREE_STRING                   fdb 512
                      ; peephole: pass 1, 147 changes.
                      ; peephole: pass 2, 41 changes.
                      ; peephole: pass 3, 13 changes.
                      ; peephole: pass 4, 1 change.
                      ; peephole: pass 5, 0 change.
                      ; peephole: pass 6, 43 vars removed.
                      ; peephole: pass 7, 6 changes.
                      ; peephole: pass 8, 0 change.
                      ; peephole: pass 9, 1 var removed.
                      ; peephole: pass 10, 1 change.
                      ; peephole: pass 11, 0 change.
                      ; peephole: pass 12, 0 var removed.
                      ; peephole: pass 13, 11 vars moved to dp, 64 vars inlined.
